/*
 * dht11.c
 *
 *  Created on: Jan 5, 2024
 *      Author: pabme
 */
#include "cmsis_os.h"
#include <stdio.h>
#include "dht11.h"
#include <string.h>

extern TIM_HandleTypeDef htim11;
extern osEventFlagsId_t flag_Event;
extern UART_HandleTypeDef huart2;

#define MICROS_80US 60
#define MICROS_50US 30
#define MICROS_26US 30
//#define MICROS_70US 2

///// ------------------
void bit_value (int num, int * i, int *j){//, unsigned char * value){
    *i = num / 8;
    *j = num % 8;
}

unsigned char datos_value ( unsigned char datos, int j){
    unsigned char value = datos;
    value = (value & (0x80 >> j));
    if (value != 0){
        value = 1;
    }else {
        value = 0;
    }
    return value;
}

// Enumeración para representar los estados
enum Estados {
    STOP, // antes de empezar
    INIT_1, // Bajo de 80 us
    INIT_2, // Alto de 80 us
    LECTURA, // Lectura 50 us
    BIT, // Cual bit? (0 - 1) -> (28us - 70us)
    FIN
};


unsigned char maquinaDeEstados(int cnt, unsigned char val, unsigned char * fin) {
	// Variable estática para almacenar el estado
	static enum Estados estadoActual = STOP;
	static unsigned char cnt_bit = 0;

	// Return 1-> STOP
	// Return 2-> INIT_1
	// Return 3-> INIT_2
	// Return 4-> LECTURA
	// Return 5-> BIT_0
	// Return 6-> BIT_1
	// Return 7-> STOP
	// Return 8-> default

	// Máquina de estados: transición y procesamiento
	switch (estadoActual) {
		case STOP:
			//printf("Entrando en el estado STOP\n");

			// 1 -> 0

			if (val == 1){
				estadoActual = INIT_1;
			}

			return 1;
			break;

		case INIT_1:
			//printf("Entrando en el estado INIT_1\n");
			// Lógica de transición para pasar al estado siguiente (LECTURA)

			if (val == 0){
				if (cnt > MICROS_80US){ // 60 us seguro
					// 80 us pasados
					estadoActual = INIT_2;
				}
			}

			return 2;
			break;

		case INIT_2:
			//printf("Entrando en el estado INIT_2\n");
			// Lógica de transición para pasar al estado siguiente (LECTURA)

			if (val == 1){
				if (cnt > MICROS_80US){ // 60 us seguro
					// 80 us pasados
					estadoActual = LECTURA;
				}
			}
			return 3;
			break;

		case LECTURA:
			//printf("Entrando en el estado LECTURA\n");
			// Lógica de transición para pasar al estado siguiente (FIN)

			if (val == 0){
				if (cnt > MICROS_50US){ // 60 us seguro
					// 50 us pasados
					estadoActual = BIT;
				}
			}
			return 4;
			break;

		case BIT:
			//printf("Entrando en el estado BIT\n");
			// Lógica de transición para pasar al estado siguiente (FIN)

			if (val == 1){
				estadoActual = LECTURA;
				cnt_bit++;
				if (cnt_bit == 40){
					estadoActual = FIN;
					if (cnt < MICROS_26US){
					// 0 (30 us)
						//printf("cnt_bit = %d , bit = %d\n", cnt_bit, 0);
						//printf("cnt_bit = %d FIN\n", cnt_bit);
						return 5;
					}else{
						// 1 (70 us)
						//printf("cnt_bit = %d , bit = %d\n", cnt_bit, 1);
						//printf("cnt_bit = %d FIN\n", cnt_bit);
						return 6;
					}
					break;
				}

				if (cnt < MICROS_26US){
					// 0 (30 us)
					//printf("cnt_bit = %d , bit = %d\n", cnt_bit, 0);
					return 5;
				}else{
					// 1 (70 us)
					//printf("cnt_bit = %d , bit = %d\n", cnt_bit, 1);
					return 6;
				}
			}

			break;

		case FIN:
			printf("Entrando en el estado FIN\n");
			// Lógica de transición para volver al estado inicial (INIT)
			// Restaurar estado inicial (siguiente iteración)
			estadoActual = STOP;
			cnt_bit = 0;

			*fin = 1;
			return 7;
			break;

		// Otros casos y lógica de manejo de errores si es necesario

		default:
			// Manejo de un estado no esperado
			//printf("Error: Estado no reconocido.\n");
			return 8;
			break;
	}
}

void lectura_Buff(unsigned char* datos, unsigned char* data){
	unsigned char count = 0;
	int i = 0; // valor de array
	int j = 0; // desplazamiento de array
	unsigned char val = 1;
	unsigned char val_ant = 1;

	unsigned char num_pin = 0;
	unsigned char n = 0;
	unsigned char fin = 0;
	for (int num = 0; num < 8*499; num ++){

		if (fin == 1){
			// Terminar
			break;
		}

		bit_value (num, &i, &j);
		val = datos_value (datos[i], j);
		//printf("num(%d) -> %d\n", num, val);

		if (val == val_ant){
			count++;
		}else {
			// Hay cambio de estado (implementar algoritmo)
			//printf("val = %d, count = %d\n\n", val, count);
			n = maquinaDeEstados(count, val_ant, &fin);

			if (n == 5){ // 0
				data[num_pin / 8] <<= 1;
				num_pin++;
			}else if (n == 6){ // 1
				data[num_pin / 8] <<= 1;
				data[num_pin / 8] |= 1;
				num_pin++;
			}

			val_ant = val;
			count = 1;
		}
	}
}
/////// ------------------


void DHT11_Delay(uint32_t uSeg) {

	uSeg = uSeg*4;

		for (uint32_t i = 0; i < uSeg; ++i) {
	        __NOP();
	    }
}


void DHT11_Init(DHT11_TypeDef* dht11) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  //__HAL_RCC_GPIOx_CLK_ENABLE(); // Reemplaza 'x' con el puerto GPIO que estás utilizando

  GPIO_InitStruct.Pin = dht11->GPIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(dht11->GPIO_Port, &GPIO_InitStruct);
  HAL_GPIO_WritePin(dht11->GPIO_Port, dht11->GPIO_Pin, GPIO_PIN_SET);
}

//HAL_StatusTypeDef DHT11_ReadData(DHT11_TypeDef* dht11, uint8_t* humidity, uint8_t* temperature) {
//
//  // Configurar modo salida
//  GPIO_InitTypeDef GPIO_InitStruct = {0};
//  GPIO_InitStruct.Pin = dht11->GPIO_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  HAL_GPIO_Init(dht11->GPIO_Port, &GPIO_InitStruct);
//
//  // Iniciar la comunicación con el sensor DHT11
//  HAL_GPIO_WritePin(dht11->GPIO_Port, dht11->GPIO_Pin, GPIO_PIN_RESET);
//  osDelay(18); // Mantén bajo durante al menos 18 ms
//
//  // Cambiar a la fase de lectura
//  HAL_GPIO_WritePin(dht11->GPIO_Port, dht11->GPIO_Pin, GPIO_PIN_SET);
//  DHT11_Delay(1); // Espera antes de leer la respuesta del sensor
//
//  // Configurar el pin como entrada
//  GPIO_InitStruct.Pin = dht11->GPIO_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//  GPIO_InitStruct.Pull = GPIO_PULLUP;
//  HAL_GPIO_Init(dht11->GPIO_Port, &GPIO_InitStruct);
//
//  while (HAL_GPIO_ReadPin(dht11->GPIO_Port, dht11->GPIO_Pin) == GPIO_PIN_SET){
//	  DHT11_Delay(1);
//  }
//
//  DHT11_Delay(79);
//
//  //
//  while (HAL_GPIO_ReadPin(dht11->GPIO_Port, dht11->GPIO_Pin) == GPIO_PIN_RESET){
//    DHT11_Delay(1);
//  }
//
//  DHT11_Delay(79);
//
//
//  // Leer la respuesta del sensor (40 bits de datos)
//  uint8_t data[5] = {0};
//  uint8_t count_high = 0;
//  for (int i = 0; i < 40; ++i) {
//    // DHT11_Delay(50); // Espera para cada bit
//
//	  DHT11_Delay(70);
//
//    //DHT11_Delay(20);
//    // Mientras que
//    count_high  = 0;
//    while (HAL_GPIO_ReadPin(dht11->GPIO_Port, dht11->GPIO_Pin) == GPIO_PIN_SET){
//    	count_high ++;
//    	DHT11_Delay(1);
//    }
//    if (count_high > 8 ){
//    	// Bit '1' detectado
//    	data[i / 8] <<= 1;
//    	data[i / 8] |= 1; // Establece el bit menos significativo a 1
//    }else {
//    	// Bit '0' detectado
//    	data[i / 8] <<= 1; // Desplaza a la izquierda
//    }
//
//
//  }
//
//  // Verificar la suma de comprobación
//  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
//    *humidity = data[0];
//    *temperature = data[2];
//
//    return HAL_OK;
//  } else {
//    return HAL_ERROR;
//  }
//}

//void grafica(DHT11_TypeDef* dht11){
//
//	uint8_t datos[500];
//
//	for (int i = 0; i < 500*8 ; i ++){
//		DHT11_Delay(1);
//		if (HAL_GPIO_ReadPin(dht11->GPIO_Port, dht11->GPIO_Pin) == GPIO_PIN_SET){
//			//datos [i] = 1;
//			datos[i / 8] |= (1 << (i % 8));
//		}else {
//			datos[i / 8] |= (1 << (i % 8));
//		}
//			//datos [i] = 0;
//
//	}
//
//	datos [9] = datos [9];
//	datos [9] = datos [9];
//	datos [9] = datos [9];
//
//	//HAL_UART_Transmit(&huart2, datos, 100, 100U);
//}


HAL_StatusTypeDef DHT11_ReadData(DHT11_TypeDef* dht11, uint8_t* humidity, uint8_t* temperature) {

	uint8_t datos[499];
	memset(&datos, 0, sizeof(datos));

  // Configurar modo salida
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = dht11->GPIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(dht11->GPIO_Port, &GPIO_InitStruct);

  // Iniciar la comunicación con el sensor DHT11
  HAL_GPIO_WritePin(dht11->GPIO_Port, dht11->GPIO_Pin, GPIO_PIN_RESET);
  DHT11_Delay(20000);
  //osDelay(20); // Mantén bajo durante al menos 18 ms

  // Cambiar a la fase de lectura
  HAL_GPIO_WritePin(dht11->GPIO_Port, dht11->GPIO_Pin, GPIO_PIN_SET);
  DHT11_Delay(1); // Espera antes de leer la respuesta del sensor

  // Configurar el pin como entrada
  //GPIO_InitStruct.Pin = dht11->GPIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  //GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(dht11->GPIO_Port, &GPIO_InitStruct);

  //grafica(dht11);


	for (int i = 0; i < 499*8 ; i ++){
		//DHT11_Delay(1);

		if (HAL_GPIO_ReadPin(dht11->GPIO_Port, dht11->GPIO_Pin) == GPIO_PIN_SET){
			//datos [i] = 1;

			datos[i/8] = datos[i/8] << 1 | 0x1;
		}else {
			datos[i/8] = datos[i/8] << 1;
		}
		__NOP();
		__NOP();

	}

	uint8_t data[5] = {0};
	lectura_Buff(datos, data);

	// Verificar la suma de comprobación
	  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
	    *humidity = data[0];
	    *temperature = data[2];
	    return HAL_OK;
	  }else {
		 return HAL_ERROR;
	  }

}

