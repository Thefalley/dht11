/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* Definitions for uart_TX_task */
osThreadId_t uart_TX_taskHandle;
const osThreadAttr_t uart_TX_task_attributes = {
  .name = "uart_TX_task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for uart_RX_task */
osThreadId_t uart_RX_taskHandle;
const osThreadAttr_t uart_RX_task_attributes = {
  .name = "uart_RX_task",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for control_task */
osThreadId_t control_taskHandle;
const osThreadAttr_t control_task_attributes = {
  .name = "control_task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for dht11_task */
osThreadId_t dht11_taskHandle;
const osThreadAttr_t dht11_task_attributes = {
  .name = "dht11_task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for waterLavel_task */
osThreadId_t waterLavel_taskHandle;
const osThreadAttr_t waterLavel_task_attributes = {
  .name = "waterLavel_task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for lcd_task */
osThreadId_t lcd_taskHandle;
const osThreadAttr_t lcd_task_attributes = {
  .name = "lcd_task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for emptyDrum_task */
osThreadId_t emptyDrum_taskHandle;
const osThreadAttr_t emptyDrum_task_attributes = {
  .name = "emptyDrum_task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Q_control_TX */
osMessageQueueId_t Q_control_TXHandle;
const osMessageQueueAttr_t Q_control_TX_attributes = {
  .name = "Q_control_TX"
};
/* Definitions for Q_RX_control */
osMessageQueueId_t Q_RX_controlHandle;
const osMessageQueueAttr_t Q_RX_control_attributes = {
  .name = "Q_RX_control"
};
/* Definitions for Q_dht11_control */
osMessageQueueId_t Q_dht11_controlHandle;
const osMessageQueueAttr_t Q_dht11_control_attributes = {
  .name = "Q_dht11_control"
};
/* Definitions for Q_waterLevel_control */
osMessageQueueId_t Q_waterLevel_controlHandle;
const osMessageQueueAttr_t Q_waterLevel_control_attributes = {
  .name = "Q_waterLevel_control"
};
/* Definitions for mutex_1 */
osMutexId_t mutex_1Handle;
const osMutexAttr_t mutex_1_attributes = {
  .name = "mutex_1"
};
/* Definitions for mutex_2 */
osMutexId_t mutex_2Handle;
const osMutexAttr_t mutex_2_attributes = {
  .name = "mutex_2"
};
/* Definitions for myEventFlag */
osEventFlagsId_t myEventFlagHandle;
const osEventFlagsAttr_t myEventFlag_attributes = {
  .name = "myEventFlag"
};
/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void start_uart_TX_task(void *argument);
void start_uart_RX_task(void *argument);
void start_control_task(void *argument);
void start_dht11_task(void *argument);
void start_waterLavel_task(void *argument);
void start_lcd_task(void *argument);
void start_emptyDrum_task(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
  /* Create the mutex(es) */
  /* creation of mutex_1 */
  mutex_1Handle = osMutexNew(&mutex_1_attributes);

  /* creation of mutex_2 */
  mutex_2Handle = osMutexNew(&mutex_2_attributes);

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Q_control_TX */
  Q_control_TXHandle = osMessageQueueNew (3, sizeof(uint32_t), &Q_control_TX_attributes);

  /* creation of Q_RX_control */
  Q_RX_controlHandle = osMessageQueueNew (3, sizeof(uint32_t), &Q_RX_control_attributes);

  /* creation of Q_dht11_control */
  Q_dht11_controlHandle = osMessageQueueNew (3, sizeof(uint32_t), &Q_dht11_control_attributes);

  /* creation of Q_waterLevel_control */
  Q_waterLevel_controlHandle = osMessageQueueNew (3, sizeof(uint32_t), &Q_waterLevel_control_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uart_TX_task */
  uart_TX_taskHandle = osThreadNew(start_uart_TX_task, NULL, &uart_TX_task_attributes);

  /* creation of uart_RX_task */
  uart_RX_taskHandle = osThreadNew(start_uart_RX_task, NULL, &uart_RX_task_attributes);

  /* creation of control_task */
  control_taskHandle = osThreadNew(start_control_task, NULL, &control_task_attributes);

  /* creation of dht11_task */
  dht11_taskHandle = osThreadNew(start_dht11_task, NULL, &dht11_task_attributes);

  /* creation of waterLavel_task */
  waterLavel_taskHandle = osThreadNew(start_waterLavel_task, NULL, &waterLavel_task_attributes);

  /* creation of lcd_task */
  lcd_taskHandle = osThreadNew(start_lcd_task, NULL, &lcd_task_attributes);

  /* creation of emptyDrum_task */
  emptyDrum_taskHandle = osThreadNew(start_emptyDrum_task, NULL, &emptyDrum_task_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of myEventFlag */
  myEventFlagHandle = osEventFlagsNew(&myEventFlag_attributes);

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart2){
	osEventFlagsSet(myEventFlagHandle, 0x100);
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_start_uart_TX_task */
/**
  * @brief  Function implementing the uart_TX_task thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_uart_TX_task */
void start_uart_TX_task(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	osStatus_t status_Q_control_TX;
	uint32_t recMsg_Q_control_TX;
	uint8_t priMsg_Q_control_TX;

	uint8_t buffTX [40];
	uint16_t buff_len;

	uint8_t hum, temp, watLev;

  for(;;)
  {
	// Esperar que control envie un aviso bit 0x10
		osEventFlagsWait(myEventFlagHandle, 0x10U, osFlagsWaitAll, osWaitForever);
		osEventFlagsClear(myEventFlagHandle, 0x10U);

		hum = 11;
		temp = 22;
		watLev = 33;

		buff_len = sprintf((char*)buffTX, "hum %d, temp %d, watLev %d\n\r", hum, temp, watLev);
		HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len, 100);

//		status_Q_control_TX = osMessageQueueGet(Q_control_TXHandle, &recMsg_Q_control_TX, &priMsg_Q_control_TX, osWaitForever);
//		if (status_Q_control_TX == osOK) {
//			// Mensaje bien recibido
//
//			hum = (recMsg_Q_control_TX & 0xFF);
//			temp = ((recMsg_Q_control_TX>>8) & 0xFF);
//			watLev = ((recMsg_Q_control_TX>>16) & 0xFF);
//
//			buff_len = sprintf((char*)buffTX, "hum %d, temp %d, watLev %d\n\r", hum, temp, watLev);
//			HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len, 100);
//		}

		osDelay(100);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_start_uart_RX_task */
/**
* @brief Function implementing the uart_RX_task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_uart_RX_task */
void start_uart_RX_task(void *argument)
{
  /* USER CODE BEGIN start_uart_RX_task */
  /* Infinite loop */
	unsigned char buffRX[10] = "FFFFFF\0";
	uint16_t buff_len = 1;
	memset(buffRX, 0, buff_len);

	uint8_t err;

	uint32_t delay_ms = 1000;

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
	//HAL_UART_Receive_IT(&huart2, buffRX, buff_len); // Variables globales cambian el funcionamiento

	osStatus_t status_Q_RX_control;
	uint32_t sendMsg_Q_RX_control;

	unsigned char buffTX[20];



	osDelay(1000);

	for(;;)
	  {

		// Esperar que alguien se conecte

	    HAL_UART_Receive_IT(&huart2, buffRX, buff_len);
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		osEventFlagsWait(myEventFlagHandle, 0x100, osFlagsWaitAll, osWaitForever);
		osEventFlagsClear(myEventFlagHandle, 0x100);
	    // 5 s -> 0x001388
		// 1 s -> 0x0003E8

		sscanf(buffRX, "%6x",(unsigned int*) &delay_ms);

		while(1){

			HAL_UART_Receive_IT(&huart2, buffRX, buff_len);

			// Esperar mensaje
			delay_ms = 10000; //Esto se tendra que quitar mas adelante (Aplica un delay de este margen
			err = osEventFlagsWait(myEventFlagHandle, 0x100, osFlagsWaitAll, delay_ms-500);

			// Gestion de recivir mensaje
			if (err == 0){
				// Mensaje recibido
				osEventFlagsClear(myEventFlagHandle, 0x100);
				sscanf(buffRX, "%6x",(unsigned int*) &delay_ms);

				buff_len = sprintf((char*)buffTX, "Mensaje recivido  delay %d\n\r", delay_ms);
				HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len+1, 100);


				if (delay_ms < 500){
					// Romper bucle para volver a conectar
					break;
				}

			}else {// if (err == -2){
				// Delay superado (NO MENSAJE)
				HAL_UART_AbortReceive_IT(&huart2);

				buff_len = sprintf((char*)buffTX, "Tiempo superado  delay %d\n\r", delay_ms);
				HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len+1, 100);
			}

			// Cargar codig
			sendMsg_Q_RX_control = 0x01;
			status_Q_RX_control = osMessageQueuePut(Q_RX_controlHandle, &sendMsg_Q_RX_control, 0, osWaitForever);
			if (status_Q_RX_control == osOK){
				osEventFlagsSet(myEventFlagHandle, 0x10);
			}else {
				; // Error de envio
			}


		}
	  }

  /* USER CODE END start_uart_RX_task */
}

/* USER CODE BEGIN Header_start_control_task */
/**
* @brief Function implementing the control_task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_control_task */
void start_control_task(void *argument)
{
  /* USER CODE BEGIN start_control_task */
  /* Infinite loop */
	unsigned char buffTX[20] = "FFFFFF\0";
	uint16_t buff_len = 6;

	uint8_t count = 0;

	////////////////////////////////////////
  for(;;)
  {

//	  osSemaphoreAcquire(mutex_1Handle, osWaitForever);
//
//		  count ++;
//		  buff_len = sprintf(buffTX, "task 1 init %d\n\r", count);
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len+1, 100);
//
//		  osDelay(100);
//
//		  // Mandar mensaje
//		  buff_len = sprintf((char*)buffTX, "task 1 done %d\n\r", count);
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len+1, 100);
//
//	       // Liberar el mutex antes de pasar a Task2
//		  osSemaphoreRelease(mutex_1Handle);

	 osDelay(100);
  }
  /* USER CODE END start_control_task */
}

/* USER CODE BEGIN Header_start_dht11_task */
/**
* @brief Function implementing the dht11_task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_dht11_task */
void start_dht11_task(void *argument)
{
  /* USER CODE BEGIN start_dht11_task */
  /* Infinite loop */

	unsigned char buffTX[10] = "FFFFFF\0";
	uint16_t buff_len = 6;

	uint8_t count = 0;

  for(;;)
  {
	  ////////////////////////////////////////////////////////////////
//	  osSemaphoreAcquire(mutex_1Handle, osWaitForever);
//		    count ++;
//		    buff_len = sprintf((char*)buffTX, "task 2 init %d\n\r", count);
//		    HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len+1, 100);
//
//		    osDelay(100);
//
//		    // Mandar mensaje
//		    buff_len = sprintf((char*)buffTX, "task 2 done %d\n\r", count);
//		    HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len+1, 100);
//
//		   // Liberar el mutex antes de pasar a Task2
//	  osSemaphoreRelease(mutex_1Handle);

	  osDelay(100);
  }
  /* USER CODE END start_dht11_task */
}

/* USER CODE BEGIN Header_start_waterLavel_task */
/**
* @brief Function implementing the waterLavel_task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_waterLavel_task */
void start_waterLavel_task(void *argument)
{
  /* USER CODE BEGIN start_waterLavel_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
  }
  /* USER CODE END start_waterLavel_task */
}

/* USER CODE BEGIN Header_start_lcd_task */
/**
* @brief Function implementing the lcd_task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_lcd_task */
void start_lcd_task(void *argument)
{
  /* USER CODE BEGIN start_lcd_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
  }
  /* USER CODE END start_lcd_task */
}

/* USER CODE BEGIN Header_start_emptyDrum_task */
/**
* @brief Function implementing the emptyDrum_task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_emptyDrum_task */
void start_emptyDrum_task(void *argument)
{
  /* USER CODE BEGIN start_emptyDrum_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
  }
  /* USER CODE END start_emptyDrum_task */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
