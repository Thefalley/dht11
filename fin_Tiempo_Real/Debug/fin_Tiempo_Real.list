
fin_Tiempo_Real.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a420  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800a5c0  0800a5c0  0001a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa14  0800aa14  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa14  0800aa14  0001aa14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa1c  0800aa1c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa20  0800aa20  0001aa20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800aa24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c24  2000006c  0800aa90  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c90  0800aa90  00024c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018be5  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a31  00000000  00000000  00038cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  0003c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fa  00000000  00000000  0003dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aecf  00000000  00000000  0003edda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c2e  00000000  00000000  00059ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a67db  00000000  00000000  000728d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006790  00000000  00000000  001190b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011f844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a5a8 	.word	0x0800a5a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800a5a8 	.word	0x0800a5a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <readAnalogA0>:
#define B 200 // Calculado papel (0 = (100/460)*400 + b)


extern ADC_HandleTypeDef hadc1;

uint32_t readAnalogA0(void){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	uint32_t agua = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <readAnalogA0+0x2c>)
 8000ba4:	f001 fb46 	bl	8002234 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 8000ba8:	2114      	movs	r1, #20
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <readAnalogA0+0x2c>)
 8000bac:	f001 fbf6 	bl	800239c <HAL_ADC_PollForConversion>
	agua = HAL_ADC_GetValue(&hadc1);
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <readAnalogA0+0x2c>)
 8000bb2:	f001 fc7e 	bl	80024b2 <HAL_ADC_GetValue>
 8000bb6:	6078      	str	r0, [r7, #4]

	return agua;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000008c 	.word	0x2000008c

08000bc8 <getWaterLevel>:

uint32_t getWaterLevel (uint32_t val_agua){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	// 100 agua max
	// 0 agua min
	uint32_t resul;

	// Foto geogebra
	resul = -0.25*val_agua +B;
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fdc9 	bl	8000768 <__aeabi_ui2d>
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <getWaterLevel+0x50>)
 8000bdc:	f7ff fb58 	bl	8000290 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4610      	mov	r0, r2
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <getWaterLevel+0x54>)
 8000bee:	f7ff fc7f 	bl	80004f0 <__adddf3>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff fe2f 	bl	800085c <__aeabi_d2uiz>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	60fb      	str	r3, [r7, #12]

	// Limitado a dos digitos
	if (resul == 100){
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b64      	cmp	r3, #100	; 0x64
 8000c06:	d101      	bne.n	8000c0c <getWaterLevel+0x44>
		resul = 99;
 8000c08:	2363      	movs	r3, #99	; 0x63
 8000c0a:	60fb      	str	r3, [r7, #12]
	}

	return resul ;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	bfd00000 	.word	0xbfd00000
 8000c1c:	40690000 	.word	0x40690000

08000c20 <bit_value>:
#define MICROS_50US 30
#define MICROS_26US 30
//#define MICROS_70US 2

///// ------------------
void bit_value (int num, int * i, int *j){//, unsigned char * value){
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
    *i = num / 8;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	da00      	bge.n	8000c34 <bit_value+0x14>
 8000c32:	3307      	adds	r3, #7
 8000c34:	10db      	asrs	r3, r3, #3
 8000c36:	461a      	mov	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	601a      	str	r2, [r3, #0]
    *j = num % 8;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	425a      	negs	r2, r3
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	f002 0207 	and.w	r2, r2, #7
 8000c48:	bf58      	it	pl
 8000c4a:	4253      	negpl	r3, r2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <datos_value>:

unsigned char datos_value ( unsigned char datos, int j){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
    unsigned char value = datos;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	73fb      	strb	r3, [r7, #15]
    value = (value & (0x80 >> j));
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	fa42 f303 	asr.w	r3, r2, r3
 8000c74:	b25a      	sxtb	r2, r3
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	73fb      	strb	r3, [r7, #15]
    if (value != 0){
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <datos_value+0x30>
        value = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e001      	b.n	8000c90 <datos_value+0x34>
    }else {
        value = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
    }
    return value;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <maquinaDeEstados>:
    BIT, // Cual bit? (0 - 1) -> (28us - 70us)
    FIN
};


unsigned char maquinaDeEstados(int cnt, unsigned char val, unsigned char * fin) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	72fb      	strb	r3, [r7, #11]
	// Return 6-> BIT_1
	// Return 7-> STOP
	// Return 8-> default

	// Máquina de estados: transición y procesamiento
	switch (estadoActual) {
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <maquinaDeEstados+0xf4>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b05      	cmp	r3, #5
 8000cb4:	d866      	bhi.n	8000d84 <maquinaDeEstados+0xe4>
 8000cb6:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <maquinaDeEstados+0x1c>)
 8000cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbc:	08000cd5 	.word	0x08000cd5
 8000cc0:	08000ce5 	.word	0x08000ce5
 8000cc4:	08000cfb 	.word	0x08000cfb
 8000cc8:	08000d11 	.word	0x08000d11
 8000ccc:	08000d27 	.word	0x08000d27
 8000cd0:	08000d69 	.word	0x08000d69
		case STOP:
			//printf("Entrando en el estado STOP\n");

			// 1 -> 0

			if (val == 1){
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d102      	bne.n	8000ce0 <maquinaDeEstados+0x40>
				estadoActual = INIT_1;
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <maquinaDeEstados+0xf4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
			}

			return 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e052      	b.n	8000d8a <maquinaDeEstados+0xea>

		case INIT_1:
			//printf("Entrando en el estado INIT_1\n");
			// Lógica de transición para pasar al estado siguiente (LECTURA)

			if (val == 0){
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <maquinaDeEstados+0x56>
				if (cnt > MICROS_80US){ // 60 us seguro
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2b3c      	cmp	r3, #60	; 0x3c
 8000cee:	dd02      	ble.n	8000cf6 <maquinaDeEstados+0x56>
					// 80 us pasados
					estadoActual = INIT_2;
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <maquinaDeEstados+0xf4>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	701a      	strb	r2, [r3, #0]
				}
			}

			return 2;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e047      	b.n	8000d8a <maquinaDeEstados+0xea>

		case INIT_2:
			//printf("Entrando en el estado INIT_2\n");
			// Lógica de transición para pasar al estado siguiente (LECTURA)

			if (val == 1){
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <maquinaDeEstados+0x6c>
				if (cnt > MICROS_80US){ // 60 us seguro
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b3c      	cmp	r3, #60	; 0x3c
 8000d04:	dd02      	ble.n	8000d0c <maquinaDeEstados+0x6c>
					// 80 us pasados
					estadoActual = LECTURA;
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <maquinaDeEstados+0xf4>)
 8000d08:	2203      	movs	r2, #3
 8000d0a:	701a      	strb	r2, [r3, #0]
				}
			}
			return 3;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e03c      	b.n	8000d8a <maquinaDeEstados+0xea>

		case LECTURA:
			//printf("Entrando en el estado LECTURA\n");
			// Lógica de transición para pasar al estado siguiente (FIN)

			if (val == 0){
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <maquinaDeEstados+0x82>
				if (cnt > MICROS_50US){ // 60 us seguro
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b1e      	cmp	r3, #30
 8000d1a:	dd02      	ble.n	8000d22 <maquinaDeEstados+0x82>
					// 50 us pasados
					estadoActual = BIT;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <maquinaDeEstados+0xf4>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	701a      	strb	r2, [r3, #0]
				}
			}
			return 4;
 8000d22:	2304      	movs	r3, #4
 8000d24:	e031      	b.n	8000d8a <maquinaDeEstados+0xea>

		case BIT:
			//printf("Entrando en el estado BIT\n");
			// Lógica de transición para pasar al estado siguiente (FIN)

			if (val == 1){
 8000d26:	7afb      	ldrb	r3, [r7, #11]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d12d      	bne.n	8000d88 <maquinaDeEstados+0xe8>
				estadoActual = LECTURA;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <maquinaDeEstados+0xf4>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	701a      	strb	r2, [r3, #0]
				cnt_bit++;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <maquinaDeEstados+0xf8>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <maquinaDeEstados+0xf8>)
 8000d3c:	701a      	strb	r2, [r3, #0]
				if (cnt_bit == 40){
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <maquinaDeEstados+0xf8>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b28      	cmp	r3, #40	; 0x28
 8000d44:	d109      	bne.n	8000d5a <maquinaDeEstados+0xba>
					estadoActual = FIN;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <maquinaDeEstados+0xf4>)
 8000d48:	2205      	movs	r2, #5
 8000d4a:	701a      	strb	r2, [r3, #0]
					if (cnt < MICROS_26US){
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b1d      	cmp	r3, #29
 8000d50:	dc01      	bgt.n	8000d56 <maquinaDeEstados+0xb6>
					// 0 (30 us)
						//printf("cnt_bit = %d , bit = %d\n", cnt_bit, 0);
						//printf("cnt_bit = %d FIN\n", cnt_bit);
						return 5;
 8000d52:	2305      	movs	r3, #5
 8000d54:	e019      	b.n	8000d8a <maquinaDeEstados+0xea>
					}else{
						// 1 (70 us)
						//printf("cnt_bit = %d , bit = %d\n", cnt_bit, 1);
						//printf("cnt_bit = %d FIN\n", cnt_bit);
						return 6;
 8000d56:	2306      	movs	r3, #6
 8000d58:	e017      	b.n	8000d8a <maquinaDeEstados+0xea>
					}
					break;
				}

				if (cnt < MICROS_26US){
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b1d      	cmp	r3, #29
 8000d5e:	dc01      	bgt.n	8000d64 <maquinaDeEstados+0xc4>
					// 0 (30 us)
					//printf("cnt_bit = %d , bit = %d\n", cnt_bit, 0);
					return 5;
 8000d60:	2305      	movs	r3, #5
 8000d62:	e012      	b.n	8000d8a <maquinaDeEstados+0xea>
				}else{
					// 1 (70 us)
					//printf("cnt_bit = %d , bit = %d\n", cnt_bit, 1);
					return 6;
 8000d64:	2306      	movs	r3, #6
 8000d66:	e010      	b.n	8000d8a <maquinaDeEstados+0xea>
			}

			break;

		case FIN:
			printf("Entrando en el estado FIN\n");
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <maquinaDeEstados+0xfc>)
 8000d6a:	f008 f865 	bl	8008e38 <puts>
			// Lógica de transición para volver al estado inicial (INIT)
			// Restaurar estado inicial (siguiente iteración)
			estadoActual = STOP;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <maquinaDeEstados+0xf4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
			cnt_bit = 0;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <maquinaDeEstados+0xf8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]

			*fin = 1;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
			return 7;
 8000d80:	2307      	movs	r3, #7
 8000d82:	e002      	b.n	8000d8a <maquinaDeEstados+0xea>
		// Otros casos y lógica de manejo de errores si es necesario

		default:
			// Manejo de un estado no esperado
			//printf("Error: Estado no reconocido.\n");
			return 8;
 8000d84:	2308      	movs	r3, #8
 8000d86:	e000      	b.n	8000d8a <maquinaDeEstados+0xea>
			break;
 8000d88:	bf00      	nop
			break;
	}
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000088 	.word	0x20000088
 8000d98:	20000089 	.word	0x20000089
 8000d9c:	0800a5c0 	.word	0x0800a5c0

08000da0 <lectura_Buff>:

void lectura_Buff(unsigned char* datos, unsigned char* data){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	unsigned char count = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	77fb      	strb	r3, [r7, #31]
	int i = 0; // valor de array
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
	int j = 0; // desplazamiento de array
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
	unsigned char val = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
	unsigned char val_ant = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	77bb      	strb	r3, [r7, #30]

	unsigned char num_pin = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	777b      	strb	r3, [r7, #29]
	unsigned char n = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	75bb      	strb	r3, [r7, #22]
	unsigned char fin = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	72fb      	strb	r3, [r7, #11]
	for (int num = 0; num < 8*499; num ++){
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	e060      	b.n	8000e92 <lectura_Buff+0xf2>

		if (fin == 1){
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d063      	beq.n	8000e9e <lectura_Buff+0xfe>
			// Terminar
			break;
		}

		bit_value (num, &i, &j);
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	69b8      	ldr	r0, [r7, #24]
 8000de2:	f7ff ff1d 	bl	8000c20 <bit_value>
		val = datos_value (datos[i], j);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff31 	bl	8000c5c <datos_value>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	75fb      	strb	r3, [r7, #23]
		//printf("num(%d) -> %d\n", num, val);

		if (val == val_ant){
 8000dfe:	7dfa      	ldrb	r2, [r7, #23]
 8000e00:	7fbb      	ldrb	r3, [r7, #30]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d103      	bne.n	8000e0e <lectura_Buff+0x6e>
			count++;
 8000e06:	7ffb      	ldrb	r3, [r7, #31]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	77fb      	strb	r3, [r7, #31]
 8000e0c:	e03e      	b.n	8000e8c <lectura_Buff+0xec>
		}else {
			// Hay cambio de estado (implementar algoritmo)
			//printf("val = %d, count = %d\n\n", val, count);
			n = maquinaDeEstados(count, val_ant, &fin);
 8000e0e:	7ffb      	ldrb	r3, [r7, #31]
 8000e10:	f107 020b 	add.w	r2, r7, #11
 8000e14:	7fb9      	ldrb	r1, [r7, #30]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff42 	bl	8000ca0 <maquinaDeEstados>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	75bb      	strb	r3, [r7, #22]

			if (n == 5){ // 0
 8000e20:	7dbb      	ldrb	r3, [r7, #22]
 8000e22:	2b05      	cmp	r3, #5
 8000e24:	d10f      	bne.n	8000e46 <lectura_Buff+0xa6>
				data[num_pin / 8] <<= 1;
 8000e26:	7f7b      	ldrb	r3, [r7, #29]
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	b2d9      	uxtb	r1, r3
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	440b      	add	r3, r1
 8000e38:	0052      	lsls	r2, r2, #1
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	701a      	strb	r2, [r3, #0]
				num_pin++;
 8000e3e:	7f7b      	ldrb	r3, [r7, #29]
 8000e40:	3301      	adds	r3, #1
 8000e42:	777b      	strb	r3, [r7, #29]
 8000e44:	e01e      	b.n	8000e84 <lectura_Buff+0xe4>
			}else if (n == 6){ // 1
 8000e46:	7dbb      	ldrb	r3, [r7, #22]
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d11b      	bne.n	8000e84 <lectura_Buff+0xe4>
				data[num_pin / 8] <<= 1;
 8000e4c:	7f7b      	ldrb	r3, [r7, #29]
 8000e4e:	08db      	lsrs	r3, r3, #3
 8000e50:	b2d9      	uxtb	r1, r3
 8000e52:	460a      	mov	r2, r1
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	0052      	lsls	r2, r2, #1
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	701a      	strb	r2, [r3, #0]
				data[num_pin / 8] |= 1;
 8000e64:	7f7b      	ldrb	r3, [r7, #29]
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	b2d9      	uxtb	r1, r3
 8000e6a:	460a      	mov	r2, r1
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	440b      	add	r3, r1
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	701a      	strb	r2, [r3, #0]
				num_pin++;
 8000e7e:	7f7b      	ldrb	r3, [r7, #29]
 8000e80:	3301      	adds	r3, #1
 8000e82:	777b      	strb	r3, [r7, #29]
			}

			val_ant = val;
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	77bb      	strb	r3, [r7, #30]
			count = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	77fb      	strb	r3, [r7, #31]
	for (int num = 0; num < 8*499; num ++){
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f640 7297 	movw	r2, #3991	; 0xf97
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	dd99      	ble.n	8000dd0 <lectura_Buff+0x30>
		}
	}
}
 8000e9c:	e000      	b.n	8000ea0 <lectura_Buff+0x100>
			break;
 8000e9e:	bf00      	nop
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <DHT11_Delay>:
/////// ------------------


void DHT11_Delay(uint32_t uSeg) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

	uSeg = uSeg*6;
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]

		for (uint32_t i = 0; i < uSeg; ++i) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e003      	b.n	8000eca <DHT11_Delay+0x22>
	        __NOP();
 8000ec2:	bf00      	nop
		for (uint32_t i = 0; i < uSeg; ++i) {
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3f7      	bcc.n	8000ec2 <DHT11_Delay+0x1a>
	    }
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DHT11_Init>:


void DHT11_Init(DHT11_TypeDef* dht11) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

  //__HAL_RCC_GPIOx_CLK_ENABLE(); // Reemplaza 'x' con el puerto GPIO que estás utilizando

  GPIO_InitStruct.Pin = dht11->GPIO_Pin;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	889b      	ldrh	r3, [r3, #4]
 8000efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(dht11->GPIO_Port, &GPIO_InitStruct);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f107 020c 	add.w	r2, r7, #12
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fead 	bl	8002c70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(dht11->GPIO_Port, dht11->GPIO_Pin, GPIO_PIN_SET);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	889b      	ldrh	r3, [r3, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	f002 f841 	bl	8002fa8 <HAL_GPIO_WritePin>
}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <DHT11_ReadData>:
//
//	//HAL_UART_Transmit(&huart2, datos, 100, 100U);
//}


HAL_StatusTypeDef DHT11_ReadData(DHT11_TypeDef* dht11, uint8_t* humidity, uint8_t* temperature) {
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f3a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000f3e:	6018      	str	r0, [r3, #0]
 8000f40:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f44:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000f48:	6019      	str	r1, [r3, #0]
 8000f4a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f4e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000f52:	601a      	str	r2, [r3, #0]

	uint8_t datos[499];
	memset(&datos, 0, sizeof(datos));
 8000f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f58:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f008 f898 	bl	8009094 <memset>

	// Configurar modo salida
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f68:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2300      	movs	r3, #0
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	6053      	str	r3, [r2, #4]
 8000f74:	6093      	str	r3, [r2, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
 8000f78:	6113      	str	r3, [r2, #16]
	  GPIO_InitStruct.Pin = dht11->GPIO_Pin;
 8000f7a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f7e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	889b      	ldrh	r3, [r3, #4]
 8000f86:	461a      	mov	r2, r3
 8000f88:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f8c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000f90:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f96:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000fa2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(dht11->GPIO_Port, &GPIO_InitStruct);
 8000faa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000fae:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f107 021c 	add.w	r2, r7, #28
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fe57 	bl	8002c70 <HAL_GPIO_Init>

  // Iniciar la comunicación con el sensor DHT11
  HAL_GPIO_WritePin(dht11->GPIO_Port, dht11->GPIO_Pin, GPIO_PIN_RESET);
 8000fc2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000fc6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000fd2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	889b      	ldrh	r3, [r3, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f001 ffe3 	bl	8002fa8 <HAL_GPIO_WritePin>
  DHT11_Delay(20000);
 8000fe2:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000fe6:	f7ff ff5f 	bl	8000ea8 <DHT11_Delay>
  //osDelay(20); // Mantén bajo durante al menos 18 ms

  // Cambiar a la fase de lectura
  HAL_GPIO_WritePin(dht11->GPIO_Port, dht11->GPIO_Pin, GPIO_PIN_SET);
 8000fea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000fee:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000ffa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	4619      	mov	r1, r3
 8001006:	f001 ffcf 	bl	8002fa8 <HAL_GPIO_WritePin>
  DHT11_Delay(1); // Espera antes de leer la respuesta del sensor
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ff4c 	bl	8000ea8 <DHT11_Delay>

  // Configurar el pin como entrada
  //GPIO_InitStruct.Pin = dht11->GPIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001014:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  //GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(dht11->GPIO_Port, &GPIO_InitStruct);
 800101c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001020:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f107 021c 	add.w	r2, r7, #28
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fe1e 	bl	8002c70 <HAL_GPIO_Init>
//	  }
//  }

//  datos[0] = (datos[0] << 1 | 0x1);

	for (int i = 1; i < 499*8 ; i ++){
 8001034:	2301      	movs	r3, #1
 8001036:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800103a:	e052      	b.n	80010e2 <DHT11_ReadData+0x1b4>

		if (HAL_GPIO_ReadPin(dht11->GPIO_Port, dht11->GPIO_Pin) == GPIO_PIN_SET){
 800103c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001040:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800104c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	889b      	ldrh	r3, [r3, #4]
 8001054:	4619      	mov	r1, r3
 8001056:	4610      	mov	r0, r2
 8001058:	f001 ff8e 	bl	8002f78 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d11e      	bne.n	80010a0 <DHT11_ReadData+0x172>
			//datos [i] = 1;

			datos[i/8] = datos[i/8] << 1 | 0x1;
 8001062:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001066:	2b00      	cmp	r3, #0
 8001068:	da00      	bge.n	800106c <DHT11_ReadData+0x13e>
 800106a:	3307      	adds	r3, #7
 800106c:	10db      	asrs	r3, r3, #3
 800106e:	461a      	mov	r2, r3
 8001070:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001074:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001078:	5c9b      	ldrb	r3, [r3, r2]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	b25b      	sxtb	r3, r3
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	b259      	sxtb	r1, r3
 8001084:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001088:	2b00      	cmp	r3, #0
 800108a:	da00      	bge.n	800108e <DHT11_ReadData+0x160>
 800108c:	3307      	adds	r3, #7
 800108e:	10db      	asrs	r3, r3, #3
 8001090:	461a      	mov	r2, r3
 8001092:	b2c9      	uxtb	r1, r1
 8001094:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001098:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800109c:	5499      	strb	r1, [r3, r2]
 800109e:	e019      	b.n	80010d4 <DHT11_ReadData+0x1a6>
		}else {
			datos[i/8] = datos[i/8] << 1;
 80010a0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	da00      	bge.n	80010aa <DHT11_ReadData+0x17c>
 80010a8:	3307      	adds	r3, #7
 80010aa:	10db      	asrs	r3, r3, #3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010b2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80010b6:	5c9a      	ldrb	r2, [r3, r2]
 80010b8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80010bc:	2b00      	cmp	r3, #0
 80010be:	da00      	bge.n	80010c2 <DHT11_ReadData+0x194>
 80010c0:	3307      	adds	r3, #7
 80010c2:	10db      	asrs	r3, r3, #3
 80010c4:	4619      	mov	r1, r3
 80010c6:	0053      	lsls	r3, r2, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80010d2:	545a      	strb	r2, [r3, r1]
		}
		__NOP();
 80010d4:	bf00      	nop
		__NOP();
 80010d6:	bf00      	nop
	for (int i = 1; i < 499*8 ; i ++){
 80010d8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80010dc:	3301      	adds	r3, #1
 80010de:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80010e2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80010e6:	f640 7297 	movw	r2, #3991	; 0xf97
 80010ea:	4293      	cmp	r3, r2
 80010ec:	dda6      	ble.n	800103c <DHT11_ReadData+0x10e>

	}

	uint8_t data[5] = {0};
 80010ee:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010f2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	711a      	strb	r2, [r3, #4]
	lectura_Buff(datos, data);
 80010fe:	f107 0214 	add.w	r2, r7, #20
 8001102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe49 	bl	8000da0 <lectura_Buff>



	// Verificar la suma de comprobación
	  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
 800110e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001112:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	4619      	mov	r1, r3
 800111a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800111e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800112a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	4413      	add	r3, r2
 8001132:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001136:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 800113a:	7892      	ldrb	r2, [r2, #2]
 800113c:	4413      	add	r3, r2
 800113e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001142:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8001146:	78d2      	ldrb	r2, [r2, #3]
 8001148:	4413      	add	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4299      	cmp	r1, r3
 800114e:	d117      	bne.n	8001180 <DHT11_ReadData+0x252>
	    *humidity = data[0];
 8001150:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001154:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800115e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	701a      	strb	r2, [r3, #0]
	    *temperature = data[2];
 8001166:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800116a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800116e:	789a      	ldrb	r2, [r3, #2]
 8001170:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001174:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	701a      	strb	r2, [r3, #0]
	    return HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	e000      	b.n	8001182 <DHT11_ReadData+0x254>
	  }else {
		 return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
	  }

}
 8001182:	4618      	mov	r0, r3
 8001184:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 ff9a 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f8c0 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 f9ee 	bl	8001578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800119c:	f000 f9c2 	bl	8001524 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80011a0:	f000 f978 	bl	8001494 <MX_TIM10_Init>
  MX_ADC1_Init();
 80011a4:	f000 f922 	bl	80013ec <MX_ADC1_Init>
  MX_TIM11_Init();
 80011a8:	f000 f998 	bl	80014dc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011ac:	f003 fda0 	bl	8004cf0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_waterArea */
  mutex_waterAreaHandle = osMutexNew(&mutex_waterArea_attributes);
 80011b0:	4836      	ldr	r0, [pc, #216]	; (800128c <main+0x100>)
 80011b2:	f003 ffaf 	bl	8005114 <osMutexNew>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a35      	ldr	r2, [pc, #212]	; (8001290 <main+0x104>)
 80011ba:	6013      	str	r3, [r2, #0]

  /* creation of mutex_delayTrasmit */
  mutex_delayTrasmitHandle = osMutexNew(&mutex_delayTrasmit_attributes);
 80011bc:	4835      	ldr	r0, [pc, #212]	; (8001294 <main+0x108>)
 80011be:	f003 ffa9 	bl	8005114 <osMutexNew>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a34      	ldr	r2, [pc, #208]	; (8001298 <main+0x10c>)
 80011c6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Q_control_TX */
  Q_control_TXHandle = osMessageQueueNew (3, sizeof(uint32_t), &Q_control_TX_attributes);
 80011c8:	4a34      	ldr	r2, [pc, #208]	; (800129c <main+0x110>)
 80011ca:	2104      	movs	r1, #4
 80011cc:	2003      	movs	r0, #3
 80011ce:	f004 f8af 	bl	8005330 <osMessageQueueNew>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a32      	ldr	r2, [pc, #200]	; (80012a0 <main+0x114>)
 80011d6:	6013      	str	r3, [r2, #0]

  /* creation of Q_RX_control */
  Q_RX_controlHandle = osMessageQueueNew (3, sizeof(uint32_t), &Q_RX_control_attributes);
 80011d8:	4a32      	ldr	r2, [pc, #200]	; (80012a4 <main+0x118>)
 80011da:	2104      	movs	r1, #4
 80011dc:	2003      	movs	r0, #3
 80011de:	f004 f8a7 	bl	8005330 <osMessageQueueNew>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <main+0x11c>)
 80011e6:	6013      	str	r3, [r2, #0]

  /* creation of Q_dht11_control */
  Q_dht11_controlHandle = osMessageQueueNew (3, sizeof(uint32_t), &Q_dht11_control_attributes);
 80011e8:	4a30      	ldr	r2, [pc, #192]	; (80012ac <main+0x120>)
 80011ea:	2104      	movs	r1, #4
 80011ec:	2003      	movs	r0, #3
 80011ee:	f004 f89f 	bl	8005330 <osMessageQueueNew>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <main+0x124>)
 80011f6:	6013      	str	r3, [r2, #0]

  /* creation of Q_waterLevel_control */
  Q_waterLevel_controlHandle = osMessageQueueNew (3, sizeof(uint32_t), &Q_waterLevel_control_attributes);
 80011f8:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <main+0x128>)
 80011fa:	2104      	movs	r1, #4
 80011fc:	2003      	movs	r0, #3
 80011fe:	f004 f897 	bl	8005330 <osMessageQueueNew>
 8001202:	4603      	mov	r3, r0
 8001204:	4a2c      	ldr	r2, [pc, #176]	; (80012b8 <main+0x12c>)
 8001206:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uart_TX_task */
  uart_TX_taskHandle = osThreadNew(start_uart_TX_task, NULL, &uart_TX_task_attributes);
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <main+0x130>)
 800120a:	2100      	movs	r1, #0
 800120c:	482c      	ldr	r0, [pc, #176]	; (80012c0 <main+0x134>)
 800120e:	f003 fdb9 	bl	8004d84 <osThreadNew>
 8001212:	4603      	mov	r3, r0
 8001214:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <main+0x138>)
 8001216:	6013      	str	r3, [r2, #0]

  /* creation of uart_RX_task */
  uart_RX_taskHandle = osThreadNew(start_uart_RX_task, NULL, &uart_RX_task_attributes);
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <main+0x13c>)
 800121a:	2100      	movs	r1, #0
 800121c:	482b      	ldr	r0, [pc, #172]	; (80012cc <main+0x140>)
 800121e:	f003 fdb1 	bl	8004d84 <osThreadNew>
 8001222:	4603      	mov	r3, r0
 8001224:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <main+0x144>)
 8001226:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(start_control_task, NULL, &control_task_attributes);
 8001228:	4a2a      	ldr	r2, [pc, #168]	; (80012d4 <main+0x148>)
 800122a:	2100      	movs	r1, #0
 800122c:	482a      	ldr	r0, [pc, #168]	; (80012d8 <main+0x14c>)
 800122e:	f003 fda9 	bl	8004d84 <osThreadNew>
 8001232:	4603      	mov	r3, r0
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <main+0x150>)
 8001236:	6013      	str	r3, [r2, #0]

  /* creation of dht11_task */
  dht11_taskHandle = osThreadNew(start_dht11_task, NULL, &dht11_task_attributes);
 8001238:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <main+0x154>)
 800123a:	2100      	movs	r1, #0
 800123c:	4829      	ldr	r0, [pc, #164]	; (80012e4 <main+0x158>)
 800123e:	f003 fda1 	bl	8004d84 <osThreadNew>
 8001242:	4603      	mov	r3, r0
 8001244:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <main+0x15c>)
 8001246:	6013      	str	r3, [r2, #0]

  /* creation of waterLavel_task */
  waterLavel_taskHandle = osThreadNew(start_waterLavel_task, NULL, &waterLavel_task_attributes);
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <main+0x160>)
 800124a:	2100      	movs	r1, #0
 800124c:	4828      	ldr	r0, [pc, #160]	; (80012f0 <main+0x164>)
 800124e:	f003 fd99 	bl	8004d84 <osThreadNew>
 8001252:	4603      	mov	r3, r0
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <main+0x168>)
 8001256:	6013      	str	r3, [r2, #0]

  /* creation of lcd_task */
  lcd_taskHandle = osThreadNew(start_lcd_task, NULL, &lcd_task_attributes);
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <main+0x16c>)
 800125a:	2100      	movs	r1, #0
 800125c:	4827      	ldr	r0, [pc, #156]	; (80012fc <main+0x170>)
 800125e:	f003 fd91 	bl	8004d84 <osThreadNew>
 8001262:	4603      	mov	r3, r0
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <main+0x174>)
 8001266:	6013      	str	r3, [r2, #0]

  /* creation of emptyDrum_task */
  emptyDrum_taskHandle = osThreadNew(start_emptyDrum_task, NULL, &emptyDrum_task_attributes);
 8001268:	4a26      	ldr	r2, [pc, #152]	; (8001304 <main+0x178>)
 800126a:	2100      	movs	r1, #0
 800126c:	4826      	ldr	r0, [pc, #152]	; (8001308 <main+0x17c>)
 800126e:	f003 fd89 	bl	8004d84 <osThreadNew>
 8001272:	4603      	mov	r3, r0
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <main+0x180>)
 8001276:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of myEventFlag */
  myEventFlagHandle = osEventFlagsNew(&myEventFlag_attributes);
 8001278:	4825      	ldr	r0, [pc, #148]	; (8001310 <main+0x184>)
 800127a:	f003 fe30 	bl	8004ede <osEventFlagsNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a24      	ldr	r2, [pc, #144]	; (8001314 <main+0x188>)
 8001282:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001284:	f003 fd58 	bl	8004d38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001288:	e7fe      	b.n	8001288 <main+0xfc>
 800128a:	bf00      	nop
 800128c:	0800a87c 	.word	0x0800a87c
 8001290:	200001d8 	.word	0x200001d8
 8001294:	0800a88c 	.word	0x0800a88c
 8001298:	200001dc 	.word	0x200001dc
 800129c:	0800a81c 	.word	0x0800a81c
 80012a0:	200001c8 	.word	0x200001c8
 80012a4:	0800a834 	.word	0x0800a834
 80012a8:	200001cc 	.word	0x200001cc
 80012ac:	0800a84c 	.word	0x0800a84c
 80012b0:	200001d0 	.word	0x200001d0
 80012b4:	0800a864 	.word	0x0800a864
 80012b8:	200001d4 	.word	0x200001d4
 80012bc:	0800a720 	.word	0x0800a720
 80012c0:	080017b5 	.word	0x080017b5
 80012c4:	200001ac 	.word	0x200001ac
 80012c8:	0800a744 	.word	0x0800a744
 80012cc:	080018b1 	.word	0x080018b1
 80012d0:	200001b0 	.word	0x200001b0
 80012d4:	0800a768 	.word	0x0800a768
 80012d8:	08001969 	.word	0x08001969
 80012dc:	200001b4 	.word	0x200001b4
 80012e0:	0800a78c 	.word	0x0800a78c
 80012e4:	08001aa9 	.word	0x08001aa9
 80012e8:	200001b8 	.word	0x200001b8
 80012ec:	0800a7b0 	.word	0x0800a7b0
 80012f0:	08001b59 	.word	0x08001b59
 80012f4:	200001bc 	.word	0x200001bc
 80012f8:	0800a7d4 	.word	0x0800a7d4
 80012fc:	08001bd1 	.word	0x08001bd1
 8001300:	200001c0 	.word	0x200001c0
 8001304:	0800a7f8 	.word	0x0800a7f8
 8001308:	08001be1 	.word	0x08001be1
 800130c:	200001c4 	.word	0x200001c4
 8001310:	0800a89c 	.word	0x0800a89c
 8001314:	200001e0 	.word	0x200001e0

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	; 0x50
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2230      	movs	r2, #48	; 0x30
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 feb4 	bl	8009094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <SystemClock_Config+0xcc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <SystemClock_Config+0xcc>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	; 0x40
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <SystemClock_Config+0xcc>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <SystemClock_Config+0xd0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <SystemClock_Config+0xd0>)
 8001362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <SystemClock_Config+0xd0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001374:	2302      	movs	r3, #2
 8001376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800137c:	2310      	movs	r3, #16
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001380:	2302      	movs	r3, #2
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001384:	2300      	movs	r3, #0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001388:	2310      	movs	r3, #16
 800138a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800138c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001392:	2304      	movs	r3, #4
 8001394:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001396:	2304      	movs	r3, #4
 8001398:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fe4e 	bl	8003040 <HAL_RCC_OscConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013aa:	f000 fc79 	bl	8001ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ae:	230f      	movs	r3, #15
 80013b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	2302      	movs	r3, #2
 80013b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f8b0 	bl	8003530 <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013d6:	f000 fc63 	bl	8001ca0 <Error_Handler>
  }
}
 80013da:	bf00      	nop
 80013dc:	3750      	adds	r7, #80	; 0x50
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40007000 	.word	0x40007000

080013ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <MX_ADC1_Init+0xa0>)
 8001402:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800140a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_ADC1_Init+0x9c>)
 800140e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001412:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_ADC1_Init+0x9c>)
 800141c:	2200      	movs	r2, #0
 800141e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_ADC1_Init+0x9c>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001430:	4a17      	ldr	r2, [pc, #92]	; (8001490 <MX_ADC1_Init+0xa4>)
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_ADC1_Init+0x9c>)
 800143c:	2201      	movs	r2, #1
 800143e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_ADC1_Init+0x9c>)
 800144a:	2201      	movs	r2, #1
 800144c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001450:	f000 feac 	bl	80021ac <HAL_ADC_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800145a:	f000 fc21 	bl	8001ca0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001470:	f001 f82c 	bl	80024cc <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800147a:	f000 fc11 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000008c 	.word	0x2000008c
 800148c:	40012000 	.word	0x40012000
 8001490:	0f000001 	.word	0x0f000001

08001494 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_TIM10_Init+0x40>)
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <MX_TIM10_Init+0x44>)
 800149c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014a0:	f24a 4210 	movw	r2, #42000	; 0xa410
 80014a4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_TIM10_Init+0x40>)
 80014c2:	f002 fa55 	bl	8003970 <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80014cc:	f000 fbe8 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200000d4 	.word	0x200000d4
 80014d8:	40014400 	.word	0x40014400

080014dc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_TIM11_Init+0x40>)
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <MX_TIM11_Init+0x44>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_TIM11_Init+0x40>)
 80014e8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80014ec:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_TIM11_Init+0x40>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_TIM11_Init+0x40>)
 80014f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_TIM11_Init+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_TIM11_Init+0x40>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_TIM11_Init+0x40>)
 800150a:	f002 fa31 	bl	8003970 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001514:	f000 fbc4 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000011c 	.word	0x2000011c
 8001520:	40014800 	.word	0x40014800

08001524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART2_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800155c:	f002 fb3e 	bl	8003bdc <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 fb9b 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000164 	.word	0x20000164
 8001574:	40004400 	.word	0x40004400

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <MX_GPIO_Init+0xfc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a37      	ldr	r2, [pc, #220]	; (8001674 <MX_GPIO_Init+0xfc>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b35      	ldr	r3, [pc, #212]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a29      	ldr	r2, [pc, #164]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_GPIO_Init+0xfc>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2120      	movs	r1, #32
 8001602:	481d      	ldr	r0, [pc, #116]	; (8001678 <MX_GPIO_Init+0x100>)
 8001604:	f001 fcd0 	bl	8002fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4817      	ldr	r0, [pc, #92]	; (800167c <MX_GPIO_Init+0x104>)
 8001620:	f001 fb26 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001624:	2320      	movs	r3, #32
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <MX_GPIO_Init+0x100>)
 800163c:	f001 fb18 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_GPIO_Init+0x104>)
 8001656:	f001 fb0b 	bl	8002c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	2028      	movs	r0, #40	; 0x28
 8001660:	f001 fa3d 	bl	8002ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001664:	2028      	movs	r0, #40	; 0x28
 8001666:	f001 fa56 	bl	8002b16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020800 	.word	0x40020800

08001680 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart2){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(myEventFlagHandle, 0x100);
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_UART_RxCpltCallback+0x20>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fc63 	bl	8004f5c <osEventFlagsSet>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200001e0 	.word	0x200001e0

080016a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin){
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b4:	d10a      	bne.n	80016cc <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016b6:	2120      	movs	r1, #32
 80016b8:	4806      	ldr	r0, [pc, #24]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x30>)
 80016ba:	f001 fc8e 	bl	8002fda <HAL_GPIO_TogglePin>
		osEventFlagsSet(myEventFlagHandle, 0x10000);
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 fc48 	bl	8004f5c <osEventFlagsSet>
		///0x20 (Se puede usar para debugear)
		//osEventFlagsSet(myEventFlagHandle, 0x20);
	}
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020000 	.word	0x40020000
 80016d8:	200001e0 	.word	0x200001e0

080016dc <leerWaterArea>:

uint8_t leerWaterArea(){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
	uint8_t auxWaterArea =-1;
 80016e2:	23ff      	movs	r3, #255	; 0xff
 80016e4:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(mutex_waterAreaHandle, 0U);
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <leerWaterArea+0x30>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fd97 	bl	8005220 <osMutexAcquire>
	auxWaterArea = WaterArea; // Leer variable global
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <leerWaterArea+0x34>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(mutex_waterAreaHandle);
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <leerWaterArea+0x30>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fdda 	bl	80052b6 <osMutexRelease>
	return auxWaterArea;
 8001702:	79fb      	ldrb	r3, [r7, #7]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200001d8 	.word	0x200001d8
 8001710:	200001e4 	.word	0x200001e4

08001714 <escribirWaterArea>:

void escribirWaterArea(uint8_t auxWaterArea){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(mutex_waterAreaHandle, 0U);
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <escribirWaterArea+0x30>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fd7b 	bl	8005220 <osMutexAcquire>
	WaterArea = auxWaterArea; // Escribir variable global
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <escribirWaterArea+0x34>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	7013      	strb	r3, [r2, #0]
	osMutexRelease(mutex_waterAreaHandle);
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <escribirWaterArea+0x30>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fdbe 	bl	80052b6 <osMutexRelease>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001d8 	.word	0x200001d8
 8001748:	200001e4 	.word	0x200001e4

0800174c <leerDelay>:

uint32_t leerDelay(){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
	uint32_t auxdelayTrasmit;
	osMutexAcquire(mutex_delayTrasmitHandle, 0U);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <leerDelay+0x2c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fd61 	bl	8005220 <osMutexAcquire>
	auxdelayTrasmit = delayTrasmit; // Leer variable global
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <leerDelay+0x30>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	607b      	str	r3, [r7, #4]
	osMutexRelease(mutex_delayTrasmitHandle);
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <leerDelay+0x2c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 fda4 	bl	80052b6 <osMutexRelease>
	return auxdelayTrasmit;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200001dc 	.word	0x200001dc
 800177c:	200001e8 	.word	0x200001e8

08001780 <escribirDelay>:

void escribirDelay(uint32_t auxdelayTrasmit){
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	osMutexAcquire(mutex_delayTrasmitHandle, 0U);
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <escribirDelay+0x2c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f003 fd46 	bl	8005220 <osMutexAcquire>
	delayTrasmit = auxdelayTrasmit; // Escribir variable global
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <escribirDelay+0x30>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
	osMutexRelease(mutex_delayTrasmitHandle);
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <escribirDelay+0x2c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 fd89 	bl	80052b6 <osMutexRelease>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200001dc 	.word	0x200001dc
 80017b0:	200001e8 	.word	0x200001e8

080017b4 <start_uart_TX_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_uart_TX_task */
void start_uart_TX_task(void *argument)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b095      	sub	sp, #84	; 0x54
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	6078      	str	r0, [r7, #4]
	uint8_t priMsg_Q_control_TX;

	uint8_t buffTX [40];
	uint16_t buff_len;

	uint32_t auxDelay = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
	escribirDelay(auxDelay);
 80017c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017c2:	f7ff ffdd 	bl	8001780 <escribirDelay>




	  // Enviar señal a control
	  osEventFlagsSet(myEventFlagHandle, 0x20);
 80017c6:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <start_uart_TX_task+0xec>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2120      	movs	r1, #32
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 fbc5 	bl	8004f5c <osEventFlagsSet>

	  // Reapuesta de todos los datos
	  osEventFlagsWait(myEventFlagHandle, 0x10, osFlagsWaitAll, osWaitForever);
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <start_uart_TX_task+0xec>)
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	2201      	movs	r2, #1
 80017dc:	2110      	movs	r1, #16
 80017de:	f003 fc33 	bl	8005048 <osEventFlagsWait>
	  osEventFlagsClear(myEventFlagHandle, 0x10);
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <start_uart_TX_task+0xec>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2110      	movs	r1, #16
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fbfb 	bl	8004fe4 <osEventFlagsClear>

	  // Leer Queue
	  status_Q_control_TX = osMessageQueueGet(Q_control_TXHandle, &recMsg_Q_control_TX, &priMsg_Q_control_TX, osWaitForever);
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <start_uart_TX_task+0xf0>)
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f107 0233 	add.w	r2, r7, #51	; 0x33
 80017f6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	f003 fe6b 	bl	80054d8 <osMessageQueueGet>
 8001802:	6438      	str	r0, [r7, #64]	; 0x40


	  // Interpretar Queue
	  watArea  = (recMsg_Q_control_TX & 0xFF);
 8001804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001806:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  temp = ((recMsg_Q_control_TX & 0xFF00) >> 8);
 800180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  hum = ((recMsg_Q_control_TX & 0xFF0000) >> 16);
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	0c1b      	lsrs	r3, r3, #16
 8001816:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	  watLev = ((recMsg_Q_control_TX & 0xFF000000) >> 24);
 800181a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181c:	0e1b      	lsrs	r3, r3, #24
 800181e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	  // Recibir delay
	  auxDelay = leerDelay();
 8001822:	f7ff ff93 	bl	800174c <leerDelay>
 8001826:	6478      	str	r0, [r7, #68]	; 0x44

	  // Delay muy pequeño
	  if (auxDelay < 10){
 8001828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800182a:	2b09      	cmp	r3, #9
 800182c:	d81a      	bhi.n	8001864 <start_uart_TX_task+0xb0>

		  // Borrar flag anterior
		  osEventFlagsClear(myEventFlagHandle, 0x1000);
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <start_uart_TX_task+0xec>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fbd4 	bl	8004fe4 <osEventFlagsClear>

		  // Esperar nuevo flag
		  osEventFlagsWait(myEventFlagHandle, 0x1000, osFlagsWaitAll, osWaitForever);
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <start_uart_TX_task+0xec>)
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184a:	f003 fbfd 	bl	8005048 <osEventFlagsWait>
		  osEventFlagsClear(myEventFlagHandle, 0x1000);
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <start_uart_TX_task+0xec>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fbc4 	bl	8004fe4 <osEventFlagsClear>

		  auxDelay = leerDelay();
 800185c:	f7ff ff76 	bl	800174c <leerDelay>
 8001860:	6478      	str	r0, [r7, #68]	; 0x44
 8001862:	e019      	b.n	8001898 <start_uart_TX_task+0xe4>
	  }else {
		  // Mandar mensaje (Definir como mandar datos)
		  buff_len = sprintf((char*)buffTX, "watArea %d, hum %d, temp %d, watLev %d\n\r", watArea, hum, temp, watLev);
 8001864:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001868:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
 800186c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001870:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001874:	f107 0008 	add.w	r0, r7, #8
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4623      	mov	r3, r4
 800187e:	460a      	mov	r2, r1
 8001880:	4909      	ldr	r1, [pc, #36]	; (80018a8 <start_uart_TX_task+0xf4>)
 8001882:	f007 fae1 	bl	8008e48 <siprintf>
 8001886:	4603      	mov	r3, r0
 8001888:	877b      	strh	r3, [r7, #58]	; 0x3a
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffTX, buff_len, 100);
 800188a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800188c:	f107 0108 	add.w	r1, r7, #8
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <start_uart_TX_task+0xf8>)
 8001894:	f002 f9f2 	bl	8003c7c <HAL_UART_Transmit>
	  }


	  // Cumplir delay especificado
	  osDelay(auxDelay);
 8001898:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800189a:	f003 fb05 	bl	8004ea8 <osDelay>
	  osEventFlagsSet(myEventFlagHandle, 0x20);
 800189e:	e792      	b.n	80017c6 <start_uart_TX_task+0x12>
 80018a0:	200001e0 	.word	0x200001e0
 80018a4:	200001c8 	.word	0x200001c8
 80018a8:	0800a6bc 	.word	0x0800a6bc
 80018ac:	20000164 	.word	0x20000164

080018b0 <start_uart_RX_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_uart_RX_task */
void start_uart_RX_task(void *argument)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_uart_RX_task */
  /* Infinite loop */
	unsigned char buffRX[2] = "FFFFFF\0";
 80018b8:	f244 6346 	movw	r3, #17990	; 0x4646
 80018bc:	843b      	strh	r3, [r7, #32]
	uint16_t buff_len = 2;
 80018be:	2302      	movs	r3, #2
 80018c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	memset(buffRX, '\0', buff_len);
 80018c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f007 fbe2 	bl	8009094 <memset>

	uint8_t err;

	uint32_t auxDelay;

	uint8_t estado = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	osStatus_t status_Q_RX_control;
	uint32_t sendMsg_Q_RX_control;

	unsigned char buffTX[20];
	uint16_t buff_lenTX = 6;
 80018d6:	2306      	movs	r3, #6
 80018d8:	847b      	strh	r3, [r7, #34]	; 0x22


	osDelay(1000);
 80018da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018de:	f003 fae3 	bl	8004ea8 <osDelay>
	for(;;)
	  {

		// Esperar que alguien se conecte

		memset(&buffRX, '\0', sizeof(buffRX));
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	2202      	movs	r2, #2
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f007 fbd2 	bl	8009094 <memset>
	    HAL_UART_Receive_IT(&huart2, buffRX, buff_len);
 80018f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	4619      	mov	r1, r3
 80018f8:	4817      	ldr	r0, [pc, #92]	; (8001958 <start_uart_RX_task+0xa8>)
 80018fa:	f002 fa4a 	bl	8003d92 <HAL_UART_Receive_IT>

		osEventFlagsWait(myEventFlagHandle, 0x100, osFlagsWaitAll, osWaitForever);
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <start_uart_RX_task+0xac>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190c:	f003 fb9c 	bl	8005048 <osEventFlagsWait>
		osEventFlagsClear(myEventFlagHandle, 0x100);
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <start_uart_RX_task+0xac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fb63 	bl	8004fe4 <osEventFlagsClear>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Led encendido estado 1
 800191e:	2201      	movs	r2, #1
 8001920:	2120      	movs	r1, #32
 8001922:	480f      	ldr	r0, [pc, #60]	; (8001960 <start_uart_RX_task+0xb0>)
 8001924:	f001 fb40 	bl	8002fa8 <HAL_GPIO_WritePin>
	    // 5 s -> 0x001388
		// 1 s -> 0x0003E8

		//sscanf(buffRX, "%2x",(unsigned int*) &auxDelay);

		sscanf((char*)buffRX, "%02X", &auxDelay);
 8001928:	f107 021c 	add.w	r2, r7, #28
 800192c:	f107 0320 	add.w	r3, r7, #32
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <start_uart_RX_task+0xb4>)
 8001932:	4618      	mov	r0, r3
 8001934:	f007 faa8 	bl	8008e88 <siscanf>

		escribirDelay(auxDelay*100);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2264      	movs	r2, #100	; 0x64
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff1d 	bl	8001780 <escribirDelay>

		osEventFlagsSet(myEventFlagHandle, 0x1000);
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <start_uart_RX_task+0xac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fb04 	bl	8004f5c <osEventFlagsSet>
		memset(&buffRX, '\0', sizeof(buffRX));
 8001954:	e7c5      	b.n	80018e2 <start_uart_RX_task+0x32>
 8001956:	bf00      	nop
 8001958:	20000164 	.word	0x20000164
 800195c:	200001e0 	.word	0x200001e0
 8001960:	40020000 	.word	0x40020000
 8001964:	0800a6e8 	.word	0x0800a6e8

08001968 <start_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_control_task */
void start_control_task(void *argument)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b099      	sub	sp, #100	; 0x64
 800196c:	af02      	add	r7, sp, #8
 800196e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_control_task */
  /* Infinite loop */


		uint8_t cod = 0x01;
 8001970:	2301      	movs	r3, #1
 8001972:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
//		  		  		  timer_val = __HAL_TIM_GET_COUNTER(&htim11);



		  // Recivir mensaje (TX)
		  osEventFlagsWait(myEventFlagHandle, 0x20, osFlagsWaitAll, osWaitForever);
 8001976:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <start_control_task+0x12c>)
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	2201      	movs	r2, #1
 8001980:	2120      	movs	r1, #32
 8001982:	f003 fb61 	bl	8005048 <osEventFlagsWait>
		  osEventFlagsClear(myEventFlagHandle, 0x20);
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <start_control_task+0x12c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2120      	movs	r1, #32
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fb29 	bl	8004fe4 <osEventFlagsClear>


//

		  // Activar dht11
		  osEventFlagsSet(myEventFlagHandle, 0x01);
 8001992:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <start_control_task+0x12c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fadf 	bl	8004f5c <osEventFlagsSet>
			osEventFlagsWait(myEventFlagHandle, 0x04, osFlagsWaitAll, osWaitForever);
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <start_control_task+0x12c>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	2201      	movs	r2, #1
 80019a8:	2104      	movs	r1, #4
 80019aa:	f003 fb4d 	bl	8005048 <osEventFlagsWait>
			osEventFlagsClear(myEventFlagHandle, 0x04);
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <start_control_task+0x12c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2104      	movs	r1, #4
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fb15 	bl	8004fe4 <osEventFlagsClear>
		  status_Q_dht11_control = osMessageQueueGet(Q_dht11_controlHandle, &recMsg_Q_dht11_control, &priMsg_Q_dht11_control, osWaitForever);
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <start_control_task+0x130>)
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	f107 023b 	add.w	r2, r7, #59	; 0x3b
 80019c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	f003 fd85 	bl	80054d8 <osMessageQueueGet>
 80019ce:	6538      	str	r0, [r7, #80]	; 0x50
		  if (status_Q_dht11_control == osOK) {
 80019d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d107      	bne.n	80019e6 <start_control_task+0x7e>
			  hum = (recMsg_Q_dht11_control & 0xFF); // 0x0a (Example)
 80019d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			  temp = ((recMsg_Q_dht11_control & 0xFF00) >> 8); //((recMsg_Q_dht11_control>>8) & 0xFF); //0x14
 80019dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80019e4:	e005      	b.n	80019f2 <start_control_task+0x8a>
		  }else {
			  hum = 200;
 80019e6:	23c8      	movs	r3, #200	; 0xc8
 80019e8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			  temp = 200;
 80019ec:	23c8      	movs	r3, #200	; 0xc8
 80019ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		  }

		  // Activar waterLevel
		  osEventFlagsSet(myEventFlagHandle, 0x02);
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <start_control_task+0x12c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2102      	movs	r1, #2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 faaf 	bl	8004f5c <osEventFlagsSet>
		  osEventFlagsWait(myEventFlagHandle, 0x08, osFlagsWaitAll, osWaitForever);
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <start_control_task+0x12c>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	2201      	movs	r2, #1
 8001a08:	2108      	movs	r1, #8
 8001a0a:	f003 fb1d 	bl	8005048 <osEventFlagsWait>
		  osEventFlagsClear(myEventFlagHandle, 0x08);
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <start_control_task+0x12c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2108      	movs	r1, #8
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fae5 	bl	8004fe4 <osEventFlagsClear>
		  status_Q_waterLevel_control = osMessageQueueGet(Q_waterLevel_controlHandle, &recMsg_Q_waterLevel_control, &priMsg_Q_waterLevel_control, osWaitForever);
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <start_control_task+0x134>)
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8001a22:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	f003 fd55 	bl	80054d8 <osMessageQueueGet>
 8001a2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		  if (status_Q_waterLevel_control == osOK) {
 8001a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <start_control_task+0xd6>
			  watLev = (recMsg_Q_waterLevel_control & 0xFF); // valor Nivel Agua		  			  temp = ((recMsg_Q_dht11_control & 0xFF00) >> 8); //((recMsg_Q_dht11_control>>8) & 0xFF); //0x14
 8001a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a38:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001a3c:	e002      	b.n	8001a44 <start_control_task+0xdc>
		  }else {
		  	 watLev = 22;
 8001a3e:	2316      	movs	r3, #22
 8001a40:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		  }


		  watArea = leerWaterArea(); // ml/s
 8001a44:	f7ff fe4a 	bl	80016dc <leerWaterArea>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
//  temp = 11;
//  hum = 22;
//  watLev = 33;
//  watArea = 44;

		  sprintf(& sendMsg_Q_control_TX,"%c%c%c%c", watArea, hum, temp, watLev); // 0x001e140a (watlevel/temp/hum/watArea)
 8001a4e:	f897 104b 	ldrb.w	r1, [r7, #75]	; 0x4b
 8001a52:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8001a56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a5a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001a5e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4623      	mov	r3, r4
 8001a68:	460a      	mov	r2, r1
 8001a6a:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <start_control_task+0x138>)
 8001a6c:	f007 f9ec 	bl	8008e48 <siprintf>
		  status_Q_control_TX = osMessageQueuePut(Q_control_TXHandle, &sendMsg_Q_control_TX, 0, osWaitForever);
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <start_control_task+0x13c>)
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f003 fccb 	bl	8005418 <osMessageQueuePut>
 8001a82:	6478      	str	r0, [r7, #68]	; 0x44
		  osEventFlagsSet(myEventFlagHandle, 0x10);
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <start_control_task+0x12c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2110      	movs	r1, #16
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fa66 	bl	8004f5c <osEventFlagsSet>
		  osEventFlagsWait(myEventFlagHandle, 0x20, osFlagsWaitAll, osWaitForever);
 8001a90:	e771      	b.n	8001976 <start_control_task+0xe>
 8001a92:	bf00      	nop
 8001a94:	200001e0 	.word	0x200001e0
 8001a98:	200001d0 	.word	0x200001d0
 8001a9c:	200001d4 	.word	0x200001d4
 8001aa0:	0800a6f0 	.word	0x0800a6f0
 8001aa4:	200001c8 	.word	0x200001c8

08001aa8 <start_dht11_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_dht11_task */
void start_dht11_task(void *argument)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


	// Crear variable y cargar valores inicialies de puerto
	DHT11_TypeDef dht11;
	dht11.GPIO_Port = DHT11_GPIO_Port;  // Reemplaza 'x' con el puerto GPIO que estás utilizando
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <start_dht11_task+0xa0>)
 8001ab2:	613b      	str	r3, [r7, #16]
	dht11.GPIO_Pin = DHT11_Pin;  // Reemplaza 'x' con el número del pin GPIO que estás utilizando
 8001ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab8:	82bb      	strh	r3, [r7, #20]
	DHT11_Init(&dht11);
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fa0e 	bl	8000ee0 <DHT11_Init>


  for(;;)
  {

	  osEventFlagsWait(myEventFlagHandle, 0x01, osFlagsWaitAll, osWaitForever);
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <start_dht11_task+0xa4>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8001acc:	2201      	movs	r2, #1
 8001ace:	2101      	movs	r1, #1
 8001ad0:	f003 faba 	bl	8005048 <osEventFlagsWait>
	  osEventFlagsClear(myEventFlagHandle, 0x01);
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <start_dht11_task+0xa4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fa82 	bl	8004fe4 <osEventFlagsClear>

	  humidity = 255;
 8001ae0:	23ff      	movs	r3, #255	; 0xff
 8001ae2:	72fb      	strb	r3, [r7, #11]
	  temperature = 255;
 8001ae4:	23ff      	movs	r3, #255	; 0xff
 8001ae6:	72bb      	strb	r3, [r7, #10]


	  if (DHT11_ReadData(&dht11, &humidity, &temperature) == HAL_OK) {
 8001ae8:	f107 020a 	add.w	r2, r7, #10
 8001aec:	f107 010b 	add.w	r1, r7, #11
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fa1a 	bl	8000f2e <DHT11_ReadData>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d103      	bne.n	8001b08 <start_dht11_task+0x60>
		  // Well execute
		  auxHumidity = humidity;
 8001b00:	7afb      	ldrb	r3, [r7, #11]
 8001b02:	77fb      	strb	r3, [r7, #31]
		  auxTemperature = temperature;
 8001b04:	7abb      	ldrb	r3, [r7, #10]
 8001b06:	77bb      	strb	r3, [r7, #30]
//		  humidity = auxHumidity; // 0x46
//		  temperature = auxTemperature; // 0x12
	  }


	  sprintf(&sendMsg_Q_dht11_control, "%c%c%c%c", humidity, temperature, 0, 0); // 0x00001246 (0/0/temp/hum)
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	7abb      	ldrb	r3, [r7, #10]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f107 000c 	add.w	r0, r7, #12
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	490c      	ldr	r1, [pc, #48]	; (8001b50 <start_dht11_task+0xa8>)
 8001b20:	f007 f992 	bl	8008e48 <siprintf>
	  status_Q_dht11_control = osMessageQueuePut(Q_dht11_controlHandle, &sendMsg_Q_dht11_control, 0, osWaitForever);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <start_dht11_task+0xac>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f107 010c 	add.w	r1, r7, #12
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	2200      	movs	r2, #0
 8001b32:	f003 fc71 	bl	8005418 <osMessageQueuePut>
 8001b36:	61b8      	str	r0, [r7, #24]

	  osEventFlagsSet(myEventFlagHandle, 0x04);
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <start_dht11_task+0xa4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fa0c 	bl	8004f5c <osEventFlagsSet>
	  osEventFlagsWait(myEventFlagHandle, 0x01, osFlagsWaitAll, osWaitForever);
 8001b44:	e7be      	b.n	8001ac4 <start_dht11_task+0x1c>
 8001b46:	bf00      	nop
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	200001e0 	.word	0x200001e0
 8001b50:	0800a6f0 	.word	0x0800a6f0
 8001b54:	200001d0 	.word	0x200001d0

08001b58 <start_waterLavel_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_waterLavel_task */
void start_waterLavel_task(void *argument)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	6078      	str	r0, [r7, #4]
	uint8_t waterLevel;

	 for(;;)
	  {

		  osEventFlagsWait(myEventFlagHandle, 0x02, osFlagsWaitAll, osWaitForever);
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <start_waterLavel_task+0x6c>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	f003 fa6c 	bl	8005048 <osEventFlagsWait>
		  osEventFlagsClear(myEventFlagHandle, 0x02);
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <start_waterLavel_task+0x6c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2102      	movs	r1, #2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fa34 	bl	8004fe4 <osEventFlagsClear>

		  // Posible hacer mas medidas de una y hacer media
		  potWaterLevel = readAnalogA0 ();
 8001b7c:	f7ff f80c 	bl	8000b98 <readAnalogA0>
 8001b80:	6178      	str	r0, [r7, #20]
		  waterLevel = getWaterLevel (potWaterLevel);
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff f820 	bl	8000bc8 <getWaterLevel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	74fb      	strb	r3, [r7, #19]
		  // Debug
		  //waterLevel = 60;

		  sprintf(&sendMsg_Q_waterLevel_control, "%c%c%c%c", waterLevel, 0, 0, 0); //(0/0/0/watLev)
 8001b8c:	7cfa      	ldrb	r2, [r7, #19]
 8001b8e:	f107 0008 	add.w	r0, r7, #8
 8001b92:	2300      	movs	r3, #0
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	2300      	movs	r3, #0
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <start_waterLavel_task+0x70>)
 8001b9e:	f007 f953 	bl	8008e48 <siprintf>
		  status_Q_waterLevel_control = osMessageQueuePut(Q_waterLevel_controlHandle, &sendMsg_Q_waterLevel_control, 0, osWaitForever);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <start_waterLavel_task+0x74>)
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	f107 0108 	add.w	r1, r7, #8
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f003 fc32 	bl	8005418 <osMessageQueuePut>
 8001bb4:	60f8      	str	r0, [r7, #12]

		  osEventFlagsSet(myEventFlagHandle, 0x08);
 8001bb6:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <start_waterLavel_task+0x6c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2108      	movs	r1, #8
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f9cd 	bl	8004f5c <osEventFlagsSet>
		  osEventFlagsWait(myEventFlagHandle, 0x02, osFlagsWaitAll, osWaitForever);
 8001bc2:	e7cd      	b.n	8001b60 <start_waterLavel_task+0x8>
 8001bc4:	200001e0 	.word	0x200001e0
 8001bc8:	0800a6f0 	.word	0x0800a6f0
 8001bcc:	200001d4 	.word	0x200001d4

08001bd0 <start_lcd_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_lcd_task */
void start_lcd_task(void *argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_lcd_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001bd8:	2064      	movs	r0, #100	; 0x64
 8001bda:	f003 f965 	bl	8004ea8 <osDelay>
 8001bde:	e7fb      	b.n	8001bd8 <start_lcd_task+0x8>

08001be0 <start_emptyDrum_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_emptyDrum_task */
void start_emptyDrum_task(void *argument)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

	//	unsigned char buffTX[20];
	//	uint16_t buff_lenTX = 6;

		// Set Water Area
		escribirWaterArea(0);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff fd93 	bl	8001714 <escribirWaterArea>
	  for(;;)
	  {

		  // Empezar a contar
		  __HAL_TIM_SET_COUNTER(&htim10, 0);
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <start_emptyDrum_task+0xb8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Init(&htim10);
 8001bf6:	4828      	ldr	r0, [pc, #160]	; (8001c98 <start_emptyDrum_task+0xb8>)
 8001bf8:	f001 feba 	bl	8003970 <HAL_TIM_Base_Init>
		  HAL_TIM_Base_Start(&htim10);
 8001bfc:	4826      	ldr	r0, [pc, #152]	; (8001c98 <start_emptyDrum_task+0xb8>)
 8001bfe:	f001 ff07 	bl	8003a10 <HAL_TIM_Base_Start>
		  timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 8001c02:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <start_emptyDrum_task+0xb8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	81bb      	strh	r3, [r7, #12]

		  // Wait flag
		  osEventFlagsClear(myEventFlagHandle, 0x10000);
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <start_emptyDrum_task+0xbc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 f9e6 	bl	8004fe4 <osEventFlagsClear>
		  osEventFlagsWait(myEventFlagHandle, 0x10000, osFlagsWaitAll, osWaitForever);
 8001c18:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <start_emptyDrum_task+0xbc>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001c26:	f003 fa0f 	bl	8005048 <osEventFlagsWait>
		  osEventFlagsClear(myEventFlagHandle, 0x10000);
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <start_emptyDrum_task+0xbc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 f9d6 	bl	8004fe4 <osEventFlagsClear>

		  // Get time elapsed
		  timer_val = __HAL_TIM_GET_COUNTER(&htim10) - timer_val;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <start_emptyDrum_task+0xb8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	89bb      	ldrh	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	81bb      	strh	r3, [r7, #12]
		  // Sacar valor real en segundos (prescaler 42.000 y 84 MHz)
		  timer_val = (uint32_t)  timer_val*0.0005;
 8001c46:	89bb      	ldrh	r3, [r7, #12]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fd8d 	bl	8000768 <__aeabi_ui2d>
 8001c4e:	a310      	add	r3, pc, #64	; (adr r3, 8001c90 <start_emptyDrum_task+0xb0>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	f7fe fb1c 	bl	8000290 <__aeabi_dmul>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7fe fdfc 	bl	800085c <__aeabi_d2uiz>
 8001c64:	4603      	mov	r3, r0
 8001c66:	81bb      	strh	r3, [r7, #12]


		  if (timer_val < 2 ){
 8001c68:	89bb      	ldrh	r3, [r7, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d802      	bhi.n	8001c74 <start_emptyDrum_task+0x94>
			  auxWaterArea = 99;
 8001c6e:	2363      	movs	r3, #99	; 0x63
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e004      	b.n	8001c7e <start_emptyDrum_task+0x9e>
		  }else {
			  auxWaterArea = 100 / timer_val;
 8001c74:	89bb      	ldrh	r3, [r7, #12]
 8001c76:	2264      	movs	r2, #100	; 0x64
 8001c78:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c7c:	73fb      	strb	r3, [r7, #15]
		  }

		  // Guardar valor recivido
		  escribirWaterArea(auxWaterArea);
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fd47 	bl	8001714 <escribirWaterArea>

		  // Encender led

		  osDelay(1000);
 8001c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8a:	f003 f90d 	bl	8004ea8 <osDelay>
		  __HAL_TIM_SET_COUNTER(&htim10, 0);
 8001c8e:	e7ae      	b.n	8001bee <start_emptyDrum_task+0xe>
 8001c90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c94:	3f40624d 	.word	0x3f40624d
 8001c98:	200000d4 	.word	0x200000d4
 8001c9c:	200001e0 	.word	0x200001e0

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <Error_Handler+0x8>
	...

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_MspInit+0x54>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_MspInit+0x54>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_MspInit+0x54>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_MspInit+0x54>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_MspInit+0x54>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_MspInit+0x54>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	210f      	movs	r1, #15
 8001cee:	f06f 0001 	mvn.w	r0, #1
 8001cf2:	f000 fef4 	bl	8002ade <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_ADC_MspInit+0x7c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d127      	bne.n	8001d76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_ADC_MspInit+0x80>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_ADC_MspInit+0x80>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_ADC_MspInit+0x80>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_ADC_MspInit+0x80>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_ADC_MspInit+0x80>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_ADC_MspInit+0x80>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d62:	2303      	movs	r3, #3
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_ADC_MspInit+0x84>)
 8001d72:	f000 ff7d 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40012000 	.word	0x40012000
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <HAL_TIM_Base_MspInit+0x64>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10e      	bne.n	8001dbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_TIM_Base_MspInit+0x68>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_TIM_Base_MspInit+0x68>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_TIM_Base_MspInit+0x68>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001dba:	e012      	b.n	8001de2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <HAL_TIM_Base_MspInit+0x6c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10d      	bne.n	8001de2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_TIM_Base_MspInit+0x68>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_TIM_Base_MspInit+0x68>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_TIM_Base_MspInit+0x68>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40014400 	.word	0x40014400
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40014800 	.word	0x40014800

08001dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <HAL_UART_MspInit+0x94>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d133      	bne.n	8001e86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_UART_MspInit+0x98>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <HAL_UART_MspInit+0x98>)
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_UART_MspInit+0x98>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_UART_MspInit+0x98>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <HAL_UART_MspInit+0x98>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_UART_MspInit+0x98>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e56:	230c      	movs	r3, #12
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e66:	2307      	movs	r3, #7
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4809      	ldr	r0, [pc, #36]	; (8001e98 <HAL_UART_MspInit+0x9c>)
 8001e72:	f000 fefd 	bl	8002c70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	2026      	movs	r0, #38	; 0x26
 8001e7c:	f000 fe2f 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e80:	2026      	movs	r0, #38	; 0x26
 8001e82:	f000 fe48 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004400 	.word	0x40004400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ecc:	f000 f94e 	bl	800216c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ed0:	f005 fd00 	bl	80078d4 <xTaskGetSchedulerState>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001eda:	f006 fc1d 	bl	8008718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <USART2_IRQHandler+0x10>)
 8001eea:	f001 ff77 	bl	8003ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000164 	.word	0x20000164

08001ef8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001efc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f00:	f001 f886 	bl	8003010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e00a      	b.n	8001f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f1a:	f3af 8000 	nop.w
 8001f1e:	4601      	mov	r1, r0
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	60ba      	str	r2, [r7, #8]
 8001f26:	b2ca      	uxtb	r2, r1
 8001f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf0      	blt.n	8001f1a <_read+0x12>
  }

  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e009      	b.n	8001f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	60ba      	str	r2, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbf1      	blt.n	8001f54 <_write+0x12>
  }
  return len;
 8001f70:	687b      	ldr	r3, [r7, #4]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_close>:

int _close(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_isatty>:

int _isatty(int file)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f007 f88c 	bl	8009130 <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20020000 	.word	0x20020000
 8002044:	00000400 	.word	0x00000400
 8002048:	200001ec 	.word	0x200001ec
 800204c:	20004c90 	.word	0x20004c90

08002050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <SystemInit+0x20>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <SystemInit+0x20>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002078:	f7ff ffea 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800207e:	490d      	ldr	r1, [pc, #52]	; (80020b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002094:	4c0a      	ldr	r4, [pc, #40]	; (80020c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020a2:	f007 f84b 	bl	800913c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a6:	f7ff f871 	bl	800118c <main>
  bx  lr    
 80020aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80020b8:	0800aa24 	.word	0x0800aa24
  ldr r2, =_sbss
 80020bc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80020c0:	20004c90 	.word	0x20004c90

080020c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_Init+0x40>)
 80020d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_Init+0x40>)
 80020de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_Init+0x40>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 fce9 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	200f      	movs	r0, #15
 80020f8:	f000 f808 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fdd6 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fd01 	bl	8002b32 <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f000 fcc9 	bl	8002ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000000 	.word	0x20000000
 8002164:	20000008 	.word	0x20000008
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x20>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x24>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_IncTick+0x24>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008
 8002190:	200001f0 	.word	0x200001f0

08002194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_GetTick+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200001f0 	.word	0x200001f0

080021ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e033      	b.n	800222a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fd9a 	bl	8001d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	f043 0202 	orr.w	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa96 	bl	8002730 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
 800221a:	e001      	b.n	8002220 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_ADC_Start+0x1a>
 800224a:	2302      	movs	r3, #2
 800224c:	e097      	b.n	800237e <HAL_ADC_Start+0x14a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d018      	beq.n	8002296 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002274:	4b45      	ldr	r3, [pc, #276]	; (800238c <HAL_ADC_Start+0x158>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a45      	ldr	r2, [pc, #276]	; (8002390 <HAL_ADC_Start+0x15c>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9a      	lsrs	r2, r3, #18
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002288:	e002      	b.n	8002290 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3b01      	subs	r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f9      	bne.n	800228a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d15f      	bne.n	8002364 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e2:	d106      	bne.n	80022f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	f023 0206 	bic.w	r2, r3, #6
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
 80022f0:	e002      	b.n	80022f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_ADC_Start+0x160>)
 8002302:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800230c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d129      	bne.n	800237c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e020      	b.n	800237c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a16      	ldr	r2, [pc, #88]	; (8002398 <HAL_ADC_Start+0x164>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d11b      	bne.n	800237c <HAL_ADC_Start+0x148>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d114      	bne.n	800237c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	e00b      	b.n	800237c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f043 0210 	orr.w	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000000 	.word	0x20000000
 8002390:	431bde83 	.word	0x431bde83
 8002394:	40012300 	.word	0x40012300
 8002398:	40012000 	.word	0x40012000

0800239c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b8:	d113      	bne.n	80023e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c8:	d10b      	bne.n	80023e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e063      	b.n	80024aa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e2:	f7ff fed7 	bl	8002194 <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023e8:	e021      	b.n	800242e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d01d      	beq.n	800242e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_ADC_PollForConversion+0x6c>
 80023f8:	f7ff fecc 	bl	8002194 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d212      	bcs.n	800242e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d00b      	beq.n	800242e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e03d      	b.n	80024aa <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b02      	cmp	r3, #2
 800243a:	d1d6      	bne.n	80023ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0212 	mvn.w	r2, #18
 8002444:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d123      	bne.n	80024a8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	d11f      	bne.n	80024a8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002480:	2b00      	cmp	r3, #0
 8002482:	d111      	bne.n	80024a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1c>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e113      	b.n	8002710 <HAL_ADC_ConfigChannel+0x244>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d925      	bls.n	8002544 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68d9      	ldr	r1, [r3, #12]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	3b1e      	subs	r3, #30
 800250e:	2207      	movs	r2, #7
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43da      	mvns	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	400a      	ands	r2, r1
 800251c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68d9      	ldr	r1, [r3, #12]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4618      	mov	r0, r3
 8002530:	4603      	mov	r3, r0
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4403      	add	r3, r0
 8002536:	3b1e      	subs	r3, #30
 8002538:	409a      	lsls	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	e022      	b.n	800258a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6919      	ldr	r1, [r3, #16]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	2207      	movs	r2, #7
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6919      	ldr	r1, [r3, #16]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	4603      	mov	r3, r0
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4403      	add	r3, r0
 8002580:	409a      	lsls	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b06      	cmp	r3, #6
 8002590:	d824      	bhi.n	80025dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	3b05      	subs	r3, #5
 80025a4:	221f      	movs	r2, #31
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	400a      	ands	r2, r1
 80025b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	3b05      	subs	r3, #5
 80025ce:	fa00 f203 	lsl.w	r2, r0, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34
 80025da:	e04c      	b.n	8002676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	d824      	bhi.n	800262e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b23      	subs	r3, #35	; 0x23
 80025f6:	221f      	movs	r2, #31
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43da      	mvns	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	400a      	ands	r2, r1
 8002604:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	4618      	mov	r0, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	3b23      	subs	r3, #35	; 0x23
 8002620:	fa00 f203 	lsl.w	r2, r0, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
 800262c:	e023      	b.n	8002676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	3b41      	subs	r3, #65	; 0x41
 8002640:	221f      	movs	r2, #31
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	400a      	ands	r2, r1
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	4618      	mov	r0, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	3b41      	subs	r3, #65	; 0x41
 800266a:	fa00 f203 	lsl.w	r2, r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_ADC_ConfigChannel+0x250>)
 8002678:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a28      	ldr	r2, [pc, #160]	; (8002720 <HAL_ADC_ConfigChannel+0x254>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d10f      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b12      	cmp	r3, #18
 800268a:	d10b      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <HAL_ADC_ConfigChannel+0x254>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d12b      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x23a>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_ADC_ConfigChannel+0x258>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d003      	beq.n	80026c0 <HAL_ADC_ConfigChannel+0x1f4>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b11      	cmp	r3, #17
 80026be:	d122      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <HAL_ADC_ConfigChannel+0x258>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d111      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_ADC_ConfigChannel+0x25c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_ADC_ConfigChannel+0x260>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	0c9a      	lsrs	r2, r3, #18
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026f8:	e002      	b.n	8002700 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f9      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012300 	.word	0x40012300
 8002720:	40012000 	.word	0x40012000
 8002724:	10000012 	.word	0x10000012
 8002728:	20000000 	.word	0x20000000
 800272c:	431bde83 	.word	0x431bde83

08002730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002738:	4b79      	ldr	r3, [pc, #484]	; (8002920 <ADC_Init+0x1f0>)
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	021a      	lsls	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	4a58      	ldr	r2, [pc, #352]	; (8002924 <ADC_Init+0x1f4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	e00f      	b.n	800282e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800281c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800282c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0202 	bic.w	r2, r2, #2
 800283c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e1b      	ldrb	r3, [r3, #24]
 8002848:	005a      	lsls	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800287a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	3b01      	subs	r3, #1
 8002888:	035a      	lsls	r2, r3, #13
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e007      	b.n	80028a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	3b01      	subs	r3, #1
 80028c0:	051a      	lsls	r2, r3, #20
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e6:	025a      	lsls	r2, r3, #9
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	029a      	lsls	r2, r3, #10
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012300 	.word	0x40012300
 8002924:	0f000001 	.word	0x0f000001

08002928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295a:	4a04      	ldr	r2, [pc, #16]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	60d3      	str	r3, [r2, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <__NVIC_GetPriorityGrouping+0x18>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 0307 	and.w	r3, r3, #7
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db0b      	blt.n	80029b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <__NVIC_EnableIRQ+0x38>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2001      	movs	r0, #1
 80029ae:	fa00 f202 	lsl.w	r2, r0, r2
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db0a      	blt.n	80029f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	490c      	ldr	r1, [pc, #48]	; (8002a14 <__NVIC_SetPriority+0x4c>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	440b      	add	r3, r1
 80029ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f0:	e00a      	b.n	8002a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <__NVIC_SetPriority+0x50>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3b04      	subs	r3, #4
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	440b      	add	r3, r1
 8002a06:	761a      	strb	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf28      	it	cs
 8002a3a:	2304      	movcs	r3, #4
 8002a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d902      	bls.n	8002a4c <NVIC_EncodePriority+0x30>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	e000      	b.n	8002a4e <NVIC_EncodePriority+0x32>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	401a      	ands	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	4313      	orrs	r3, r2
         );
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a94:	d301      	bcc.n	8002a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00f      	b.n	8002aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <SysTick_Config+0x40>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	f7ff ff8e 	bl	80029c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <SysTick_Config+0x40>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SysTick_Config+0x40>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000e010 	.word	0xe000e010

08002ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff29 	bl	8002928 <__NVIC_SetPriorityGrouping>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff3e 	bl	8002970 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff8e 	bl	8002a1c <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5d 	bl	80029c8 <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff31 	bl	800298c <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffa2 	bl	8002a84 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff fb1c 	bl	8002194 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d008      	beq.n	8002b7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e052      	b.n	8002c22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0216 	bic.w	r2, r2, #22
 8002b8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d103      	bne.n	8002bac <HAL_DMA_Abort+0x62>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0208 	bic.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bcc:	e013      	b.n	8002bf6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bce:	f7ff fae1 	bl	8002194 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d90c      	bls.n	8002bf6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e015      	b.n	8002c22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e4      	bne.n	8002bce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	223f      	movs	r2, #63	; 0x3f
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d004      	beq.n	8002c48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e00c      	b.n	8002c62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e159      	b.n	8002f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8148 	bne.w	8002f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d005      	beq.n	8002cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d130      	bne.n	8002d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	2203      	movs	r2, #3
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 0201 	and.w	r2, r3, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d017      	beq.n	8002d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d123      	bne.n	8002db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	220f      	movs	r2, #15
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0203 	and.w	r2, r3, #3
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a2 	beq.w	8002f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b54      	ldr	r3, [pc, #336]	; (8002f58 <HAL_GPIO_Init+0x2e8>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_GPIO_Init+0x2ec>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a49      	ldr	r2, [pc, #292]	; (8002f60 <HAL_GPIO_Init+0x2f0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d019      	beq.n	8002e72 <HAL_GPIO_Init+0x202>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <HAL_GPIO_Init+0x2f4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_GPIO_Init+0x1fe>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a47      	ldr	r2, [pc, #284]	; (8002f68 <HAL_GPIO_Init+0x2f8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00d      	beq.n	8002e6a <HAL_GPIO_Init+0x1fa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a46      	ldr	r2, [pc, #280]	; (8002f6c <HAL_GPIO_Init+0x2fc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <HAL_GPIO_Init+0x1f6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a45      	ldr	r2, [pc, #276]	; (8002f70 <HAL_GPIO_Init+0x300>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_GPIO_Init+0x1f2>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	e008      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e62:	2307      	movs	r3, #7
 8002e64:	e006      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e66:	2303      	movs	r3, #3
 8002e68:	e004      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e002      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_GPIO_Init+0x204>
 8002e72:	2300      	movs	r3, #0
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	f002 0203 	and.w	r2, r2, #3
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	4093      	lsls	r3, r2
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e84:	4935      	ldr	r1, [pc, #212]	; (8002f5c <HAL_GPIO_Init+0x2ec>)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb6:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f34:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_GPIO_Init+0x304>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	f67f aea2 	bls.w	8002c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40013800 	.word	0x40013800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40020800 	.word	0x40020800
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40013c00 	.word	0x40013c00

08002f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	887b      	ldrh	r3, [r7, #2]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e001      	b.n	8002f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb8:	787b      	ldrb	r3, [r7, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc4:	e003      	b.n	8002fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	041a      	lsls	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	619a      	str	r2, [r3, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	041a      	lsls	r2, r3, #16
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	400b      	ands	r3, r1
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d006      	beq.n	8003034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fb38 	bl	80016a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e267      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d075      	beq.n	800314a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305e:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d00c      	beq.n	8003084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	4b85      	ldr	r3, [pc, #532]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003072:	2b08      	cmp	r3, #8
 8003074:	d112      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4b82      	ldr	r3, [pc, #520]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003082:	d10b      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	4b7e      	ldr	r3, [pc, #504]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05b      	beq.n	8003148 <HAL_RCC_OscConfig+0x108>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d157      	bne.n	8003148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e242      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCC_OscConfig+0x74>
 80030a6:	4b76      	ldr	r3, [pc, #472]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a75      	ldr	r2, [pc, #468]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6f      	ldr	r2, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6c      	ldr	r2, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030d8:	4b69      	ldr	r3, [pc, #420]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff f84c 	bl	8002194 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7ff f848 	bl	8002194 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e207      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xc0>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7ff f838 	bl	8002194 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7ff f834 	bl	8002194 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1f3      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	4b51      	ldr	r3, [pc, #324]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0xe8>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d063      	beq.n	800321e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003156:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1c7      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4937      	ldr	r1, [pc, #220]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCC_OscConfig+0x244>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe ffed 	bl	8002194 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031be:	f7fe ffe9 	bl	8002194 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1a8      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4925      	ldr	r1, [pc, #148]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x244>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe ffcc 	bl	8002194 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003200:	f7fe ffc8 	bl	8002194 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e187      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d036      	beq.n	8003298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <HAL_RCC_OscConfig+0x248>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe ffac 	bl	8002194 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003240:	f7fe ffa8 	bl	8002194 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e167      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x200>
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_OscConfig+0x248>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe ff95 	bl	8002194 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e00e      	b.n	800328c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe ff91 	bl	8002194 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d907      	bls.n	800328c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e150      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 8003280:	40023800 	.word	0x40023800
 8003284:	42470000 	.word	0x42470000
 8003288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8097 	beq.w	80033d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b7d      	ldr	r3, [pc, #500]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a7c      	ldr	r2, [pc, #496]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b7a      	ldr	r3, [pc, #488]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b77      	ldr	r3, [pc, #476]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b74      	ldr	r3, [pc, #464]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a73      	ldr	r2, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fe ff51 	bl	8002194 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fe ff4d 	bl	8002194 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e10c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x2ea>
 800331c:	4b64      	ldr	r3, [pc, #400]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a63      	ldr	r2, [pc, #396]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	e01c      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x30c>
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a5e      	ldr	r2, [pc, #376]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a5b      	ldr	r2, [pc, #364]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800334c:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a57      	ldr	r2, [pc, #348]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	4b55      	ldr	r3, [pc, #340]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a54      	ldr	r2, [pc, #336]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe ff12 	bl	8002194 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7fe ff0e 	bl	8002194 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0cb      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4b49      	ldr	r3, [pc, #292]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ee      	beq.n	8003374 <HAL_RCC_OscConfig+0x334>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7fe fefc 	bl	8002194 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe fef8 	bl	8002194 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0b5      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b39      	ldr	r3, [pc, #228]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80a1 	beq.w	8003520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d05c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d141      	bne.n	8003476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fecc 	bl	8002194 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fec8 	bl	8002194 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e087      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	491b      	ldr	r1, [pc, #108]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe fea1 	bl	8002194 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003456:	f7fe fe9d 	bl	8002194 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e05c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x416>
 8003474:	e054      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fe8a 	bl	8002194 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe fe86 	bl	8002194 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e045      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
 80034a2:	e03d      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e038      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40007000 	.word	0x40007000
 80034b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x4ec>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d028      	beq.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d121      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11a      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d111      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	3b01      	subs	r3, #1
 8003506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0cc      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d90c      	bls.n	800356c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0b8      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b59      	ldr	r3, [pc, #356]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800358e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a52      	ldr	r2, [pc, #328]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	494d      	ldr	r1, [pc, #308]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d044      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d119      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e07f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e067      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4934      	ldr	r1, [pc, #208]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fe fdb8 	bl	8002194 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fe fdb4 	bl	8002194 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d20c      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e032      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4916      	ldr	r1, [pc, #88]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	490e      	ldr	r1, [pc, #56]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036b6:	f000 f821 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036ba:	4602      	mov	r2, r0
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	490a      	ldr	r1, [pc, #40]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	5ccb      	ldrb	r3, [r1, r3]
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe fd18 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023c00 	.word	0x40023c00
 80036ec:	40023800 	.word	0x40023800
 80036f0:	0800a8ac 	.word	0x0800a8ac
 80036f4:	20000000 	.word	0x20000000
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b094      	sub	sp, #80	; 0x50
 8003702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	647b      	str	r3, [r7, #68]	; 0x44
 8003708:	2300      	movs	r3, #0
 800370a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800370c:	2300      	movs	r3, #0
 800370e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003714:	4b79      	ldr	r3, [pc, #484]	; (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	d00d      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x40>
 8003720:	2b08      	cmp	r3, #8
 8003722:	f200 80e1 	bhi.w	80038e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x34>
 800372a:	2b04      	cmp	r3, #4
 800372c:	d003      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x3a>
 800372e:	e0db      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b73      	ldr	r3, [pc, #460]	; (8003900 <HAL_RCC_GetSysClockFreq+0x204>)
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003734:	e0db      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003736:	4b73      	ldr	r3, [pc, #460]	; (8003904 <HAL_RCC_GetSysClockFreq+0x208>)
 8003738:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800373a:	e0d8      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373c:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003746:	4b6d      	ldr	r3, [pc, #436]	; (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d063      	beq.n	800381a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	63bb      	str	r3, [r7, #56]	; 0x38
 800375c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
 8003766:	2300      	movs	r3, #0
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
 800376a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800376e:	4622      	mov	r2, r4
 8003770:	462b      	mov	r3, r5
 8003772:	f04f 0000 	mov.w	r0, #0
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	0159      	lsls	r1, r3, #5
 800377c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003780:	0150      	lsls	r0, r2, #5
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4621      	mov	r1, r4
 8003788:	1a51      	subs	r1, r2, r1
 800378a:	6139      	str	r1, [r7, #16]
 800378c:	4629      	mov	r1, r5
 800378e:	eb63 0301 	sbc.w	r3, r3, r1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a0:	4659      	mov	r1, fp
 80037a2:	018b      	lsls	r3, r1, #6
 80037a4:	4651      	mov	r1, sl
 80037a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037aa:	4651      	mov	r1, sl
 80037ac:	018a      	lsls	r2, r1, #6
 80037ae:	4651      	mov	r1, sl
 80037b0:	ebb2 0801 	subs.w	r8, r2, r1
 80037b4:	4659      	mov	r1, fp
 80037b6:	eb63 0901 	sbc.w	r9, r3, r1
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ce:	4690      	mov	r8, r2
 80037d0:	4699      	mov	r9, r3
 80037d2:	4623      	mov	r3, r4
 80037d4:	eb18 0303 	adds.w	r3, r8, r3
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	462b      	mov	r3, r5
 80037dc:	eb49 0303 	adc.w	r3, r9, r3
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ee:	4629      	mov	r1, r5
 80037f0:	024b      	lsls	r3, r1, #9
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037f8:	4621      	mov	r1, r4
 80037fa:	024a      	lsls	r2, r1, #9
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003802:	2200      	movs	r2, #0
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
 8003806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800380c:	f7fd f846 	bl	800089c <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003818:	e058      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381a:	4b38      	ldr	r3, [pc, #224]	; (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	2200      	movs	r2, #0
 8003822:	4618      	mov	r0, r3
 8003824:	4611      	mov	r1, r2
 8003826:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800382a:	623b      	str	r3, [r7, #32]
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	f04f 0000 	mov.w	r0, #0
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	0159      	lsls	r1, r3, #5
 8003842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003846:	0150      	lsls	r0, r2, #5
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4641      	mov	r1, r8
 800384e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003852:	4649      	mov	r1, r9
 8003854:	eb63 0b01 	sbc.w	fp, r3, r1
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003864:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003868:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800386c:	ebb2 040a 	subs.w	r4, r2, sl
 8003870:	eb63 050b 	sbc.w	r5, r3, fp
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	00eb      	lsls	r3, r5, #3
 800387e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003882:	00e2      	lsls	r2, r4, #3
 8003884:	4614      	mov	r4, r2
 8003886:	461d      	mov	r5, r3
 8003888:	4643      	mov	r3, r8
 800388a:	18e3      	adds	r3, r4, r3
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	464b      	mov	r3, r9
 8003890:	eb45 0303 	adc.w	r3, r5, r3
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038a2:	4629      	mov	r1, r5
 80038a4:	028b      	lsls	r3, r1, #10
 80038a6:	4621      	mov	r1, r4
 80038a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038ac:	4621      	mov	r1, r4
 80038ae:	028a      	lsls	r2, r1, #10
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b6:	2200      	movs	r2, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	61fa      	str	r2, [r7, #28]
 80038bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c0:	f7fc ffec 	bl	800089c <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4613      	mov	r3, r2
 80038ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3750      	adds	r7, #80	; 0x50
 80038f4:	46bd      	mov	sp, r7
 80038f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	00f42400 	.word	0x00f42400
 8003904:	007a1200 	.word	0x007a1200

08003908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <HAL_RCC_GetHCLKFreq+0x14>)
 800390e:	681b      	ldr	r3, [r3, #0]
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000000 	.word	0x20000000

08003920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003924:	f7ff fff0 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0a9b      	lsrs	r3, r3, #10
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	0800a8bc 	.word	0x0800a8bc

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800394c:	f7ff ffdc 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0b5b      	lsrs	r3, r3, #13
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40023800 	.word	0x40023800
 800396c:	0800a8bc 	.word	0x0800a8bc

08003970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e041      	b.n	8003a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fe f9f8 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 f888 	bl	8003ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e03c      	b.n	8003aa2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_TIM_Base_Start+0xa0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d018      	beq.n	8003a6c <HAL_TIM_Base_Start+0x5c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d013      	beq.n	8003a6c <HAL_TIM_Base_Start+0x5c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <HAL_TIM_Base_Start+0xa4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_TIM_Base_Start+0x5c>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <HAL_TIM_Base_Start+0xa8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_TIM_Base_Start+0x5c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a17      	ldr	r2, [pc, #92]	; (8003abc <HAL_TIM_Base_Start+0xac>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIM_Base_Start+0x5c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <HAL_TIM_Base_Start+0xb0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d111      	bne.n	8003a90 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d010      	beq.n	8003aa0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	e007      	b.n	8003aa0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40014000 	.word	0x40014000

08003ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a3a      	ldr	r2, [pc, #232]	; (8003bc0 <TIM_Base_SetConfig+0xfc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00f      	beq.n	8003afc <TIM_Base_SetConfig+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d00b      	beq.n	8003afc <TIM_Base_SetConfig+0x38>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a37      	ldr	r2, [pc, #220]	; (8003bc4 <TIM_Base_SetConfig+0x100>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_Base_SetConfig+0x38>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a36      	ldr	r2, [pc, #216]	; (8003bc8 <TIM_Base_SetConfig+0x104>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_Base_SetConfig+0x38>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a35      	ldr	r2, [pc, #212]	; (8003bcc <TIM_Base_SetConfig+0x108>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d108      	bne.n	8003b0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <TIM_Base_SetConfig+0xfc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01b      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d017      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <TIM_Base_SetConfig+0x100>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <TIM_Base_SetConfig+0x104>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00f      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <TIM_Base_SetConfig+0x108>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <TIM_Base_SetConfig+0x10c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a24      	ldr	r2, [pc, #144]	; (8003bd4 <TIM_Base_SetConfig+0x110>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0x8a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <TIM_Base_SetConfig+0x114>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0e      	ldr	r2, [pc, #56]	; (8003bc0 <TIM_Base_SetConfig+0xfc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d103      	bne.n	8003b94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d105      	bne.n	8003bb2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	611a      	str	r2, [r3, #16]
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	40000c00 	.word	0x40000c00
 8003bd0:	40014000 	.word	0x40014000
 8003bd4:	40014400 	.word	0x40014400
 8003bd8:	40014800 	.word	0x40014800

08003bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e042      	b.n	8003c74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe f8fa 	bl	8001dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	; 0x24
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fdbd 	bl	80047a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d175      	bne.n	8003d88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_UART_Transmit+0x2c>
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e06e      	b.n	8003d8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2221      	movs	r2, #33	; 0x21
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cba:	f7fe fa6b 	bl	8002194 <HAL_GetTick>
 8003cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd4:	d108      	bne.n	8003ce8 <HAL_UART_Transmit+0x6c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	e003      	b.n	8003cf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cf0:	e02e      	b.n	8003d50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fb1f 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e03a      	b.n	8003d8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e007      	b.n	8003d42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1cb      	bne.n	8003cf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2140      	movs	r1, #64	; 0x40
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 faeb 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e006      	b.n	8003d8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e000      	b.n	8003d8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d112      	bne.n	8003dd2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_Receive_IT+0x26>
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e00b      	b.n	8003dd4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fb12 	bl	80043f2 <UART_Start_Receive_IT>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	e000      	b.n	8003dd4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b0ba      	sub	sp, #232	; 0xe8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10f      	bne.n	8003e42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_UART_IRQHandler+0x66>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fbf2 	bl	8004624 <UART_Receive_IT>
      return;
 8003e40:	e25b      	b.n	80042fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80de 	beq.w	8004008 <HAL_UART_IRQHandler+0x22c>
 8003e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80d1 	beq.w	8004008 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_UART_IRQHandler+0xae>
 8003e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f043 0201 	orr.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <HAL_UART_IRQHandler+0xd2>
 8003e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f043 0202 	orr.w	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_UART_IRQHandler+0xf6>
 8003eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d011      	beq.n	8003f02 <HAL_UART_IRQHandler+0x126>
 8003ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f043 0208 	orr.w	r2, r3, #8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 81f2 	beq.w	80042f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_UART_IRQHandler+0x14e>
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fb7d 	bl	8004624 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_UART_IRQHandler+0x17a>
 8003f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d04f      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa85 	bl	8004466 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d141      	bne.n	8003fee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3314      	adds	r3, #20
 8003f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3314      	adds	r3, #20
 8003f92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1d9      	bne.n	8003f6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d013      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	4a7e      	ldr	r2, [pc, #504]	; (80041bc <HAL_UART_IRQHandler+0x3e0>)
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fe2d 	bl	8002c2a <HAL_DMA_Abort_IT>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e00e      	b.n	8004004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f994 	bl	8004314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e00a      	b.n	8004004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f990 	bl	8004314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	e006      	b.n	8004004 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f98c 	bl	8004314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004002:	e175      	b.n	80042f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	bf00      	nop
    return;
 8004006:	e173      	b.n	80042f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	2b01      	cmp	r3, #1
 800400e:	f040 814f 	bne.w	80042b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8148 	beq.w	80042b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8141 	beq.w	80042b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	f040 80b6 	bne.w	80041c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004060:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8145 	beq.w	80042f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800406e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004072:	429a      	cmp	r2, r3
 8004074:	f080 813e 	bcs.w	80042f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800407e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	f000 8088 	beq.w	800419e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	330c      	adds	r3, #12
 8004094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1d9      	bne.n	800408e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004102:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004106:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e1      	bne.n	80040da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3314      	adds	r3, #20
 800411c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800413a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800413c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004140:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e3      	bne.n	8004116 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800416c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416e:	f023 0310 	bic.w	r3, r3, #16
 8004172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004180:	65ba      	str	r2, [r7, #88]	; 0x58
 8004182:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004186:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e3      	bne.n	800415c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fcd6 	bl	8002b4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8b7 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041ba:	e09b      	b.n	80042f4 <HAL_UART_IRQHandler+0x518>
 80041bc:	0800452d 	.word	0x0800452d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 808e 	beq.w	80042f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8089 	beq.w	80042f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800420a:	647a      	str	r2, [r7, #68]	; 0x44
 800420c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e3      	bne.n	80041e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3314      	adds	r3, #20
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	623b      	str	r3, [r7, #32]
   return(result);
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3314      	adds	r3, #20
 800423e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004242:	633a      	str	r2, [r7, #48]	; 0x30
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e3      	bne.n	800421e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	60fb      	str	r3, [r7, #12]
   return(result);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0310 	bic.w	r3, r3, #16
 800427a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004288:	61fa      	str	r2, [r7, #28]
 800428a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	69b9      	ldr	r1, [r7, #24]
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	617b      	str	r3, [r7, #20]
   return(result);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e3      	bne.n	8004264 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f83d 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042ae:	e023      	b.n	80042f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_UART_IRQHandler+0x4f4>
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f943 	bl	8004554 <UART_Transmit_IT>
    return;
 80042ce:	e014      	b.n	80042fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00e      	beq.n	80042fa <HAL_UART_IRQHandler+0x51e>
 80042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f983 	bl	80045f4 <UART_EndTransmit_IT>
    return;
 80042ee:	e004      	b.n	80042fa <HAL_UART_IRQHandler+0x51e>
    return;
 80042f0:	bf00      	nop
 80042f2:	e002      	b.n	80042fa <HAL_UART_IRQHandler+0x51e>
      return;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <HAL_UART_IRQHandler+0x51e>
      return;
 80042f8:	bf00      	nop
  }
}
 80042fa:	37e8      	adds	r7, #232	; 0xe8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004350:	e03b      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d037      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fd ff1b 	bl	8002194 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <UART_WaitOnFlagUntilTimeout+0x30>
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e03a      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d023      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d020      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d01d      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d116      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f857 	bl	8004466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2208      	movs	r2, #8
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00f      	b.n	80043ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4013      	ands	r3, r2
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d0b4      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2222      	movs	r2, #34	; 0x22
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004436:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0220 	orr.w	r2, r2, #32
 8004456:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004466:	b480      	push	{r7}
 8004468:	b095      	sub	sp, #84	; 0x54
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800448e:	643a      	str	r2, [r7, #64]	; 0x40
 8004490:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004494:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d119      	bne.n	8004512 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	330c      	adds	r3, #12
 80044e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 0310 	bic.w	r3, r3, #16
 80044f4:	647b      	str	r3, [r7, #68]	; 0x44
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fe:	61ba      	str	r2, [r7, #24]
 8004500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	613b      	str	r3, [r7, #16]
   return(result);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004520:	bf00      	nop
 8004522:	3754      	adds	r7, #84	; 0x54
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff fee4 	bl	8004314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b21      	cmp	r3, #33	; 0x21
 8004566:	d13e      	bne.n	80045e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004570:	d114      	bne.n	800459c <UART_Transmit_IT+0x48>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d110      	bne.n	800459c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	621a      	str	r2, [r3, #32]
 800459a:	e008      	b.n	80045ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	1c59      	adds	r1, r3, #1
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6211      	str	r1, [r2, #32]
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4619      	mov	r1, r3
 80045bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff fe73 	bl	8004300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	; 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b22      	cmp	r3, #34	; 0x22
 8004636:	f040 80ae 	bne.w	8004796 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	d117      	bne.n	8004674 <UART_Receive_IT+0x50>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d113      	bne.n	8004674 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b29b      	uxth	r3, r3
 800465e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004662:	b29a      	uxth	r2, r3
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	629a      	str	r2, [r3, #40]	; 0x28
 8004672:	e026      	b.n	80046c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d007      	beq.n	8004698 <UART_Receive_IT+0x74>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <UART_Receive_IT+0x82>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e008      	b.n	80046b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4619      	mov	r1, r3
 80046d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d15d      	bne.n	8004792 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0220 	bic.w	r2, r2, #32
 80046e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	d135      	bne.n	8004788 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	613b      	str	r3, [r7, #16]
   return(result);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f023 0310 	bic.w	r3, r3, #16
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	623a      	str	r2, [r7, #32]
 8004744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	69f9      	ldr	r1, [r7, #28]
 8004748:	6a3a      	ldr	r2, [r7, #32]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e5      	bne.n	8004722 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b10      	cmp	r3, #16
 8004762:	d10a      	bne.n	800477a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fdd1 	bl	8004328 <HAL_UARTEx_RxEventCallback>
 8004786:	e002      	b.n	800478e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fc ff79 	bl	8001680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e002      	b.n	8004798 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3730      	adds	r7, #48	; 0x30
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a4:	b0c0      	sub	sp, #256	; 0x100
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	68d9      	ldr	r1, [r3, #12]
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	ea40 0301 	orr.w	r3, r0, r1
 80047c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	431a      	orrs	r2, r3
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047f8:	f021 010c 	bic.w	r1, r1, #12
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004806:	430b      	orrs	r3, r1
 8004808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	6999      	ldr	r1, [r3, #24]
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	ea40 0301 	orr.w	r3, r0, r1
 8004826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b8f      	ldr	r3, [pc, #572]	; (8004a6c <UART_SetConfig+0x2cc>)
 8004830:	429a      	cmp	r2, r3
 8004832:	d005      	beq.n	8004840 <UART_SetConfig+0xa0>
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <UART_SetConfig+0x2d0>)
 800483c:	429a      	cmp	r2, r3
 800483e:	d104      	bne.n	800484a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7ff f882 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 8004844:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004848:	e003      	b.n	8004852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800484a:	f7ff f869 	bl	8003920 <HAL_RCC_GetPCLK1Freq>
 800484e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485c:	f040 810c 	bne.w	8004a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800486a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800486e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004872:	4622      	mov	r2, r4
 8004874:	462b      	mov	r3, r5
 8004876:	1891      	adds	r1, r2, r2
 8004878:	65b9      	str	r1, [r7, #88]	; 0x58
 800487a:	415b      	adcs	r3, r3
 800487c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800487e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004882:	4621      	mov	r1, r4
 8004884:	eb12 0801 	adds.w	r8, r2, r1
 8004888:	4629      	mov	r1, r5
 800488a:	eb43 0901 	adc.w	r9, r3, r1
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800489e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a2:	4690      	mov	r8, r2
 80048a4:	4699      	mov	r9, r3
 80048a6:	4623      	mov	r3, r4
 80048a8:	eb18 0303 	adds.w	r3, r8, r3
 80048ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048b0:	462b      	mov	r3, r5
 80048b2:	eb49 0303 	adc.w	r3, r9, r3
 80048b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048ce:	460b      	mov	r3, r1
 80048d0:	18db      	adds	r3, r3, r3
 80048d2:	653b      	str	r3, [r7, #80]	; 0x50
 80048d4:	4613      	mov	r3, r2
 80048d6:	eb42 0303 	adc.w	r3, r2, r3
 80048da:	657b      	str	r3, [r7, #84]	; 0x54
 80048dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048e4:	f7fb ffda 	bl	800089c <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4b61      	ldr	r3, [pc, #388]	; (8004a74 <UART_SetConfig+0x2d4>)
 80048ee:	fba3 2302 	umull	r2, r3, r3, r2
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	011c      	lsls	r4, r3, #4
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004900:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	1891      	adds	r1, r2, r2
 800490e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004910:	415b      	adcs	r3, r3
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004918:	4641      	mov	r1, r8
 800491a:	eb12 0a01 	adds.w	sl, r2, r1
 800491e:	4649      	mov	r1, r9
 8004920:	eb43 0b01 	adc.w	fp, r3, r1
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004938:	4692      	mov	sl, r2
 800493a:	469b      	mov	fp, r3
 800493c:	4643      	mov	r3, r8
 800493e:	eb1a 0303 	adds.w	r3, sl, r3
 8004942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004946:	464b      	mov	r3, r9
 8004948:	eb4b 0303 	adc.w	r3, fp, r3
 800494c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800495c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004964:	460b      	mov	r3, r1
 8004966:	18db      	adds	r3, r3, r3
 8004968:	643b      	str	r3, [r7, #64]	; 0x40
 800496a:	4613      	mov	r3, r2
 800496c:	eb42 0303 	adc.w	r3, r2, r3
 8004970:	647b      	str	r3, [r7, #68]	; 0x44
 8004972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800497a:	f7fb ff8f 	bl	800089c <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4611      	mov	r1, r2
 8004984:	4b3b      	ldr	r3, [pc, #236]	; (8004a74 <UART_SetConfig+0x2d4>)
 8004986:	fba3 2301 	umull	r2, r3, r3, r1
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2264      	movs	r2, #100	; 0x64
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	1acb      	subs	r3, r1, r3
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800499a:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <UART_SetConfig+0x2d4>)
 800499c:	fba3 2302 	umull	r2, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049a8:	441c      	add	r4, r3
 80049aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	1891      	adds	r1, r2, r2
 80049c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049c4:	415b      	adcs	r3, r3
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049cc:	4641      	mov	r1, r8
 80049ce:	1851      	adds	r1, r2, r1
 80049d0:	6339      	str	r1, [r7, #48]	; 0x30
 80049d2:	4649      	mov	r1, r9
 80049d4:	414b      	adcs	r3, r1
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049e4:	4659      	mov	r1, fp
 80049e6:	00cb      	lsls	r3, r1, #3
 80049e8:	4651      	mov	r1, sl
 80049ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ee:	4651      	mov	r1, sl
 80049f0:	00ca      	lsls	r2, r1, #3
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	4642      	mov	r2, r8
 80049fa:	189b      	adds	r3, r3, r2
 80049fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a00:	464b      	mov	r3, r9
 8004a02:	460a      	mov	r2, r1
 8004a04:	eb42 0303 	adc.w	r3, r2, r3
 8004a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a20:	460b      	mov	r3, r1
 8004a22:	18db      	adds	r3, r3, r3
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a26:	4613      	mov	r3, r2
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a36:	f7fb ff31 	bl	800089c <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <UART_SetConfig+0x2d4>)
 8004a40:	fba3 1302 	umull	r1, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	2164      	movs	r1, #100	; 0x64
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	3332      	adds	r3, #50	; 0x32
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <UART_SetConfig+0x2d4>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4422      	add	r2, r4
 8004a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a68:	e106      	b.n	8004c78 <UART_SetConfig+0x4d8>
 8004a6a:	bf00      	nop
 8004a6c:	40011000 	.word	0x40011000
 8004a70:	40011400 	.word	0x40011400
 8004a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	1891      	adds	r1, r2, r2
 8004a90:	6239      	str	r1, [r7, #32]
 8004a92:	415b      	adcs	r3, r3
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
 8004a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	1854      	adds	r4, r2, r1
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	eb43 0501 	adc.w	r5, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	00eb      	lsls	r3, r5, #3
 8004aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ab2:	00e2      	lsls	r2, r4, #3
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	461d      	mov	r5, r3
 8004ab8:	4643      	mov	r3, r8
 8004aba:	18e3      	adds	r3, r4, r3
 8004abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	eb45 0303 	adc.w	r3, r5, r3
 8004ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	008b      	lsls	r3, r1, #2
 8004aea:	4621      	mov	r1, r4
 8004aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af0:	4621      	mov	r1, r4
 8004af2:	008a      	lsls	r2, r1, #2
 8004af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004af8:	f7fb fed0 	bl	800089c <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4b60      	ldr	r3, [pc, #384]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004b02:	fba3 2302 	umull	r2, r3, r3, r2
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	011c      	lsls	r4, r3, #4
 8004b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	1891      	adds	r1, r2, r2
 8004b22:	61b9      	str	r1, [r7, #24]
 8004b24:	415b      	adcs	r3, r3
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	1851      	adds	r1, r2, r1
 8004b30:	6139      	str	r1, [r7, #16]
 8004b32:	4649      	mov	r1, r9
 8004b34:	414b      	adcs	r3, r1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b44:	4659      	mov	r1, fp
 8004b46:	00cb      	lsls	r3, r1, #3
 8004b48:	4651      	mov	r1, sl
 8004b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4e:	4651      	mov	r1, sl
 8004b50:	00ca      	lsls	r2, r1, #3
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b60:	464b      	mov	r3, r9
 8004b62:	460a      	mov	r2, r1
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b84:	4649      	mov	r1, r9
 8004b86:	008b      	lsls	r3, r1, #2
 8004b88:	4641      	mov	r1, r8
 8004b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b8e:	4641      	mov	r1, r8
 8004b90:	008a      	lsls	r2, r1, #2
 8004b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b96:	f7fb fe81 	bl	800089c <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2264      	movs	r2, #100	; 0x64
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	1acb      	subs	r3, r1, r3
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	3332      	adds	r3, #50	; 0x32
 8004bb4:	4a33      	ldr	r2, [pc, #204]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc0:	441c      	add	r4, r3
 8004bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004bca:	677a      	str	r2, [r7, #116]	; 0x74
 8004bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	1891      	adds	r1, r2, r2
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	415b      	adcs	r3, r3
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be0:	4641      	mov	r1, r8
 8004be2:	1851      	adds	r1, r2, r1
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	4649      	mov	r1, r9
 8004be8:	414b      	adcs	r3, r1
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	00cb      	lsls	r3, r1, #3
 8004bfc:	4651      	mov	r1, sl
 8004bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c02:	4651      	mov	r1, sl
 8004c04:	00ca      	lsls	r2, r1, #3
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	189b      	adds	r3, r3, r2
 8004c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c12:	464b      	mov	r3, r9
 8004c14:	460a      	mov	r2, r1
 8004c16:	eb42 0303 	adc.w	r3, r2, r3
 8004c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	663b      	str	r3, [r7, #96]	; 0x60
 8004c26:	667a      	str	r2, [r7, #100]	; 0x64
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c34:	4649      	mov	r1, r9
 8004c36:	008b      	lsls	r3, r1, #2
 8004c38:	4641      	mov	r1, r8
 8004c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c3e:	4641      	mov	r1, r8
 8004c40:	008a      	lsls	r2, r1, #2
 8004c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c46:	f7fb fe29 	bl	800089c <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	; 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	3332      	adds	r3, #50	; 0x32
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 020f 	and.w	r2, r3, #15
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4422      	add	r2, r4
 8004c76:	609a      	str	r2, [r3, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c84:	51eb851f 	.word	0x51eb851f

08004c88 <__NVIC_SetPriority>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	6039      	str	r1, [r7, #0]
 8004c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	db0a      	blt.n	8004cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	490c      	ldr	r1, [pc, #48]	; (8004cd4 <__NVIC_SetPriority+0x4c>)
 8004ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	440b      	add	r3, r1
 8004cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004cb0:	e00a      	b.n	8004cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4908      	ldr	r1, [pc, #32]	; (8004cd8 <__NVIC_SetPriority+0x50>)
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	3b04      	subs	r3, #4
 8004cc0:	0112      	lsls	r2, r2, #4
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	761a      	strb	r2, [r3, #24]
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	e000e100 	.word	0xe000e100
 8004cd8:	e000ed00 	.word	0xe000ed00

08004cdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	f06f 0004 	mvn.w	r0, #4
 8004ce6:	f7ff ffcf 	bl	8004c88 <__NVIC_SetPriority>
#endif
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cf6:	f3ef 8305 	mrs	r3, IPSR
 8004cfa:	603b      	str	r3, [r7, #0]
  return(result);
 8004cfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d02:	f06f 0305 	mvn.w	r3, #5
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	e00c      	b.n	8004d24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <osKernelInitialize+0x44>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d105      	bne.n	8004d1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <osKernelInitialize+0x44>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	e002      	b.n	8004d24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d24:	687b      	ldr	r3, [r7, #4]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	200001f4 	.word	0x200001f4

08004d38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d3e:	f3ef 8305 	mrs	r3, IPSR
 8004d42:	603b      	str	r3, [r7, #0]
  return(result);
 8004d44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d4a:	f06f 0305 	mvn.w	r3, #5
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	e010      	b.n	8004d74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <osKernelStart+0x48>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d109      	bne.n	8004d6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d5a:	f7ff ffbf 	bl	8004cdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <osKernelStart+0x48>)
 8004d60:	2202      	movs	r2, #2
 8004d62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d64:	f002 f8c0 	bl	8006ee8 <vTaskStartScheduler>
      stat = osOK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	e002      	b.n	8004d74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d74:	687b      	ldr	r3, [r7, #4]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	200001f4 	.word	0x200001f4

08004d84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08e      	sub	sp, #56	; 0x38
 8004d88:	af04      	add	r7, sp, #16
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d94:	f3ef 8305 	mrs	r3, IPSR
 8004d98:	617b      	str	r3, [r7, #20]
  return(result);
 8004d9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d17e      	bne.n	8004e9e <osThreadNew+0x11a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d07b      	beq.n	8004e9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004daa:	2318      	movs	r3, #24
 8004dac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004db2:	f04f 33ff 	mov.w	r3, #4294967295
 8004db6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d045      	beq.n	8004e4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <osThreadNew+0x48>
        name = attr->name;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <osThreadNew+0x6e>
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	2b38      	cmp	r3, #56	; 0x38
 8004de4:	d805      	bhi.n	8004df2 <osThreadNew+0x6e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <osThreadNew+0x72>
        return (NULL);
 8004df2:	2300      	movs	r3, #0
 8004df4:	e054      	b.n	8004ea0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00e      	beq.n	8004e2c <osThreadNew+0xa8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	2b5b      	cmp	r3, #91	; 0x5b
 8004e14:	d90a      	bls.n	8004e2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d006      	beq.n	8004e2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <osThreadNew+0xa8>
        mem = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	e010      	b.n	8004e4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10c      	bne.n	8004e4e <osThreadNew+0xca>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d108      	bne.n	8004e4e <osThreadNew+0xca>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <osThreadNew+0xca>
          mem = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e001      	b.n	8004e4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d110      	bne.n	8004e76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e5c:	9202      	str	r2, [sp, #8]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	6a3a      	ldr	r2, [r7, #32]
 8004e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f001 fe66 	bl	8006b3c <xTaskCreateStatic>
 8004e70:	4603      	mov	r3, r0
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	e013      	b.n	8004e9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d110      	bne.n	8004e9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f107 0310 	add.w	r3, r7, #16
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f001 feb1 	bl	8006bf6 <xTaskCreate>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <osThreadNew+0x11a>
            hTask = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e9e:	693b      	ldr	r3, [r7, #16]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3728      	adds	r7, #40	; 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb0:	f3ef 8305 	mrs	r3, IPSR
 8004eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <osDelay+0x1c>
    stat = osErrorISR;
 8004ebc:	f06f 0305 	mvn.w	r3, #5
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e007      	b.n	8004ed4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 ffd6 	bl	8006e80 <vTaskDelay>
    }
  }

  return (stat);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eea:	f3ef 8305 	mrs	r3, IPSR
 8004eee:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ef0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d12d      	bne.n	8004f52 <osEventFlagsNew+0x74>
    mem = -1;
 8004ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8004efa:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d015      	beq.n	8004f2e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <osEventFlagsNew+0x3a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b1f      	cmp	r3, #31
 8004f10:	d902      	bls.n	8004f18 <osEventFlagsNew+0x3a>
        mem = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	e00c      	b.n	8004f32 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d108      	bne.n	8004f32 <osEventFlagsNew+0x54>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <osEventFlagsNew+0x54>
          mem = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e001      	b.n	8004f32 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fb5d 	bl	80055fc <xEventGroupCreateStatic>
 8004f42:	6178      	str	r0, [r7, #20]
 8004f44:	e005      	b.n	8004f52 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004f4c:	f000 fb8d 	bl	800566a <xEventGroupCreate>
 8004f50:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004f52:	697b      	ldr	r3, [r7, #20]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <osEventFlagsSet+0x1e>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004f7a:	f06f 0303 	mvn.w	r3, #3
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	e028      	b.n	8004fd4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f82:	f3ef 8305 	mrs	r3, IPSR
 8004f86:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f88:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01d      	beq.n	8004fca <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004f92:	f107 0308 	add.w	r3, r7, #8
 8004f96:	461a      	mov	r2, r3
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	6938      	ldr	r0, [r7, #16]
 8004f9c:	f000 fd86 	bl	8005aac <xEventGroupSetBitsFromISR>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004fa6:	f06f 0302 	mvn.w	r3, #2
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e012      	b.n	8004fd4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00d      	beq.n	8004fd4 <osEventFlagsSet+0x78>
 8004fb8:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <osEventFlagsSet+0x84>)
 8004fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	e004      	b.n	8004fd4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	6938      	ldr	r0, [r7, #16]
 8004fce:	f000 fca5 	bl	800591c <xEventGroupSetBits>
 8004fd2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004fd4:	697b      	ldr	r3, [r7, #20]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d004      	beq.n	8005002 <osEventFlagsClear+0x1e>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005002:	f06f 0303 	mvn.w	r3, #3
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e019      	b.n	800503e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800500a:	f3ef 8305 	mrs	r3, IPSR
 800500e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005010:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00e      	beq.n	8005034 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8005016:	6938      	ldr	r0, [r7, #16]
 8005018:	f000 fc5c 	bl	80058d4 <xEventGroupGetBitsFromISR>
 800501c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6938      	ldr	r0, [r7, #16]
 8005022:	f000 fc43 	bl	80058ac <xEventGroupClearBitsFromISR>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d108      	bne.n	800503e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 800502c:	f06f 0302 	mvn.w	r3, #2
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e004      	b.n	800503e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f000 fc00 	bl	800583c <xEventGroupClearBits>
 800503c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800503e:	697b      	ldr	r3, [r7, #20]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b08c      	sub	sp, #48	; 0x30
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <osEventFlagsWait+0x22>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800506a:	f06f 0303 	mvn.w	r3, #3
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e04b      	b.n	800510a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005072:	f3ef 8305 	mrs	r3, IPSR
 8005076:	617b      	str	r3, [r7, #20]
  return(result);
 8005078:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800507e:	f06f 0305 	mvn.w	r3, #5
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	e041      	b.n	800510a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
 8005094:	e001      	b.n	800509a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	e001      	b.n	80050ae <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80050aa:	2301      	movs	r3, #1
 80050ac:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	69b8      	ldr	r0, [r7, #24]
 80050ba:	f000 faf1 	bl	80056a0 <xEventGroupWaitBits>
 80050be:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4013      	ands	r3, r2
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d019      	beq.n	800510a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80050dc:	f06f 0301 	mvn.w	r3, #1
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	e012      	b.n	800510a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80050e4:	f06f 0302 	mvn.w	r3, #2
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	e00e      	b.n	800510a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80050fc:	f06f 0301 	mvn.w	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	e002      	b.n	800510a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005104:	f06f 0302 	mvn.w	r3, #2
 8005108:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800510a:	69fb      	ldr	r3, [r7, #28]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3728      	adds	r7, #40	; 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005120:	f3ef 8305 	mrs	r3, IPSR
 8005124:	60bb      	str	r3, [r7, #8]
  return(result);
 8005126:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005128:	2b00      	cmp	r3, #0
 800512a:	d174      	bne.n	8005216 <osMutexNew+0x102>
    if (attr != NULL) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <osMutexNew+0x26>
      type = attr->attr_bits;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	e001      	b.n	800513e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <osMutexNew+0x3a>
      rmtx = 1U;
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e001      	b.n	8005152 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d15c      	bne.n	8005216 <osMutexNew+0x102>
      mem = -1;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295
 8005160:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d015      	beq.n	8005194 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d006      	beq.n	800517e <osMutexNew+0x6a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b4f      	cmp	r3, #79	; 0x4f
 8005176:	d902      	bls.n	800517e <osMutexNew+0x6a>
          mem = 1;
 8005178:	2301      	movs	r3, #1
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	e00c      	b.n	8005198 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d108      	bne.n	8005198 <osMutexNew+0x84>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <osMutexNew+0x84>
            mem = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e001      	b.n	8005198 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d112      	bne.n	80051c4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4619      	mov	r1, r3
 80051aa:	2004      	movs	r0, #4
 80051ac:	f000 feb5 	bl	8005f1a <xQueueCreateMutexStatic>
 80051b0:	61f8      	str	r0, [r7, #28]
 80051b2:	e016      	b.n	80051e2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	4619      	mov	r1, r3
 80051ba:	2001      	movs	r0, #1
 80051bc:	f000 fead 	bl	8005f1a <xQueueCreateMutexStatic>
 80051c0:	61f8      	str	r0, [r7, #28]
 80051c2:	e00e      	b.n	80051e2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80051d0:	2004      	movs	r0, #4
 80051d2:	f000 fe8a 	bl	8005eea <xQueueCreateMutex>
 80051d6:	61f8      	str	r0, [r7, #28]
 80051d8:	e003      	b.n	80051e2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80051da:	2001      	movs	r0, #1
 80051dc:	f000 fe85 	bl	8005eea <xQueueCreateMutex>
 80051e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <osMutexNew+0xee>
        if (attr != NULL) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <osMutexNew+0xe2>
          name = attr->name;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e001      	b.n	80051fa <osMutexNew+0xe6>
        } else {
          name = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	69f8      	ldr	r0, [r7, #28]
 80051fe:	f001 fc3f 	bl	8006a80 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <osMutexNew+0x102>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005216:	69fb      	ldr	r3, [r7, #28]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800523e:	f3ef 8305 	mrs	r3, IPSR
 8005242:	60bb      	str	r3, [r7, #8]
  return(result);
 8005244:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800524a:	f06f 0305 	mvn.w	r3, #5
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e02c      	b.n	80052ac <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005258:	f06f 0303 	mvn.w	r3, #3
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e025      	b.n	80052ac <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d011      	beq.n	800528a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	6938      	ldr	r0, [r7, #16]
 800526a:	f000 fea5 	bl	8005fb8 <xQueueTakeMutexRecursive>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d01b      	beq.n	80052ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800527a:	f06f 0301 	mvn.w	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e014      	b.n	80052ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005282:	f06f 0302 	mvn.w	r3, #2
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e010      	b.n	80052ac <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6938      	ldr	r0, [r7, #16]
 800528e:	f001 f943 	bl	8006518 <xQueueSemaphoreTake>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d009      	beq.n	80052ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800529e:	f06f 0301 	mvn.w	r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e002      	b.n	80052ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80052a6:	f06f 0302 	mvn.w	r3, #2
 80052aa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80052ac:	697b      	ldr	r3, [r7, #20]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d2:	f3ef 8305 	mrs	r3, IPSR
 80052d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80052d8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80052de:	f06f 0305 	mvn.w	r3, #5
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e01f      	b.n	8005326 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d103      	bne.n	80052f4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80052ec:	f06f 0303 	mvn.w	r3, #3
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e018      	b.n	8005326 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80052fa:	6938      	ldr	r0, [r7, #16]
 80052fc:	f000 fe28 	bl	8005f50 <xQueueGiveMutexRecursive>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d00f      	beq.n	8005326 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005306:	f06f 0302 	mvn.w	r3, #2
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e00b      	b.n	8005326 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	2100      	movs	r1, #0
 8005314:	6938      	ldr	r0, [r7, #16]
 8005316:	f000 fe85 	bl	8006024 <xQueueGenericSend>
 800531a:	4603      	mov	r3, r0
 800531c:	2b01      	cmp	r3, #1
 800531e:	d002      	beq.n	8005326 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005320:	f06f 0302 	mvn.w	r3, #2
 8005324:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005326:	697b      	ldr	r3, [r7, #20]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005340:	f3ef 8305 	mrs	r3, IPSR
 8005344:	613b      	str	r3, [r7, #16]
  return(result);
 8005346:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005348:	2b00      	cmp	r3, #0
 800534a:	d15f      	bne.n	800540c <osMessageQueueNew+0xdc>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d05c      	beq.n	800540c <osMessageQueueNew+0xdc>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d059      	beq.n	800540c <osMessageQueueNew+0xdc>
    mem = -1;
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d029      	beq.n	80053b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d012      	beq.n	8005392 <osMessageQueueNew+0x62>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b4f      	cmp	r3, #79	; 0x4f
 8005372:	d90e      	bls.n	8005392 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695a      	ldr	r2, [r3, #20]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	429a      	cmp	r2, r3
 800538a:	d302      	bcc.n	8005392 <osMessageQueueNew+0x62>
        mem = 1;
 800538c:	2301      	movs	r3, #1
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	e014      	b.n	80053bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d110      	bne.n	80053bc <osMessageQueueNew+0x8c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <osMessageQueueNew+0x8c>
          mem = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e001      	b.n	80053bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10b      	bne.n	80053da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2100      	movs	r1, #0
 80053cc:	9100      	str	r1, [sp, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fc9b 	bl	8005d0c <xQueueGenericCreateStatic>
 80053d6:	61f8      	str	r0, [r7, #28]
 80053d8:	e008      	b.n	80053ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80053e0:	2200      	movs	r2, #0
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fd09 	bl	8005dfc <xQueueGenericCreate>
 80053ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00c      	beq.n	800540c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <osMessageQueueNew+0xd0>
        name = attr->name;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e001      	b.n	8005404 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005404:	6979      	ldr	r1, [r7, #20]
 8005406:	69f8      	ldr	r0, [r7, #28]
 8005408:	f001 fb3a 	bl	8006a80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800540c:	69fb      	ldr	r3, [r7, #28]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005430:	f3ef 8305 	mrs	r3, IPSR
 8005434:	617b      	str	r3, [r7, #20]
  return(result);
 8005436:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005438:	2b00      	cmp	r3, #0
 800543a:	d028      	beq.n	800548e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <osMessageQueuePut+0x36>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <osMessageQueuePut+0x36>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800544e:	f06f 0303 	mvn.w	r3, #3
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	e038      	b.n	80054c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800545a:	f107 0210 	add.w	r2, r7, #16
 800545e:	2300      	movs	r3, #0
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	69b8      	ldr	r0, [r7, #24]
 8005464:	f000 fedc 	bl	8006220 <xQueueGenericSendFromISR>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d003      	beq.n	8005476 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800546e:	f06f 0302 	mvn.w	r3, #2
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	e028      	b.n	80054c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d025      	beq.n	80054c8 <osMessageQueuePut+0xb0>
 800547c:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <osMessageQueuePut+0xbc>)
 800547e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	e01c      	b.n	80054c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <osMessageQueuePut+0x82>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800549a:	f06f 0303 	mvn.w	r3, #3
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	e012      	b.n	80054c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054a2:	2300      	movs	r3, #0
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	69b8      	ldr	r0, [r7, #24]
 80054aa:	f000 fdbb 	bl	8006024 <xQueueGenericSend>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d009      	beq.n	80054c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80054ba:	f06f 0301 	mvn.w	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	e002      	b.n	80054c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80054c2:	f06f 0302 	mvn.w	r3, #2
 80054c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80054c8:	69fb      	ldr	r3, [r7, #28]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ee:	f3ef 8305 	mrs	r3, IPSR
 80054f2:	617b      	str	r3, [r7, #20]
  return(result);
 80054f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d028      	beq.n	800554c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <osMessageQueueGet+0x34>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <osMessageQueueGet+0x34>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800550c:	f06f 0303 	mvn.w	r3, #3
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	e037      	b.n	8005584 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005518:	f107 0310 	add.w	r3, r7, #16
 800551c:	461a      	mov	r2, r3
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	69b8      	ldr	r0, [r7, #24]
 8005522:	f001 f905 	bl	8006730 <xQueueReceiveFromISR>
 8005526:	4603      	mov	r3, r0
 8005528:	2b01      	cmp	r3, #1
 800552a:	d003      	beq.n	8005534 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800552c:	f06f 0302 	mvn.w	r3, #2
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e027      	b.n	8005584 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d024      	beq.n	8005584 <osMessageQueueGet+0xac>
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <osMessageQueueGet+0xb8>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	e01b      	b.n	8005584 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <osMessageQueueGet+0x80>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005558:	f06f 0303 	mvn.w	r3, #3
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	e011      	b.n	8005584 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	69b8      	ldr	r0, [r7, #24]
 8005566:	f000 fef7 	bl	8006358 <xQueueReceive>
 800556a:	4603      	mov	r3, r0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d009      	beq.n	8005584 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005576:	f06f 0301 	mvn.w	r3, #1
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e002      	b.n	8005584 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800557e:	f06f 0302 	mvn.w	r3, #2
 8005582:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005584:	69fb      	ldr	r3, [r7, #28]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80055a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a06      	ldr	r2, [pc, #24]	; (80055c4 <vApplicationGetIdleTaskMemory+0x30>)
 80055aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	601a      	str	r2, [r3, #0]
}
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	200001f8 	.word	0x200001f8
 80055c4:	20000254 	.word	0x20000254

080055c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80055d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a06      	ldr	r2, [pc, #24]	; (80055f8 <vApplicationGetTimerTaskMemory+0x30>)
 80055de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e6:	601a      	str	r2, [r3, #0]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20000454 	.word	0x20000454
 80055f8:	200004b0 	.word	0x200004b0

080055fc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005620:	2320      	movs	r3, #32
 8005622:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b20      	cmp	r3, #32
 8005628:	d00a      	beq.n	8005640 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	60fb      	str	r3, [r7, #12]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3304      	adds	r3, #4
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fa3d 	bl	8005ad4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2201      	movs	r2, #1
 800565e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005660:	697b      	ldr	r3, [r7, #20]
	}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005670:	2020      	movs	r0, #32
 8005672:	f003 f8e1 	bl	8008838 <pvPortMalloc>
 8005676:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fa23 	bl	8005ad4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005694:	687b      	ldr	r3, [r7, #4]
	}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b090      	sub	sp, #64	; 0x40
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	623b      	str	r3, [r7, #32]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	61fb      	str	r3, [r7, #28]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <xEventGroupWaitBits+0x72>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	61bb      	str	r3, [r7, #24]
}
 800570e:	bf00      	nop
 8005710:	e7fe      	b.n	8005710 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005712:	f002 f8df 	bl	80078d4 <xTaskGetSchedulerState>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <xEventGroupWaitBits+0x82>
 800571c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <xEventGroupWaitBits+0x86>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <xEventGroupWaitBits+0x88>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	617b      	str	r3, [r7, #20]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005742:	f001 fc37 	bl	8006fb4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005752:	f000 f988 	bl	8005a66 <prvTestWaitCondition>
 8005756:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005762:	2300      	movs	r3, #0
 8005764:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d028      	beq.n	80057be <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	43db      	mvns	r3, r3
 8005774:	401a      	ands	r2, r3
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e020      	b.n	80057be <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800577c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	633b      	str	r3, [r7, #48]	; 0x30
 800578a:	e018      	b.n	80057be <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005798:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	1d18      	adds	r0, r3, #4
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	4313      	orrs	r3, r2
 80057b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b4:	4619      	mov	r1, r3
 80057b6:	f001 fdf5 	bl	80073a4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80057be:	f001 fc07 	bl	8006fd0 <xTaskResumeAll>
 80057c2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80057c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d031      	beq.n	800582e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d107      	bne.n	80057e0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80057d0:	4b19      	ldr	r3, [pc, #100]	; (8005838 <xEventGroupWaitBits+0x198>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80057e0:	f002 f9ee 	bl	8007bc0 <uxTaskResetEventItemValue>
 80057e4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80057e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11a      	bne.n	8005826 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80057f0:	f002 ff00 	bl	80085f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80057f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005800:	f000 f931 	bl	8005a66 <prvTestWaitCondition>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d006      	beq.n	800581e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	43db      	mvns	r3, r3
 8005818:	401a      	ands	r2, r3
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800581e:	2301      	movs	r3, #1
 8005820:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005822:	f002 ff17 	bl	8008654 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005830:	4618      	mov	r0, r3
 8005832:	3740      	adds	r7, #64	; 0x40
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xEventGroupClearBits+0x2a>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60fb      	str	r3, [r7, #12]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <xEventGroupClearBits+0x4a>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	60bb      	str	r3, [r7, #8]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005886:	f002 feb5 	bl	80085f4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	43db      	mvns	r3, r3
 8005898:	401a      	ands	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800589e:	f002 fed9 	bl	8008654 <vPortExitCritical>

	return uxReturn;
 80058a2:	693b      	ldr	r3, [r7, #16]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80058b6:	2300      	movs	r3, #0
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4804      	ldr	r0, [pc, #16]	; (80058d0 <xEventGroupClearBitsFromISR+0x24>)
 80058be:	f002 fd4d 	bl	800835c <xTimerPendFunctionCallFromISR>
 80058c2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80058c4:	68fb      	ldr	r3, [r7, #12]
	}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	08005a4d 	.word	0x08005a4d

080058d4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	; 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058e0:	f3ef 8211 	mrs	r2, BASEPRI
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60fa      	str	r2, [r7, #12]
 80058f6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058f8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058fa:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800590c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800590e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005910:	4618      	mov	r0, r3
 8005912:	3724      	adds	r7, #36	; 0x24
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08e      	sub	sp, #56	; 0x38
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005926:	2300      	movs	r3, #0
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800592e:	2300      	movs	r3, #0
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xEventGroupSetBits+0x32>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	613b      	str	r3, [r7, #16]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <xEventGroupSetBits+0x52>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60fb      	str	r3, [r7, #12]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	3304      	adds	r3, #4
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	3308      	adds	r3, #8
 8005978:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800597a:	f001 fb1b 	bl	8006fb4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	431a      	orrs	r2, r3
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005990:	e03c      	b.n	8005a0c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800599e:	2300      	movs	r3, #0
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059a8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059b0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00b      	beq.n	80059e0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059cc:	e008      	b.n	80059e0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d101      	bne.n	80059e0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80059dc:	2301      	movs	r3, #1
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d010      	beq.n	8005a08 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80059f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a00:	4619      	mov	r1, r3
 8005a02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a04:	f001 fd9a 	bl	800753c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d1be      	bne.n	8005992 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005a22:	f001 fad5 	bl	8006fd0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	681b      	ldr	r3, [r3, #0]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3738      	adds	r7, #56	; 0x38
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005a3c:	6839      	ldr	r1, [r7, #0]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff ff6c 	bl	800591c <xEventGroupSetBits>
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff feef 	bl	800583c <xEventGroupClearBits>
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005a66:	b480      	push	{r7}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005a86:	2301      	movs	r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	e007      	b.n	8005a9c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d101      	bne.n	8005a9c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	4804      	ldr	r0, [pc, #16]	; (8005ad0 <xEventGroupSetBitsFromISR+0x24>)
 8005ac0:	f002 fc4c 	bl	800835c <xTimerPendFunctionCallFromISR>
 8005ac4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005ac6:	697b      	ldr	r3, [r7, #20]
	}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	08005a33 	.word	0x08005a33

08005ad4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f103 0208 	add.w	r2, r3, #8
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f103 0208 	add.w	r2, r3, #8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f103 0208 	add.w	r2, r3, #8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	601a      	str	r2, [r3, #0]
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d103      	bne.n	8005b96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e00c      	b.n	8005bb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3308      	adds	r3, #8
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e002      	b.n	8005ba4 <vListInsert+0x2e>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d2f6      	bcs.n	8005b9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	601a      	str	r2, [r3, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6892      	ldr	r2, [r2, #8]
 8005bfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6852      	ldr	r2, [r2, #4]
 8005c08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d103      	bne.n	8005c1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	1e5a      	subs	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <xQueueGenericReset+0x2a>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60bb      	str	r3, [r7, #8]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c66:	f002 fcc5 	bl	80085f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	441a      	add	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	3b01      	subs	r3, #1
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	441a      	add	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d114      	bne.n	8005ce6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01a      	beq.n	8005cfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3310      	adds	r3, #16
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fbd3 	bl	8007474 <xTaskRemoveFromEventList>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d012      	beq.n	8005cfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <xQueueGenericReset+0xcc>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	e009      	b.n	8005cfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3310      	adds	r3, #16
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff fef2 	bl	8005ad4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3324      	adds	r3, #36	; 0x24
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff feed 	bl	8005ad4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cfa:	f002 fcab 	bl	8008654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cfe:	2301      	movs	r3, #1
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	; 0x38
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <xQueueGenericCreateStatic+0x52>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <xQueueGenericCreateStatic+0x56>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <xQueueGenericCreateStatic+0x58>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	623b      	str	r3, [r7, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <xQueueGenericCreateStatic+0x7e>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <xQueueGenericCreateStatic+0x82>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <xQueueGenericCreateStatic+0x84>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	61fb      	str	r3, [r7, #28]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005daa:	2350      	movs	r3, #80	; 0x50
 8005dac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b50      	cmp	r3, #80	; 0x50
 8005db2:	d00a      	beq.n	8005dca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	61bb      	str	r3, [r7, #24]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00d      	beq.n	8005df2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	4613      	mov	r3, r2
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f83f 	bl	8005e70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3730      	adds	r7, #48	; 0x30
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08a      	sub	sp, #40	; 0x28
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	613b      	str	r3, [r7, #16]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3350      	adds	r3, #80	; 0x50
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 fcff 	bl	8008838 <pvPortMalloc>
 8005e3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d011      	beq.n	8005e66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3350      	adds	r3, #80	; 0x50
 8005e4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e54:	79fa      	ldrb	r2, [r7, #7]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f805 	bl	8005e70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e66:	69bb      	ldr	r3, [r7, #24]
	}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e002      	b.n	8005e92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	69b8      	ldr	r0, [r7, #24]
 8005ea2:	f7ff fecb 	bl	8005c3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	78fa      	ldrb	r2, [r7, #3]
 8005eaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00e      	beq.n	8005ee2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f8a1 	bl	8006024 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b086      	sub	sp, #24
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6939      	ldr	r1, [r7, #16]
 8005f02:	6978      	ldr	r0, [r7, #20]
 8005f04:	f7ff ff7a 	bl	8005dfc <xQueueGenericCreate>
 8005f08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7ff ffd3 	bl	8005eb6 <prvInitialiseMutex>

		return xNewQueue;
 8005f10:	68fb      	ldr	r3, [r7, #12]
	}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b088      	sub	sp, #32
 8005f1e:	af02      	add	r7, sp, #8
 8005f20:	4603      	mov	r3, r0
 8005f22:	6039      	str	r1, [r7, #0]
 8005f24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f26:	2301      	movs	r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2200      	movs	r2, #0
 8005f36:	6939      	ldr	r1, [r7, #16]
 8005f38:	6978      	ldr	r0, [r7, #20]
 8005f3a:	f7ff fee7 	bl	8005d0c <xQueueGenericCreateStatic>
 8005f3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff ffb8 	bl	8005eb6 <prvInitialiseMutex>

		return xNewQueue;
 8005f46:	68fb      	ldr	r3, [r7, #12]
	}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	60fb      	str	r3, [r7, #12]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	689c      	ldr	r4, [r3, #8]
 8005f7c:	f001 fc9a 	bl	80078b4 <xTaskGetCurrentTaskHandle>
 8005f80:	4603      	mov	r3, r0
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d111      	bne.n	8005faa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	1e5a      	subs	r2, r3, #1
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d105      	bne.n	8005fa4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	6938      	ldr	r0, [r7, #16]
 8005fa0:	f000 f840 	bl	8006024 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e001      	b.n	8005fae <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005fae:	697b      	ldr	r3, [r7, #20]
	}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd90      	pop	{r4, r7, pc}

08005fb8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005fb8:	b590      	push	{r4, r7, lr}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60fb      	str	r3, [r7, #12]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	689c      	ldr	r4, [r3, #8]
 8005fe6:	f001 fc65 	bl	80078b4 <xTaskGetCurrentTaskHandle>
 8005fea:	4603      	mov	r3, r0
 8005fec:	429c      	cmp	r4, r3
 8005fee:	d107      	bne.n	8006000 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e00c      	b.n	800601a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6938      	ldr	r0, [r7, #16]
 8006004:	f000 fa88 	bl	8006518 <xQueueSemaphoreTake>
 8006008:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800601a:	697b      	ldr	r3, [r7, #20]
	}
 800601c:	4618      	mov	r0, r3
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd90      	pop	{r4, r7, pc}

08006024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08e      	sub	sp, #56	; 0x38
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006032:	2300      	movs	r3, #0
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <xQueueGenericSend+0x32>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d103      	bne.n	8006064 <xQueueGenericSend+0x40>
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <xQueueGenericSend+0x44>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <xQueueGenericSend+0x46>
 8006068:	2300      	movs	r3, #0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <xQueueGenericSend+0x60>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d103      	bne.n	8006092 <xQueueGenericSend+0x6e>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <xQueueGenericSend+0x72>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueGenericSend+0x74>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	623b      	str	r3, [r7, #32]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060b2:	f001 fc0f 	bl	80078d4 <xTaskGetSchedulerState>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <xQueueGenericSend+0x9e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <xQueueGenericSend+0xa2>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <xQueueGenericSend+0xa4>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	61fb      	str	r3, [r7, #28]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060e2:	f002 fa87 	bl	80085f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d302      	bcc.n	80060f8 <xQueueGenericSend+0xd4>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d129      	bne.n	800614c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060fe:	f000 fbaf 	bl	8006860 <prvCopyDataToQueue>
 8006102:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	d010      	beq.n	800612e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	4618      	mov	r0, r3
 8006112:	f001 f9af 	bl	8007474 <xTaskRemoveFromEventList>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d013      	beq.n	8006144 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800611c:	4b3f      	ldr	r3, [pc, #252]	; (800621c <xQueueGenericSend+0x1f8>)
 800611e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	e00a      	b.n	8006144 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006134:	4b39      	ldr	r3, [pc, #228]	; (800621c <xQueueGenericSend+0x1f8>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006144:	f002 fa86 	bl	8008654 <vPortExitCritical>
				return pdPASS;
 8006148:	2301      	movs	r3, #1
 800614a:	e063      	b.n	8006214 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006152:	f002 fa7f 	bl	8008654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006156:	2300      	movs	r3, #0
 8006158:	e05c      	b.n	8006214 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800615a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006160:	f107 0314 	add.w	r3, r7, #20
 8006164:	4618      	mov	r0, r3
 8006166:	f001 fa4b 	bl	8007600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800616a:	2301      	movs	r3, #1
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800616e:	f002 fa71 	bl	8008654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006172:	f000 ff1f 	bl	8006fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006176:	f002 fa3d 	bl	80085f4 <vPortEnterCritical>
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006180:	b25b      	sxtb	r3, r3
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d103      	bne.n	8006190 <xQueueGenericSend+0x16c>
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006196:	b25b      	sxtb	r3, r3
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d103      	bne.n	80061a6 <xQueueGenericSend+0x182>
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061a6:	f002 fa55 	bl	8008654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061aa:	1d3a      	adds	r2, r7, #4
 80061ac:	f107 0314 	add.w	r3, r7, #20
 80061b0:	4611      	mov	r1, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fa3a 	bl	800762c <xTaskCheckForTimeOut>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d124      	bne.n	8006208 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061c0:	f000 fc46 	bl	8006a50 <prvIsQueueFull>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d018      	beq.n	80061fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	3310      	adds	r3, #16
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 f8c2 	bl	800735c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061da:	f000 fbd1 	bl	8006980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061de:	f000 fef7 	bl	8006fd0 <xTaskResumeAll>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f47f af7c 	bne.w	80060e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80061ea:	4b0c      	ldr	r3, [pc, #48]	; (800621c <xQueueGenericSend+0x1f8>)
 80061ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	e772      	b.n	80060e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061fe:	f000 fbbf 	bl	8006980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006202:	f000 fee5 	bl	8006fd0 <xTaskResumeAll>
 8006206:	e76c      	b.n	80060e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800620a:	f000 fbb9 	bl	8006980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800620e:	f000 fedf 	bl	8006fd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006212:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006214:	4618      	mov	r0, r3
 8006216:	3738      	adds	r7, #56	; 0x38
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	e000ed04 	.word	0xe000ed04

08006220 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b090      	sub	sp, #64	; 0x40
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <xQueueGenericSendFromISR+0x3c>
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <xQueueGenericSendFromISR+0x40>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <xQueueGenericSendFromISR+0x42>
 8006260:	2300      	movs	r3, #0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d103      	bne.n	800628a <xQueueGenericSendFromISR+0x6a>
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <xQueueGenericSendFromISR+0x6e>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <xQueueGenericSendFromISR+0x70>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	623b      	str	r3, [r7, #32]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062aa:	f002 fa85 	bl	80087b8 <vPortValidateInterruptPriority>
	__asm volatile
 80062ae:	f3ef 8211 	mrs	r2, BASEPRI
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	61fa      	str	r2, [r7, #28]
 80062c4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80062c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d302      	bcc.n	80062dc <xQueueGenericSendFromISR+0xbc>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d12f      	bne.n	800633c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062f2:	f000 fab5 	bl	8006860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d112      	bne.n	8006326 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	d016      	beq.n	8006336 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	3324      	adds	r3, #36	; 0x24
 800630c:	4618      	mov	r0, r3
 800630e:	f001 f8b1 	bl	8007474 <xTaskRemoveFromEventList>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00e      	beq.n	8006336 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00b      	beq.n	8006336 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e007      	b.n	8006336 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006326:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800632a:	3301      	adds	r3, #1
 800632c:	b2db      	uxtb	r3, r3
 800632e:	b25a      	sxtb	r2, r3
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006336:	2301      	movs	r3, #1
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800633a:	e001      	b.n	8006340 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800633c:	2300      	movs	r3, #0
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f383 8811 	msr	BASEPRI, r3
}
 800634a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800634e:	4618      	mov	r0, r3
 8006350:	3740      	adds	r7, #64	; 0x40
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08c      	sub	sp, #48	; 0x30
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <xQueueReceive+0x30>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	623b      	str	r3, [r7, #32]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <xQueueReceive+0x3e>
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <xQueueReceive+0x42>
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <xQueueReceive+0x44>
 800639a:	2300      	movs	r3, #0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <xQueueReceive+0x5e>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	61fb      	str	r3, [r7, #28]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063b6:	f001 fa8d 	bl	80078d4 <xTaskGetSchedulerState>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <xQueueReceive+0x6e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <xQueueReceive+0x72>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <xQueueReceive+0x74>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xQueueReceive+0x8e>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	61bb      	str	r3, [r7, #24]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063e6:	f002 f905 	bl	80085f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d01f      	beq.n	8006436 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063fa:	f000 fa9b 	bl	8006934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1e5a      	subs	r2, r3, #1
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00f      	beq.n	800642e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	3310      	adds	r3, #16
 8006412:	4618      	mov	r0, r3
 8006414:	f001 f82e 	bl	8007474 <xTaskRemoveFromEventList>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d007      	beq.n	800642e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800641e:	4b3d      	ldr	r3, [pc, #244]	; (8006514 <xQueueReceive+0x1bc>)
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800642e:	f002 f911 	bl	8008654 <vPortExitCritical>
				return pdPASS;
 8006432:	2301      	movs	r3, #1
 8006434:	e069      	b.n	800650a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800643c:	f002 f90a 	bl	8008654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006440:	2300      	movs	r3, #0
 8006442:	e062      	b.n	800650a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800644a:	f107 0310 	add.w	r3, r7, #16
 800644e:	4618      	mov	r0, r3
 8006450:	f001 f8d6 	bl	8007600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006454:	2301      	movs	r3, #1
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006458:	f002 f8fc 	bl	8008654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800645c:	f000 fdaa 	bl	8006fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006460:	f002 f8c8 	bl	80085f4 <vPortEnterCritical>
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800646a:	b25b      	sxtb	r3, r3
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d103      	bne.n	800647a <xQueueReceive+0x122>
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006480:	b25b      	sxtb	r3, r3
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	d103      	bne.n	8006490 <xQueueReceive+0x138>
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006490:	f002 f8e0 	bl	8008654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006494:	1d3a      	adds	r2, r7, #4
 8006496:	f107 0310 	add.w	r3, r7, #16
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f8c5 	bl	800762c <xTaskCheckForTimeOut>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d123      	bne.n	80064f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064aa:	f000 fabb 	bl	8006a24 <prvIsQueueEmpty>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d017      	beq.n	80064e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	3324      	adds	r3, #36	; 0x24
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 ff4d 	bl	800735c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c4:	f000 fa5c 	bl	8006980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064c8:	f000 fd82 	bl	8006fd0 <xTaskResumeAll>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d189      	bne.n	80063e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <xQueueReceive+0x1bc>)
 80064d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	e780      	b.n	80063e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e6:	f000 fa4b 	bl	8006980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ea:	f000 fd71 	bl	8006fd0 <xTaskResumeAll>
 80064ee:	e77a      	b.n	80063e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f2:	f000 fa45 	bl	8006980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064f6:	f000 fd6b 	bl	8006fd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fc:	f000 fa92 	bl	8006a24 <prvIsQueueEmpty>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	f43f af6f 	beq.w	80063e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006508:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800650a:	4618      	mov	r0, r3
 800650c:	3730      	adds	r7, #48	; 0x30
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08e      	sub	sp, #56	; 0x38
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800652a:	2300      	movs	r3, #0
 800652c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	623b      	str	r3, [r7, #32]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	61fb      	str	r3, [r7, #28]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006568:	f001 f9b4 	bl	80078d4 <xTaskGetSchedulerState>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d102      	bne.n	8006578 <xQueueSemaphoreTake+0x60>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <xQueueSemaphoreTake+0x64>
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <xQueueSemaphoreTake+0x66>
 800657c:	2300      	movs	r3, #0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	61bb      	str	r3, [r7, #24]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006598:	f002 f82c 	bl	80085f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d024      	beq.n	80065f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	1e5a      	subs	r2, r3, #1
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065b8:	f001 fb1a 	bl	8007bf0 <pvTaskIncrementMutexHeldCount>
 80065bc:	4602      	mov	r2, r0
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00f      	beq.n	80065ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065cc:	3310      	adds	r3, #16
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 ff50 	bl	8007474 <xTaskRemoveFromEventList>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065da:	4b54      	ldr	r3, [pc, #336]	; (800672c <xQueueSemaphoreTake+0x214>)
 80065dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065ea:	f002 f833 	bl	8008654 <vPortExitCritical>
				return pdPASS;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e097      	b.n	8006722 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d111      	bne.n	800661c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	617b      	str	r3, [r7, #20]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006614:	f002 f81e 	bl	8008654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006618:	2300      	movs	r3, #0
 800661a:	e082      	b.n	8006722 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006622:	f107 030c 	add.w	r3, r7, #12
 8006626:	4618      	mov	r0, r3
 8006628:	f000 ffea 	bl	8007600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006630:	f002 f810 	bl	8008654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006634:	f000 fcbe 	bl	8006fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006638:	f001 ffdc 	bl	80085f4 <vPortEnterCritical>
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006642:	b25b      	sxtb	r3, r3
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d103      	bne.n	8006652 <xQueueSemaphoreTake+0x13a>
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006658:	b25b      	sxtb	r3, r3
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d103      	bne.n	8006668 <xQueueSemaphoreTake+0x150>
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006668:	f001 fff4 	bl	8008654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800666c:	463a      	mov	r2, r7
 800666e:	f107 030c 	add.w	r3, r7, #12
 8006672:	4611      	mov	r1, r2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 ffd9 	bl	800762c <xTaskCheckForTimeOut>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d132      	bne.n	80066e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006682:	f000 f9cf 	bl	8006a24 <prvIsQueueEmpty>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d026      	beq.n	80066da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006694:	f001 ffae 	bl	80085f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f937 	bl	8007910 <xTaskPriorityInherit>
 80066a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80066a4:	f001 ffd6 	bl	8008654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	3324      	adds	r3, #36	; 0x24
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fe53 	bl	800735c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066b8:	f000 f962 	bl	8006980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066bc:	f000 fc88 	bl	8006fd0 <xTaskResumeAll>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f47f af68 	bne.w	8006598 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80066c8:	4b18      	ldr	r3, [pc, #96]	; (800672c <xQueueSemaphoreTake+0x214>)
 80066ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	e75e      	b.n	8006598 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80066da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066dc:	f000 f950 	bl	8006980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066e0:	f000 fc76 	bl	8006fd0 <xTaskResumeAll>
 80066e4:	e758      	b.n	8006598 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80066e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066e8:	f000 f94a 	bl	8006980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066ec:	f000 fc70 	bl	8006fd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066f2:	f000 f997 	bl	8006a24 <prvIsQueueEmpty>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f43f af4d 	beq.w	8006598 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00d      	beq.n	8006720 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006704:	f001 ff76 	bl	80085f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800670a:	f000 f891 	bl	8006830 <prvGetDisinheritPriorityAfterTimeout>
 800670e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006716:	4618      	mov	r0, r3
 8006718:	f001 f9d0 	bl	8007abc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800671c:	f001 ff9a 	bl	8008654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006722:	4618      	mov	r0, r3
 8006724:	3738      	adds	r7, #56	; 0x38
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	; 0x38
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	623b      	str	r3, [r7, #32]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d103      	bne.n	800676a <xQueueReceiveFromISR+0x3a>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <xQueueReceiveFromISR+0x3e>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <xQueueReceiveFromISR+0x40>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	61fb      	str	r3, [r7, #28]
}
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800678a:	f002 f815 	bl	80087b8 <vPortValidateInterruptPriority>
	__asm volatile
 800678e:	f3ef 8211 	mrs	r2, BASEPRI
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	61ba      	str	r2, [r7, #24]
 80067a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d02f      	beq.n	8006816 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c4:	f000 f8b6 	bl	8006934 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	1e5a      	subs	r2, r3, #1
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80067d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d112      	bne.n	8006800 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d016      	beq.n	8006810 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	3310      	adds	r3, #16
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fe44 	bl	8007474 <xTaskRemoveFromEventList>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00e      	beq.n	8006810 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e007      	b.n	8006810 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006804:	3301      	adds	r3, #1
 8006806:	b2db      	uxtb	r3, r3
 8006808:	b25a      	sxtb	r2, r3
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006810:	2301      	movs	r3, #1
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
 8006814:	e001      	b.n	800681a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006816:	2300      	movs	r3, #0
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f383 8811 	msr	BASEPRI, r3
}
 8006824:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006828:	4618      	mov	r0, r3
 800682a:	3738      	adds	r7, #56	; 0x38
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	d006      	beq.n	800684e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e001      	b.n	8006852 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006852:	68fb      	ldr	r3, [r7, #12]
	}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800686c:	2300      	movs	r3, #0
 800686e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10d      	bne.n	800689a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d14d      	bne.n	8006922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f8a8 	bl	80079e0 <xTaskPriorityDisinherit>
 8006890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	609a      	str	r2, [r3, #8]
 8006898:	e043      	b.n	8006922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d119      	bne.n	80068d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6858      	ldr	r0, [r3, #4]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	461a      	mov	r2, r3
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	f002 fc6d 	bl	800918a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	441a      	add	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d32b      	bcc.n	8006922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	605a      	str	r2, [r3, #4]
 80068d2:	e026      	b.n	8006922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	68d8      	ldr	r0, [r3, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	461a      	mov	r2, r3
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	f002 fc53 	bl	800918a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	425b      	negs	r3, r3
 80068ee:	441a      	add	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d207      	bcs.n	8006910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	425b      	negs	r3, r3
 800690a:	441a      	add	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d105      	bne.n	8006922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	3b01      	subs	r3, #1
 8006920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800692a:	697b      	ldr	r3, [r7, #20]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d018      	beq.n	8006978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	441a      	add	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	429a      	cmp	r2, r3
 800695e:	d303      	bcc.n	8006968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68d9      	ldr	r1, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	461a      	mov	r2, r3
 8006972:	6838      	ldr	r0, [r7, #0]
 8006974:	f002 fc09 	bl	800918a <memcpy>
	}
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006988:	f001 fe34 	bl	80085f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006994:	e011      	b.n	80069ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	2b00      	cmp	r3, #0
 800699c:	d012      	beq.n	80069c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3324      	adds	r3, #36	; 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fd66 	bl	8007474 <xTaskRemoveFromEventList>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069ae:	f000 fe9f 	bl	80076f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dce9      	bgt.n	8006996 <prvUnlockQueue+0x16>
 80069c2:	e000      	b.n	80069c6 <prvUnlockQueue+0x46>
					break;
 80069c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	22ff      	movs	r2, #255	; 0xff
 80069ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069ce:	f001 fe41 	bl	8008654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069d2:	f001 fe0f 	bl	80085f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069de:	e011      	b.n	8006a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d012      	beq.n	8006a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3310      	adds	r3, #16
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fd41 	bl	8007474 <xTaskRemoveFromEventList>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069f8:	f000 fe7a 	bl	80076f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dce9      	bgt.n	80069e0 <prvUnlockQueue+0x60>
 8006a0c:	e000      	b.n	8006a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	22ff      	movs	r2, #255	; 0xff
 8006a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a18:	f001 fe1c 	bl	8008654 <vPortExitCritical>
}
 8006a1c:	bf00      	nop
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a2c:	f001 fde2 	bl	80085f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e001      	b.n	8006a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a42:	f001 fe07 	bl	8008654 <vPortExitCritical>

	return xReturn;
 8006a46:	68fb      	ldr	r3, [r7, #12]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a58:	f001 fdcc 	bl	80085f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d102      	bne.n	8006a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	e001      	b.n	8006a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a72:	f001 fdef 	bl	8008654 <vPortExitCritical>

	return xReturn;
 8006a76:	68fb      	ldr	r3, [r7, #12]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	e014      	b.n	8006aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a90:	4a0f      	ldr	r2, [pc, #60]	; (8006ad0 <vQueueAddToRegistry+0x50>)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10b      	bne.n	8006ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a9c:	490c      	ldr	r1, [pc, #48]	; (8006ad0 <vQueueAddToRegistry+0x50>)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aa6:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <vQueueAddToRegistry+0x50>)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	4413      	add	r3, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ab2:	e006      	b.n	8006ac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b07      	cmp	r3, #7
 8006abe:	d9e7      	bls.n	8006a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	200008b0 	.word	0x200008b0

08006ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ae4:	f001 fd86 	bl	80085f4 <vPortEnterCritical>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d103      	bne.n	8006afe <vQueueWaitForMessageRestricted+0x2a>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d103      	bne.n	8006b14 <vQueueWaitForMessageRestricted+0x40>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b14:	f001 fd9e 	bl	8008654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	3324      	adds	r3, #36	; 0x24
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fc77 	bl	800741c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b2e:	6978      	ldr	r0, [r7, #20]
 8006b30:	f7ff ff26 	bl	8006980 <prvUnlockQueue>
	}
 8006b34:	bf00      	nop
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08e      	sub	sp, #56	; 0x38
 8006b40:	af04      	add	r7, sp, #16
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	623b      	str	r3, [r7, #32]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	61fb      	str	r3, [r7, #28]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b82:	235c      	movs	r3, #92	; 0x5c
 8006b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b5c      	cmp	r3, #92	; 0x5c
 8006b8a:	d00a      	beq.n	8006ba2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	61bb      	str	r3, [r7, #24]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01e      	beq.n	8006be8 <xTaskCreateStatic+0xac>
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01b      	beq.n	8006be8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9303      	str	r3, [sp, #12]
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	9302      	str	r3, [sp, #8]
 8006bca:	f107 0314 	add.w	r3, r7, #20
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f850 	bl	8006c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be2:	f000 f8dd 	bl	8006da0 <prvAddNewTaskToReadyList>
 8006be6:	e001      	b.n	8006bec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bec:	697b      	ldr	r3, [r7, #20]
	}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3728      	adds	r7, #40	; 0x28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b08c      	sub	sp, #48	; 0x30
 8006bfa:	af04      	add	r7, sp, #16
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fe14 	bl	8008838 <pvPortMalloc>
 8006c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00e      	beq.n	8006c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c18:	205c      	movs	r0, #92	; 0x5c
 8006c1a:	f001 fe0d 	bl	8008838 <pvPortMalloc>
 8006c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c2c:	e005      	b.n	8006c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c2e:	6978      	ldr	r0, [r7, #20]
 8006c30:	f001 fece 	bl	80089d0 <vPortFree>
 8006c34:	e001      	b.n	8006c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c48:	88fa      	ldrh	r2, [r7, #6]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9303      	str	r3, [sp, #12]
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	9302      	str	r3, [sp, #8]
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f80e 	bl	8006c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c64:	69f8      	ldr	r0, [r7, #28]
 8006c66:	f000 f89b 	bl	8006da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e002      	b.n	8006c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c70:	f04f 33ff 	mov.w	r3, #4294967295
 8006c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c76:	69bb      	ldr	r3, [r7, #24]
	}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	461a      	mov	r2, r3
 8006c98:	21a5      	movs	r1, #165	; 0xa5
 8006c9a:	f002 f9fb 	bl	8009094 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f023 0307 	bic.w	r3, r3, #7
 8006cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	617b      	str	r3, [r7, #20]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01f      	beq.n	8006d1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	e012      	b.n	8006d0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	7819      	ldrb	r1, [r3, #0]
 8006cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	3334      	adds	r3, #52	; 0x34
 8006cf4:	460a      	mov	r2, r1
 8006cf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	3301      	adds	r3, #1
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2b0f      	cmp	r3, #15
 8006d0e:	d9e9      	bls.n	8006ce4 <prvInitialiseNewTask+0x64>
 8006d10:	e000      	b.n	8006d14 <prvInitialiseNewTask+0x94>
			{
				break;
 8006d12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d1c:	e003      	b.n	8006d26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2b37      	cmp	r3, #55	; 0x37
 8006d2a:	d901      	bls.n	8006d30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d2c:	2337      	movs	r3, #55	; 0x37
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	2200      	movs	r2, #0
 8006d40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	3304      	adds	r3, #4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fee4 	bl	8005b14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	3318      	adds	r3, #24
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fe fedf 	bl	8005b14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	2200      	movs	r2, #0
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	69b8      	ldr	r0, [r7, #24]
 8006d80:	f001 fb0c 	bl	800839c <pxPortInitialiseStack>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d96:	bf00      	nop
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006da8:	f001 fc24 	bl	80085f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dac:	4b2d      	ldr	r3, [pc, #180]	; (8006e64 <prvAddNewTaskToReadyList+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	4a2c      	ldr	r2, [pc, #176]	; (8006e64 <prvAddNewTaskToReadyList+0xc4>)
 8006db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006db6:	4b2c      	ldr	r3, [pc, #176]	; (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dbe:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dc4:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <prvAddNewTaskToReadyList+0xc4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d110      	bne.n	8006dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dcc:	f000 fcb4 	bl	8007738 <prvInitialiseTaskLists>
 8006dd0:	e00d      	b.n	8006dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dd2:	4b26      	ldr	r3, [pc, #152]	; (8006e6c <prvAddNewTaskToReadyList+0xcc>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d802      	bhi.n	8006dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dee:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <prvAddNewTaskToReadyList+0xd0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3301      	adds	r3, #1
 8006df4:	4a1e      	ldr	r2, [pc, #120]	; (8006e70 <prvAddNewTaskToReadyList+0xd0>)
 8006df6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006df8:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <prvAddNewTaskToReadyList+0xd0>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e04:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <prvAddNewTaskToReadyList+0xd4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d903      	bls.n	8006e14 <prvAddNewTaskToReadyList+0x74>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <prvAddNewTaskToReadyList+0xd4>)
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <prvAddNewTaskToReadyList+0xd8>)
 8006e22:	441a      	add	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7fe fe7f 	bl	8005b2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e30:	f001 fc10 	bl	8008654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e34:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <prvAddNewTaskToReadyList+0xcc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00e      	beq.n	8006e5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <prvAddNewTaskToReadyList+0xc8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d207      	bcs.n	8006e5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <prvAddNewTaskToReadyList+0xdc>)
 8006e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000dc4 	.word	0x20000dc4
 8006e68:	200008f0 	.word	0x200008f0
 8006e6c:	20000dd0 	.word	0x20000dd0
 8006e70:	20000de0 	.word	0x20000de0
 8006e74:	20000dcc 	.word	0x20000dcc
 8006e78:	200008f4 	.word	0x200008f4
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d017      	beq.n	8006ec2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e92:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <vTaskDelay+0x60>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <vTaskDelay+0x30>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	60bb      	str	r3, [r7, #8]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006eb0:	f000 f880 	bl	8006fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 feae 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ebc:	f000 f888 	bl	8006fd0 <xTaskResumeAll>
 8006ec0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d107      	bne.n	8006ed8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ec8:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <vTaskDelay+0x64>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000dec 	.word	0x20000dec
 8006ee4:	e000ed04 	.word	0xe000ed04

08006ee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08a      	sub	sp, #40	; 0x28
 8006eec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ef6:	463a      	mov	r2, r7
 8006ef8:	1d39      	adds	r1, r7, #4
 8006efa:	f107 0308 	add.w	r3, r7, #8
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fb48 	bl	8005594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	9202      	str	r2, [sp, #8]
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	2300      	movs	r3, #0
 8006f14:	460a      	mov	r2, r1
 8006f16:	4921      	ldr	r1, [pc, #132]	; (8006f9c <vTaskStartScheduler+0xb4>)
 8006f18:	4821      	ldr	r0, [pc, #132]	; (8006fa0 <vTaskStartScheduler+0xb8>)
 8006f1a:	f7ff fe0f 	bl	8006b3c <xTaskCreateStatic>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4a20      	ldr	r2, [pc, #128]	; (8006fa4 <vTaskStartScheduler+0xbc>)
 8006f22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f24:	4b1f      	ldr	r3, [pc, #124]	; (8006fa4 <vTaskStartScheduler+0xbc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e001      	b.n	8006f36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d102      	bne.n	8006f42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f3c:	f000 fec0 	bl	8007cc0 <xTimerCreateTimerTask>
 8006f40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d116      	bne.n	8006f76 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	613b      	str	r3, [r7, #16]
}
 8006f5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f5c:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <vTaskStartScheduler+0xc0>)
 8006f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f64:	4b11      	ldr	r3, [pc, #68]	; (8006fac <vTaskStartScheduler+0xc4>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f6a:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <vTaskStartScheduler+0xc8>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f70:	f001 fa9e 	bl	80084b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f74:	e00e      	b.n	8006f94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d10a      	bne.n	8006f94 <vTaskStartScheduler+0xac>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60fb      	str	r3, [r7, #12]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <vTaskStartScheduler+0xaa>
}
 8006f94:	bf00      	nop
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	0800a6fc 	.word	0x0800a6fc
 8006fa0:	08007709 	.word	0x08007709
 8006fa4:	20000de8 	.word	0x20000de8
 8006fa8:	20000de4 	.word	0x20000de4
 8006fac:	20000dd0 	.word	0x20000dd0
 8006fb0:	20000dc8 	.word	0x20000dc8

08006fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <vTaskSuspendAll+0x18>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	4a03      	ldr	r2, [pc, #12]	; (8006fcc <vTaskSuspendAll+0x18>)
 8006fc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fc2:	bf00      	nop
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20000dec 	.word	0x20000dec

08006fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fde:	4b42      	ldr	r3, [pc, #264]	; (80070e8 <xTaskResumeAll+0x118>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <xTaskResumeAll+0x2c>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	603b      	str	r3, [r7, #0]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ffc:	f001 fafa 	bl	80085f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007000:	4b39      	ldr	r3, [pc, #228]	; (80070e8 <xTaskResumeAll+0x118>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3b01      	subs	r3, #1
 8007006:	4a38      	ldr	r2, [pc, #224]	; (80070e8 <xTaskResumeAll+0x118>)
 8007008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <xTaskResumeAll+0x118>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d162      	bne.n	80070d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007012:	4b36      	ldr	r3, [pc, #216]	; (80070ec <xTaskResumeAll+0x11c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d05e      	beq.n	80070d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800701a:	e02f      	b.n	800707c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701c:	4b34      	ldr	r3, [pc, #208]	; (80070f0 <xTaskResumeAll+0x120>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3318      	adds	r3, #24
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe fddd 	bl	8005be8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3304      	adds	r3, #4
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe fdd8 	bl	8005be8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703c:	4b2d      	ldr	r3, [pc, #180]	; (80070f4 <xTaskResumeAll+0x124>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d903      	bls.n	800704c <xTaskResumeAll+0x7c>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	4a2a      	ldr	r2, [pc, #168]	; (80070f4 <xTaskResumeAll+0x124>)
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4a27      	ldr	r2, [pc, #156]	; (80070f8 <xTaskResumeAll+0x128>)
 800705a:	441a      	add	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3304      	adds	r3, #4
 8007060:	4619      	mov	r1, r3
 8007062:	4610      	mov	r0, r2
 8007064:	f7fe fd63 	bl	8005b2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <xTaskResumeAll+0x12c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007076:	4b22      	ldr	r3, [pc, #136]	; (8007100 <xTaskResumeAll+0x130>)
 8007078:	2201      	movs	r2, #1
 800707a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800707c:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <xTaskResumeAll+0x120>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1cb      	bne.n	800701c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800708a:	f000 fbf3 	bl	8007874 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800708e:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <xTaskResumeAll+0x134>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d010      	beq.n	80070bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800709a:	f000 f847 	bl	800712c <xTaskIncrementTick>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070a4:	4b16      	ldr	r3, [pc, #88]	; (8007100 <xTaskResumeAll+0x130>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f1      	bne.n	800709a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80070b6:	4b13      	ldr	r3, [pc, #76]	; (8007104 <xTaskResumeAll+0x134>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070bc:	4b10      	ldr	r3, [pc, #64]	; (8007100 <xTaskResumeAll+0x130>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070c8:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <xTaskResumeAll+0x138>)
 80070ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070d8:	f001 fabc 	bl	8008654 <vPortExitCritical>

	return xAlreadyYielded;
 80070dc:	68bb      	ldr	r3, [r7, #8]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000dec 	.word	0x20000dec
 80070ec:	20000dc4 	.word	0x20000dc4
 80070f0:	20000d84 	.word	0x20000d84
 80070f4:	20000dcc 	.word	0x20000dcc
 80070f8:	200008f4 	.word	0x200008f4
 80070fc:	200008f0 	.word	0x200008f0
 8007100:	20000dd8 	.word	0x20000dd8
 8007104:	20000dd4 	.word	0x20000dd4
 8007108:	e000ed04 	.word	0xe000ed04

0800710c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <xTaskGetTickCount+0x1c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007118:	687b      	ldr	r3, [r7, #4]
}
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000dc8 	.word	0x20000dc8

0800712c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007136:	4b4f      	ldr	r3, [pc, #316]	; (8007274 <xTaskIncrementTick+0x148>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f040 808f 	bne.w	800725e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007140:	4b4d      	ldr	r3, [pc, #308]	; (8007278 <xTaskIncrementTick+0x14c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007148:	4a4b      	ldr	r2, [pc, #300]	; (8007278 <xTaskIncrementTick+0x14c>)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d120      	bne.n	8007196 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007154:	4b49      	ldr	r3, [pc, #292]	; (800727c <xTaskIncrementTick+0x150>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00a      	beq.n	8007174 <xTaskIncrementTick+0x48>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	603b      	str	r3, [r7, #0]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <xTaskIncrementTick+0x46>
 8007174:	4b41      	ldr	r3, [pc, #260]	; (800727c <xTaskIncrementTick+0x150>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	4b41      	ldr	r3, [pc, #260]	; (8007280 <xTaskIncrementTick+0x154>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3f      	ldr	r2, [pc, #252]	; (800727c <xTaskIncrementTick+0x150>)
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	4a3f      	ldr	r2, [pc, #252]	; (8007280 <xTaskIncrementTick+0x154>)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	4b3e      	ldr	r3, [pc, #248]	; (8007284 <xTaskIncrementTick+0x158>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3301      	adds	r3, #1
 800718e:	4a3d      	ldr	r2, [pc, #244]	; (8007284 <xTaskIncrementTick+0x158>)
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	f000 fb6f 	bl	8007874 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007196:	4b3c      	ldr	r3, [pc, #240]	; (8007288 <xTaskIncrementTick+0x15c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	429a      	cmp	r2, r3
 800719e:	d349      	bcc.n	8007234 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a0:	4b36      	ldr	r3, [pc, #216]	; (800727c <xTaskIncrementTick+0x150>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071aa:	4b37      	ldr	r3, [pc, #220]	; (8007288 <xTaskIncrementTick+0x15c>)
 80071ac:	f04f 32ff 	mov.w	r2, #4294967295
 80071b0:	601a      	str	r2, [r3, #0]
					break;
 80071b2:	e03f      	b.n	8007234 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b4:	4b31      	ldr	r3, [pc, #196]	; (800727c <xTaskIncrementTick+0x150>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d203      	bcs.n	80071d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071cc:	4a2e      	ldr	r2, [pc, #184]	; (8007288 <xTaskIncrementTick+0x15c>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071d2:	e02f      	b.n	8007234 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fd05 	bl	8005be8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	3318      	adds	r3, #24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fcfc 	bl	8005be8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	4b25      	ldr	r3, [pc, #148]	; (800728c <xTaskIncrementTick+0x160>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d903      	bls.n	8007204 <xTaskIncrementTick+0xd8>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a22      	ldr	r2, [pc, #136]	; (800728c <xTaskIncrementTick+0x160>)
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4a1f      	ldr	r2, [pc, #124]	; (8007290 <xTaskIncrementTick+0x164>)
 8007212:	441a      	add	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f7fe fc87 	bl	8005b2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007224:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <xTaskIncrementTick+0x168>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	429a      	cmp	r2, r3
 800722c:	d3b8      	bcc.n	80071a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007232:	e7b5      	b.n	80071a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007234:	4b17      	ldr	r3, [pc, #92]	; (8007294 <xTaskIncrementTick+0x168>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723a:	4915      	ldr	r1, [pc, #84]	; (8007290 <xTaskIncrementTick+0x164>)
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d901      	bls.n	8007250 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007250:	4b11      	ldr	r3, [pc, #68]	; (8007298 <xTaskIncrementTick+0x16c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	e004      	b.n	8007268 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <xTaskIncrementTick+0x170>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	4a0d      	ldr	r2, [pc, #52]	; (800729c <xTaskIncrementTick+0x170>)
 8007266:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007268:	697b      	ldr	r3, [r7, #20]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000dec 	.word	0x20000dec
 8007278:	20000dc8 	.word	0x20000dc8
 800727c:	20000d7c 	.word	0x20000d7c
 8007280:	20000d80 	.word	0x20000d80
 8007284:	20000ddc 	.word	0x20000ddc
 8007288:	20000de4 	.word	0x20000de4
 800728c:	20000dcc 	.word	0x20000dcc
 8007290:	200008f4 	.word	0x200008f4
 8007294:	200008f0 	.word	0x200008f0
 8007298:	20000dd8 	.word	0x20000dd8
 800729c:	20000dd4 	.word	0x20000dd4

080072a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072a6:	4b28      	ldr	r3, [pc, #160]	; (8007348 <vTaskSwitchContext+0xa8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072ae:	4b27      	ldr	r3, [pc, #156]	; (800734c <vTaskSwitchContext+0xac>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072b4:	e041      	b.n	800733a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80072b6:	4b25      	ldr	r3, [pc, #148]	; (800734c <vTaskSwitchContext+0xac>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072bc:	4b24      	ldr	r3, [pc, #144]	; (8007350 <vTaskSwitchContext+0xb0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e010      	b.n	80072e6 <vTaskSwitchContext+0x46>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	607b      	str	r3, [r7, #4]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vTaskSwitchContext+0x3e>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	491b      	ldr	r1, [pc, #108]	; (8007354 <vTaskSwitchContext+0xb4>)
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0e4      	beq.n	80072c4 <vTaskSwitchContext+0x24>
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4a13      	ldr	r2, [pc, #76]	; (8007354 <vTaskSwitchContext+0xb4>)
 8007306:	4413      	add	r3, r2
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	605a      	str	r2, [r3, #4]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	3308      	adds	r3, #8
 800731c:	429a      	cmp	r2, r3
 800731e:	d104      	bne.n	800732a <vTaskSwitchContext+0x8a>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	605a      	str	r2, [r3, #4]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	4a09      	ldr	r2, [pc, #36]	; (8007358 <vTaskSwitchContext+0xb8>)
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	4a06      	ldr	r2, [pc, #24]	; (8007350 <vTaskSwitchContext+0xb0>)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6013      	str	r3, [r2, #0]
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20000dec 	.word	0x20000dec
 800734c:	20000dd8 	.word	0x20000dd8
 8007350:	20000dcc 	.word	0x20000dcc
 8007354:	200008f4 	.word	0x200008f4
 8007358:	200008f0 	.word	0x200008f0

0800735c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	60fb      	str	r3, [r7, #12]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <vTaskPlaceOnEventList+0x44>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3318      	adds	r3, #24
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fe fbf3 	bl	8005b76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007390:	2101      	movs	r1, #1
 8007392:	6838      	ldr	r0, [r7, #0]
 8007394:	f000 fc40 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	200008f0 	.word	0x200008f0

080073a4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	617b      	str	r3, [r7, #20]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80073cc:	4b11      	ldr	r3, [pc, #68]	; (8007414 <vTaskPlaceOnUnorderedEventList+0x70>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	613b      	str	r3, [r7, #16]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <vTaskPlaceOnUnorderedEventList+0x74>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80073f4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073f6:	4b08      	ldr	r3, [pc, #32]	; (8007418 <vTaskPlaceOnUnorderedEventList+0x74>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3318      	adds	r3, #24
 80073fc:	4619      	mov	r1, r3
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f7fe fb95 	bl	8005b2e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007404:	2101      	movs	r1, #1
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc06 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
}
 800740c:	bf00      	nop
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000dec 	.word	0x20000dec
 8007418:	200008f0 	.word	0x200008f0

0800741c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	617b      	str	r3, [r7, #20]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007444:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <vTaskPlaceOnEventListRestricted+0x54>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3318      	adds	r3, #24
 800744a:	4619      	mov	r1, r3
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7fe fb6e 	bl	8005b2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007458:	f04f 33ff 	mov.w	r3, #4294967295
 800745c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	68b8      	ldr	r0, [r7, #8]
 8007462:	f000 fbd9 	bl	8007c18 <prvAddCurrentTaskToDelayedList>
	}
 8007466:	bf00      	nop
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	200008f0 	.word	0x200008f0

08007474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60fb      	str	r3, [r7, #12]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	3318      	adds	r3, #24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe fb9f 	bl	8005be8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074aa:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <xTaskRemoveFromEventList+0xb0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d11d      	bne.n	80074ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fb96 	bl	8005be8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <xTaskRemoveFromEventList+0xb4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d903      	bls.n	80074d0 <xTaskRemoveFromEventList+0x5c>
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a16      	ldr	r2, [pc, #88]	; (8007528 <xTaskRemoveFromEventList+0xb4>)
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4a13      	ldr	r2, [pc, #76]	; (800752c <xTaskRemoveFromEventList+0xb8>)
 80074de:	441a      	add	r2, r3
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fe fb21 	bl	8005b2e <vListInsertEnd>
 80074ec:	e005      	b.n	80074fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	3318      	adds	r3, #24
 80074f2:	4619      	mov	r1, r3
 80074f4:	480e      	ldr	r0, [pc, #56]	; (8007530 <xTaskRemoveFromEventList+0xbc>)
 80074f6:	f7fe fb1a 	bl	8005b2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <xTaskRemoveFromEventList+0xc0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	429a      	cmp	r2, r3
 8007506:	d905      	bls.n	8007514 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <xTaskRemoveFromEventList+0xc4>)
 800750e:	2201      	movs	r2, #1
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e001      	b.n	8007518 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007518:	697b      	ldr	r3, [r7, #20]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000dec 	.word	0x20000dec
 8007528:	20000dcc 	.word	0x20000dcc
 800752c:	200008f4 	.word	0x200008f4
 8007530:	20000d84 	.word	0x20000d84
 8007534:	200008f0 	.word	0x200008f0
 8007538:	20000dd8 	.word	0x20000dd8

0800753c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007546:	4b29      	ldr	r3, [pc, #164]	; (80075ec <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	613b      	str	r3, [r7, #16]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	60fb      	str	r3, [r7, #12]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7fe fb29 	bl	8005be8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	3304      	adds	r3, #4
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fb24 	bl	8005be8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a4:	4b12      	ldr	r3, [pc, #72]	; (80075f0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d903      	bls.n	80075b4 <vTaskRemoveFromUnorderedEventList+0x78>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	4a0f      	ldr	r2, [pc, #60]	; (80075f0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4a0c      	ldr	r2, [pc, #48]	; (80075f4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80075c2:	441a      	add	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f7fe faaf 	bl	8005b2e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	429a      	cmp	r2, r3
 80075dc:	d902      	bls.n	80075e4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <vTaskRemoveFromUnorderedEventList+0xc0>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	601a      	str	r2, [r3, #0]
	}
}
 80075e4:	bf00      	nop
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000dec 	.word	0x20000dec
 80075f0:	20000dcc 	.word	0x20000dcc
 80075f4:	200008f4 	.word	0x200008f4
 80075f8:	200008f0 	.word	0x200008f0
 80075fc:	20000dd8 	.word	0x20000dd8

08007600 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <vTaskInternalSetTimeOutState+0x24>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <vTaskInternalSetTimeOutState+0x28>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	605a      	str	r2, [r3, #4]
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	20000ddc 	.word	0x20000ddc
 8007628:	20000dc8 	.word	0x20000dc8

0800762c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	613b      	str	r3, [r7, #16]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60fb      	str	r3, [r7, #12]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800766e:	f000 ffc1 	bl	80085f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007672:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <xTaskCheckForTimeOut+0xbc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d102      	bne.n	8007692 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	e023      	b.n	80076da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <xTaskCheckForTimeOut+0xc0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d007      	beq.n	80076ae <xTaskCheckForTimeOut+0x82>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d302      	bcc.n	80076ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	61fb      	str	r3, [r7, #28]
 80076ac:	e015      	b.n	80076da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d20b      	bcs.n	80076d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff9b 	bl	8007600 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	e004      	b.n	80076da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076d6:	2301      	movs	r3, #1
 80076d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076da:	f000 ffbb 	bl	8008654 <vPortExitCritical>

	return xReturn;
 80076de:	69fb      	ldr	r3, [r7, #28]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000dc8 	.word	0x20000dc8
 80076ec:	20000ddc 	.word	0x20000ddc

080076f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076f4:	4b03      	ldr	r3, [pc, #12]	; (8007704 <vTaskMissedYield+0x14>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
}
 80076fa:	bf00      	nop
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	20000dd8 	.word	0x20000dd8

08007708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007710:	f000 f852 	bl	80077b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007714:	4b06      	ldr	r3, [pc, #24]	; (8007730 <prvIdleTask+0x28>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d9f9      	bls.n	8007710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <prvIdleTask+0x2c>)
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800772c:	e7f0      	b.n	8007710 <prvIdleTask+0x8>
 800772e:	bf00      	nop
 8007730:	200008f4 	.word	0x200008f4
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800773e:	2300      	movs	r3, #0
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	e00c      	b.n	800775e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4a12      	ldr	r2, [pc, #72]	; (8007798 <prvInitialiseTaskLists+0x60>)
 8007750:	4413      	add	r3, r2
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe f9be 	bl	8005ad4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3301      	adds	r3, #1
 800775c:	607b      	str	r3, [r7, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b37      	cmp	r3, #55	; 0x37
 8007762:	d9ef      	bls.n	8007744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007764:	480d      	ldr	r0, [pc, #52]	; (800779c <prvInitialiseTaskLists+0x64>)
 8007766:	f7fe f9b5 	bl	8005ad4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800776a:	480d      	ldr	r0, [pc, #52]	; (80077a0 <prvInitialiseTaskLists+0x68>)
 800776c:	f7fe f9b2 	bl	8005ad4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007770:	480c      	ldr	r0, [pc, #48]	; (80077a4 <prvInitialiseTaskLists+0x6c>)
 8007772:	f7fe f9af 	bl	8005ad4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007776:	480c      	ldr	r0, [pc, #48]	; (80077a8 <prvInitialiseTaskLists+0x70>)
 8007778:	f7fe f9ac 	bl	8005ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800777c:	480b      	ldr	r0, [pc, #44]	; (80077ac <prvInitialiseTaskLists+0x74>)
 800777e:	f7fe f9a9 	bl	8005ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <prvInitialiseTaskLists+0x78>)
 8007784:	4a05      	ldr	r2, [pc, #20]	; (800779c <prvInitialiseTaskLists+0x64>)
 8007786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvInitialiseTaskLists+0x7c>)
 800778a:	4a05      	ldr	r2, [pc, #20]	; (80077a0 <prvInitialiseTaskLists+0x68>)
 800778c:	601a      	str	r2, [r3, #0]
}
 800778e:	bf00      	nop
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	200008f4 	.word	0x200008f4
 800779c:	20000d54 	.word	0x20000d54
 80077a0:	20000d68 	.word	0x20000d68
 80077a4:	20000d84 	.word	0x20000d84
 80077a8:	20000d98 	.word	0x20000d98
 80077ac:	20000db0 	.word	0x20000db0
 80077b0:	20000d7c 	.word	0x20000d7c
 80077b4:	20000d80 	.word	0x20000d80

080077b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077be:	e019      	b.n	80077f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077c0:	f000 ff18 	bl	80085f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c4:	4b10      	ldr	r3, [pc, #64]	; (8007808 <prvCheckTasksWaitingTermination+0x50>)
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fa09 	bl	8005be8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077d6:	4b0d      	ldr	r3, [pc, #52]	; (800780c <prvCheckTasksWaitingTermination+0x54>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3b01      	subs	r3, #1
 80077dc:	4a0b      	ldr	r2, [pc, #44]	; (800780c <prvCheckTasksWaitingTermination+0x54>)
 80077de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077e0:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <prvCheckTasksWaitingTermination+0x58>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	4a0a      	ldr	r2, [pc, #40]	; (8007810 <prvCheckTasksWaitingTermination+0x58>)
 80077e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077ea:	f000 ff33 	bl	8008654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f810 	bl	8007814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077f4:	4b06      	ldr	r3, [pc, #24]	; (8007810 <prvCheckTasksWaitingTermination+0x58>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e1      	bne.n	80077c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000d98 	.word	0x20000d98
 800780c:	20000dc4 	.word	0x20000dc4
 8007810:	20000dac 	.word	0x20000dac

08007814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f8d0 	bl	80089d0 <vPortFree>
				vPortFree( pxTCB );
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 f8cd 	bl	80089d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007836:	e018      	b.n	800786a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800783e:	2b01      	cmp	r3, #1
 8007840:	d103      	bne.n	800784a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 f8c4 	bl	80089d0 <vPortFree>
	}
 8007848:	e00f      	b.n	800786a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007850:	2b02      	cmp	r3, #2
 8007852:	d00a      	beq.n	800786a <prvDeleteTCB+0x56>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	60fb      	str	r3, [r7, #12]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <prvDeleteTCB+0x54>
	}
 800786a:	bf00      	nop
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <prvResetNextTaskUnblockTime+0x38>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007886:	f04f 32ff 	mov.w	r2, #4294967295
 800788a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800788c:	e008      	b.n	80078a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788e:	4b07      	ldr	r3, [pc, #28]	; (80078ac <prvResetNextTaskUnblockTime+0x38>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	4a04      	ldr	r2, [pc, #16]	; (80078b0 <prvResetNextTaskUnblockTime+0x3c>)
 800789e:	6013      	str	r3, [r2, #0]
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000d7c 	.word	0x20000d7c
 80078b0:	20000de4 	.word	0x20000de4

080078b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80078ba:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <xTaskGetCurrentTaskHandle+0x1c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	607b      	str	r3, [r7, #4]

		return xReturn;
 80078c0:	687b      	ldr	r3, [r7, #4]
	}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	200008f0 	.word	0x200008f0

080078d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078da:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <xTaskGetSchedulerState+0x34>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078e2:	2301      	movs	r3, #1
 80078e4:	607b      	str	r3, [r7, #4]
 80078e6:	e008      	b.n	80078fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e8:	4b08      	ldr	r3, [pc, #32]	; (800790c <xTaskGetSchedulerState+0x38>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078f0:	2302      	movs	r3, #2
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	e001      	b.n	80078fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078f6:	2300      	movs	r3, #0
 80078f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078fa:	687b      	ldr	r3, [r7, #4]
	}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	20000dd0 	.word	0x20000dd0
 800790c:	20000dec 	.word	0x20000dec

08007910 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d051      	beq.n	80079ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792a:	4b2a      	ldr	r3, [pc, #168]	; (80079d4 <xTaskPriorityInherit+0xc4>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	429a      	cmp	r2, r3
 8007932:	d241      	bcs.n	80079b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	db06      	blt.n	800794a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793c:	4b25      	ldr	r3, [pc, #148]	; (80079d4 <xTaskPriorityInherit+0xc4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007942:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6959      	ldr	r1, [r3, #20]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <xTaskPriorityInherit+0xc8>)
 800795c:	4413      	add	r3, r2
 800795e:	4299      	cmp	r1, r3
 8007960:	d122      	bne.n	80079a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3304      	adds	r3, #4
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe f93e 	bl	8005be8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800796c:	4b19      	ldr	r3, [pc, #100]	; (80079d4 <xTaskPriorityInherit+0xc4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	4b18      	ldr	r3, [pc, #96]	; (80079dc <xTaskPriorityInherit+0xcc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d903      	bls.n	800798a <xTaskPriorityInherit+0x7a>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	4a15      	ldr	r2, [pc, #84]	; (80079dc <xTaskPriorityInherit+0xcc>)
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4a10      	ldr	r2, [pc, #64]	; (80079d8 <xTaskPriorityInherit+0xc8>)
 8007998:	441a      	add	r2, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	3304      	adds	r3, #4
 800799e:	4619      	mov	r1, r3
 80079a0:	4610      	mov	r0, r2
 80079a2:	f7fe f8c4 	bl	8005b2e <vListInsertEnd>
 80079a6:	e004      	b.n	80079b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <xTaskPriorityInherit+0xc4>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	e008      	b.n	80079ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <xTaskPriorityInherit+0xc4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d201      	bcs.n	80079ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079c6:	2301      	movs	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079ca:	68fb      	ldr	r3, [r7, #12]
	}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	200008f0 	.word	0x200008f0
 80079d8:	200008f4 	.word	0x200008f4
 80079dc:	20000dcc 	.word	0x20000dcc

080079e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079ec:	2300      	movs	r3, #0
 80079ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d056      	beq.n	8007aa4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079f6:	4b2e      	ldr	r3, [pc, #184]	; (8007ab0 <xTaskPriorityDisinherit+0xd0>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d00a      	beq.n	8007a16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	60bb      	str	r3, [r7, #8]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	1e5a      	subs	r2, r3, #1
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d02c      	beq.n	8007aa4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d128      	bne.n	8007aa4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe f8c6 	bl	8005be8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <xTaskPriorityDisinherit+0xd4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d903      	bls.n	8007a84 <xTaskPriorityDisinherit+0xa4>
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	4a0c      	ldr	r2, [pc, #48]	; (8007ab4 <xTaskPriorityDisinherit+0xd4>)
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4a09      	ldr	r2, [pc, #36]	; (8007ab8 <xTaskPriorityDisinherit+0xd8>)
 8007a92:	441a      	add	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	3304      	adds	r3, #4
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	f7fe f847 	bl	8005b2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007aa4:	697b      	ldr	r3, [r7, #20]
	}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	200008f0 	.word	0x200008f0
 8007ab4:	20000dcc 	.word	0x20000dcc
 8007ab8:	200008f4 	.word	0x200008f4

08007abc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d06a      	beq.n	8007baa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	60fb      	str	r3, [r7, #12]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d902      	bls.n	8007b02 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	61fb      	str	r3, [r7, #28]
 8007b00:	e002      	b.n	8007b08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d04b      	beq.n	8007baa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d146      	bne.n	8007baa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b1c:	4b25      	ldr	r3, [pc, #148]	; (8007bb4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d10a      	bne.n	8007b3c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	60bb      	str	r3, [r7, #8]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	db04      	blt.n	8007b5a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	6959      	ldr	r1, [r3, #20]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4a13      	ldr	r2, [pc, #76]	; (8007bb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b6a:	4413      	add	r3, r2
 8007b6c:	4299      	cmp	r1, r3
 8007b6e:	d11c      	bne.n	8007baa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe f837 	bl	8005be8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d903      	bls.n	8007b8e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8a:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4a07      	ldr	r2, [pc, #28]	; (8007bb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b9c:	441a      	add	r2, r3
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	f7fd ffc2 	bl	8005b2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007baa:	bf00      	nop
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200008f0 	.word	0x200008f0
 8007bb8:	200008f4 	.word	0x200008f4
 8007bbc:	20000dcc 	.word	0x20000dcc

08007bc0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <uxTaskResetEventItemValue+0x2c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bce:	4b07      	ldr	r3, [pc, #28]	; (8007bec <uxTaskResetEventItemValue+0x2c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <uxTaskResetEventItemValue+0x2c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007bdc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007bde:	687b      	ldr	r3, [r7, #4]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	200008f0 	.word	0x200008f0

08007bf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bf4:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bfc:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c02:	3201      	adds	r2, #1
 8007c04:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007c06:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c08:	681b      	ldr	r3, [r3, #0]
	}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	200008f0 	.word	0x200008f0

08007c18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c22:	4b21      	ldr	r3, [pc, #132]	; (8007ca8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c28:	4b20      	ldr	r3, [pc, #128]	; (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fd ffda 	bl	8005be8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3a:	d10a      	bne.n	8007c52 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c42:	4b1a      	ldr	r3, [pc, #104]	; (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4819      	ldr	r0, [pc, #100]	; (8007cb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c4c:	f7fd ff6f 	bl	8005b2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c50:	e026      	b.n	8007ca0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c5a:	4b14      	ldr	r3, [pc, #80]	; (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d209      	bcs.n	8007c7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c6a:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	; (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3304      	adds	r3, #4
 8007c74:	4619      	mov	r1, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	f7fd ff7d 	bl	8005b76 <vListInsert>
}
 8007c7c:	e010      	b.n	8007ca0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c7e:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <prvAddCurrentTaskToDelayedList+0x94>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3304      	adds	r3, #4
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7fd ff73 	bl	8005b76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c90:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d202      	bcs.n	8007ca0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c9a:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6013      	str	r3, [r2, #0]
}
 8007ca0:	bf00      	nop
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20000dc8 	.word	0x20000dc8
 8007cac:	200008f0 	.word	0x200008f0
 8007cb0:	20000db0 	.word	0x20000db0
 8007cb4:	20000d80 	.word	0x20000d80
 8007cb8:	20000d7c 	.word	0x20000d7c
 8007cbc:	20000de4 	.word	0x20000de4

08007cc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cca:	f000 fb07 	bl	80082dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cce:	4b1c      	ldr	r3, [pc, #112]	; (8007d40 <xTimerCreateTimerTask+0x80>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d021      	beq.n	8007d1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cde:	1d3a      	adds	r2, r7, #4
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	f107 030c 	add.w	r3, r7, #12
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fd fc6d 	bl	80055c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	9202      	str	r2, [sp, #8]
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	460a      	mov	r2, r1
 8007d00:	4910      	ldr	r1, [pc, #64]	; (8007d44 <xTimerCreateTimerTask+0x84>)
 8007d02:	4811      	ldr	r0, [pc, #68]	; (8007d48 <xTimerCreateTimerTask+0x88>)
 8007d04:	f7fe ff1a 	bl	8006b3c <xTaskCreateStatic>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <xTimerCreateTimerTask+0x8c>)
 8007d0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <xTimerCreateTimerTask+0x8c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d16:	2301      	movs	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	613b      	str	r3, [r7, #16]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d36:	697b      	ldr	r3, [r7, #20]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20000e20 	.word	0x20000e20
 8007d44:	0800a704 	.word	0x0800a704
 8007d48:	08007e85 	.word	0x08007e85
 8007d4c:	20000e24 	.word	0x20000e24

08007d50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	623b      	str	r3, [r7, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d7e:	4b1a      	ldr	r3, [pc, #104]	; (8007de8 <xTimerGenericCommand+0x98>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d02a      	beq.n	8007ddc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	dc18      	bgt.n	8007dca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d98:	f7ff fd9c 	bl	80078d4 <xTaskGetSchedulerState>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d109      	bne.n	8007db6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007da2:	4b11      	ldr	r3, [pc, #68]	; (8007de8 <xTimerGenericCommand+0x98>)
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	f107 0110 	add.w	r1, r7, #16
 8007daa:	2300      	movs	r3, #0
 8007dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dae:	f7fe f939 	bl	8006024 <xQueueGenericSend>
 8007db2:	6278      	str	r0, [r7, #36]	; 0x24
 8007db4:	e012      	b.n	8007ddc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <xTimerGenericCommand+0x98>)
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	f107 0110 	add.w	r1, r7, #16
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f7fe f92f 	bl	8006024 <xQueueGenericSend>
 8007dc6:	6278      	str	r0, [r7, #36]	; 0x24
 8007dc8:	e008      	b.n	8007ddc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <xTimerGenericCommand+0x98>)
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	f107 0110 	add.w	r1, r7, #16
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	f7fe fa23 	bl	8006220 <xQueueGenericSendFromISR>
 8007dda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3728      	adds	r7, #40	; 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20000e20 	.word	0x20000e20

08007dec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df6:	4b22      	ldr	r3, [pc, #136]	; (8007e80 <prvProcessExpiredTimer+0x94>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fd feef 	bl	8005be8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d022      	beq.n	8007e5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	699a      	ldr	r2, [r3, #24]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	18d1      	adds	r1, r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	6978      	ldr	r0, [r7, #20]
 8007e26:	f000 f8d1 	bl	8007fcc <prvInsertTimerInActiveList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01f      	beq.n	8007e70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e30:	2300      	movs	r3, #0
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	2300      	movs	r3, #0
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	6978      	ldr	r0, [r7, #20]
 8007e3c:	f7ff ff88 	bl	8007d50 <xTimerGenericCommand>
 8007e40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d113      	bne.n	8007e70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60fb      	str	r3, [r7, #12]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	6978      	ldr	r0, [r7, #20]
 8007e76:	4798      	blx	r3
}
 8007e78:	bf00      	nop
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000e18 	.word	0x20000e18

08007e84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 f857 	bl	8007f44 <prvGetNextExpireTime>
 8007e96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 f803 	bl	8007ea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ea2:	f000 f8d5 	bl	8008050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ea6:	e7f1      	b.n	8007e8c <prvTimerTask+0x8>

08007ea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007eb2:	f7ff f87f 	bl	8006fb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eb6:	f107 0308 	add.w	r3, r7, #8
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 f866 	bl	8007f8c <prvSampleTimeNow>
 8007ec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d130      	bne.n	8007f2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10a      	bne.n	8007ee4 <prvProcessTimerOrBlockTask+0x3c>
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d806      	bhi.n	8007ee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ed6:	f7ff f87b 	bl	8006fd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007eda:	68f9      	ldr	r1, [r7, #12]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff ff85 	bl	8007dec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ee2:	e024      	b.n	8007f2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007eea:	4b13      	ldr	r3, [pc, #76]	; (8007f38 <prvProcessTimerOrBlockTask+0x90>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <prvProcessTimerOrBlockTask+0x50>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e000      	b.n	8007efa <prvProcessTimerOrBlockTask+0x52>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007efc:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <prvProcessTimerOrBlockTask+0x94>)
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	f7fe fde3 	bl	8006ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f0e:	f7ff f85f 	bl	8006fd0 <xTaskResumeAll>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10a      	bne.n	8007f2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f18:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <prvProcessTimerOrBlockTask+0x98>)
 8007f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	f3bf 8f6f 	isb	sy
}
 8007f28:	e001      	b.n	8007f2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f2a:	f7ff f851 	bl	8006fd0 <xTaskResumeAll>
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000e1c 	.word	0x20000e1c
 8007f3c:	20000e20 	.word	0x20000e20
 8007f40:	e000ed04 	.word	0xe000ed04

08007f44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <prvGetNextExpireTime+0x44>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <prvGetNextExpireTime+0x16>
 8007f56:	2201      	movs	r2, #1
 8007f58:	e000      	b.n	8007f5c <prvGetNextExpireTime+0x18>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d105      	bne.n	8007f74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f68:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <prvGetNextExpireTime+0x44>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	e001      	b.n	8007f78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f78:	68fb      	ldr	r3, [r7, #12]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	20000e18 	.word	0x20000e18

08007f8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f94:	f7ff f8ba 	bl	800710c <xTaskGetTickCount>
 8007f98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <prvSampleTimeNow+0x3c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d205      	bcs.n	8007fb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fa4:	f000 f936 	bl	8008214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	e002      	b.n	8007fb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007fb6:	4a04      	ldr	r2, [pc, #16]	; (8007fc8 <prvSampleTimeNow+0x3c>)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000e28 	.word	0x20000e28

08007fcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d812      	bhi.n	8008018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	1ad2      	subs	r2, r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d302      	bcc.n	8008006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008000:	2301      	movs	r3, #1
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	e01b      	b.n	800803e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008006:	4b10      	ldr	r3, [pc, #64]	; (8008048 <prvInsertTimerInActiveList+0x7c>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3304      	adds	r3, #4
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f7fd fdb0 	bl	8005b76 <vListInsert>
 8008016:	e012      	b.n	800803e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d206      	bcs.n	800802e <prvInsertTimerInActiveList+0x62>
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d302      	bcc.n	800802e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008028:	2301      	movs	r3, #1
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	e007      	b.n	800803e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800802e:	4b07      	ldr	r3, [pc, #28]	; (800804c <prvInsertTimerInActiveList+0x80>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3304      	adds	r3, #4
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f7fd fd9c 	bl	8005b76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800803e:	697b      	ldr	r3, [r7, #20]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000e1c 	.word	0x20000e1c
 800804c:	20000e18 	.word	0x20000e18

08008050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08e      	sub	sp, #56	; 0x38
 8008054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008056:	e0ca      	b.n	80081ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	da18      	bge.n	8008090 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800805e:	1d3b      	adds	r3, r7, #4
 8008060:	3304      	adds	r3, #4
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	61fb      	str	r3, [r7, #28]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008086:	6850      	ldr	r0, [r2, #4]
 8008088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808a:	6892      	ldr	r2, [r2, #8]
 800808c:	4611      	mov	r1, r2
 800808e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f2c0 80ab 	blt.w	80081ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d004      	beq.n	80080ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	3304      	adds	r3, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fd fd9d 	bl	8005be8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080ae:	463b      	mov	r3, r7
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff ff6b 	bl	8007f8c <prvSampleTimeNow>
 80080b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b09      	cmp	r3, #9
 80080bc:	f200 8096 	bhi.w	80081ec <prvProcessReceivedCommands+0x19c>
 80080c0:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <prvProcessReceivedCommands+0x78>)
 80080c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c6:	bf00      	nop
 80080c8:	080080f1 	.word	0x080080f1
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	08008165 	.word	0x08008165
 80080d8:	08008179 	.word	0x08008179
 80080dc:	080081c3 	.word	0x080081c3
 80080e0:	080080f1 	.word	0x080080f1
 80080e4:	080080f1 	.word	0x080080f1
 80080e8:	08008165 	.word	0x08008165
 80080ec:	08008179 	.word	0x08008179
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080f6:	f043 0301 	orr.w	r3, r3, #1
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	18d1      	adds	r1, r2, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008110:	f7ff ff5c 	bl	8007fcc <prvInsertTimerInActiveList>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d069      	beq.n	80081ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d05e      	beq.n	80081ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	441a      	add	r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	2300      	movs	r3, #0
 800813e:	2100      	movs	r1, #0
 8008140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008142:	f7ff fe05 	bl	8007d50 <xTimerGenericCommand>
 8008146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d14f      	bne.n	80081ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	61bb      	str	r3, [r7, #24]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800816a:	f023 0301 	bic.w	r3, r3, #1
 800816e:	b2da      	uxtb	r2, r3
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008176:	e03a      	b.n	80081ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	b2da      	uxtb	r2, r3
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	617b      	str	r3, [r7, #20]
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	18d1      	adds	r1, r2, r3
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081bc:	f7ff ff06 	bl	8007fcc <prvInsertTimerInActiveList>
					break;
 80081c0:	e015      	b.n	80081ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80081d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d2:	f000 fbfd 	bl	80089d0 <vPortFree>
 80081d6:	e00a      	b.n	80081ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081de:	f023 0301 	bic.w	r3, r3, #1
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081ea:	e000      	b.n	80081ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80081ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081ee:	4b08      	ldr	r3, [pc, #32]	; (8008210 <prvProcessReceivedCommands+0x1c0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	1d39      	adds	r1, r7, #4
 80081f4:	2200      	movs	r2, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe f8ae 	bl	8006358 <xQueueReceive>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f47f af2a 	bne.w	8008058 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	3730      	adds	r7, #48	; 0x30
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000e20 	.word	0x20000e20

08008214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800821a:	e048      	b.n	80082ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800821c:	4b2d      	ldr	r3, [pc, #180]	; (80082d4 <prvSwitchTimerLists+0xc0>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008226:	4b2b      	ldr	r3, [pc, #172]	; (80082d4 <prvSwitchTimerLists+0xc0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3304      	adds	r3, #4
 8008234:	4618      	mov	r0, r3
 8008236:	f7fd fcd7 	bl	8005be8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d02e      	beq.n	80082ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	4413      	add	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	429a      	cmp	r2, r3
 8008260:	d90e      	bls.n	8008280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800826e:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <prvSwitchTimerLists+0xc0>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3304      	adds	r3, #4
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f7fd fc7c 	bl	8005b76 <vListInsert>
 800827e:	e016      	b.n	80082ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008280:	2300      	movs	r3, #0
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	2300      	movs	r3, #0
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	2100      	movs	r1, #0
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fd60 	bl	8007d50 <xTimerGenericCommand>
 8008290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	603b      	str	r3, [r7, #0]
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ae:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <prvSwitchTimerLists+0xc0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1b1      	bne.n	800821c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <prvSwitchTimerLists+0xc0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082be:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <prvSwitchTimerLists+0xc4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a04      	ldr	r2, [pc, #16]	; (80082d4 <prvSwitchTimerLists+0xc0>)
 80082c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082c6:	4a04      	ldr	r2, [pc, #16]	; (80082d8 <prvSwitchTimerLists+0xc4>)
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	6013      	str	r3, [r2, #0]
}
 80082cc:	bf00      	nop
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000e18 	.word	0x20000e18
 80082d8:	20000e1c 	.word	0x20000e1c

080082dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082e2:	f000 f987 	bl	80085f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082e6:	4b15      	ldr	r3, [pc, #84]	; (800833c <prvCheckForValidListAndQueue+0x60>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d120      	bne.n	8008330 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082ee:	4814      	ldr	r0, [pc, #80]	; (8008340 <prvCheckForValidListAndQueue+0x64>)
 80082f0:	f7fd fbf0 	bl	8005ad4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082f4:	4813      	ldr	r0, [pc, #76]	; (8008344 <prvCheckForValidListAndQueue+0x68>)
 80082f6:	f7fd fbed 	bl	8005ad4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082fa:	4b13      	ldr	r3, [pc, #76]	; (8008348 <prvCheckForValidListAndQueue+0x6c>)
 80082fc:	4a10      	ldr	r2, [pc, #64]	; (8008340 <prvCheckForValidListAndQueue+0x64>)
 80082fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008300:	4b12      	ldr	r3, [pc, #72]	; (800834c <prvCheckForValidListAndQueue+0x70>)
 8008302:	4a10      	ldr	r2, [pc, #64]	; (8008344 <prvCheckForValidListAndQueue+0x68>)
 8008304:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008306:	2300      	movs	r3, #0
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4b11      	ldr	r3, [pc, #68]	; (8008350 <prvCheckForValidListAndQueue+0x74>)
 800830c:	4a11      	ldr	r2, [pc, #68]	; (8008354 <prvCheckForValidListAndQueue+0x78>)
 800830e:	2110      	movs	r1, #16
 8008310:	200a      	movs	r0, #10
 8008312:	f7fd fcfb 	bl	8005d0c <xQueueGenericCreateStatic>
 8008316:	4603      	mov	r3, r0
 8008318:	4a08      	ldr	r2, [pc, #32]	; (800833c <prvCheckForValidListAndQueue+0x60>)
 800831a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <prvCheckForValidListAndQueue+0x60>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008324:	4b05      	ldr	r3, [pc, #20]	; (800833c <prvCheckForValidListAndQueue+0x60>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	490b      	ldr	r1, [pc, #44]	; (8008358 <prvCheckForValidListAndQueue+0x7c>)
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fba8 	bl	8006a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008330:	f000 f990 	bl	8008654 <vPortExitCritical>
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000e20 	.word	0x20000e20
 8008340:	20000df0 	.word	0x20000df0
 8008344:	20000e04 	.word	0x20000e04
 8008348:	20000e18 	.word	0x20000e18
 800834c:	20000e1c 	.word	0x20000e1c
 8008350:	20000ecc 	.word	0x20000ecc
 8008354:	20000e2c 	.word	0x20000e2c
 8008358:	0800a70c 	.word	0x0800a70c

0800835c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08a      	sub	sp, #40	; 0x28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800836a:	f06f 0301 	mvn.w	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <xTimerPendFunctionCallFromISR+0x3c>)
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	f107 0114 	add.w	r1, r7, #20
 8008384:	2300      	movs	r3, #0
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	f7fd ff4a 	bl	8006220 <xQueueGenericSendFromISR>
 800838c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008390:	4618      	mov	r0, r3
 8008392:	3728      	adds	r7, #40	; 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000e20 	.word	0x20000e20

0800839c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3b04      	subs	r3, #4
 80083ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b04      	subs	r3, #4
 80083ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f023 0201 	bic.w	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3b04      	subs	r3, #4
 80083ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083cc:	4a0c      	ldr	r2, [pc, #48]	; (8008400 <pxPortInitialiseStack+0x64>)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3b14      	subs	r3, #20
 80083d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3b04      	subs	r3, #4
 80083e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f06f 0202 	mvn.w	r2, #2
 80083ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3b20      	subs	r3, #32
 80083f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083f2:	68fb      	ldr	r3, [r7, #12]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	08008405 	.word	0x08008405

08008404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800840e:	4b12      	ldr	r3, [pc, #72]	; (8008458 <prvTaskExitError+0x54>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d00a      	beq.n	800842e <prvTaskExitError+0x2a>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	60fb      	str	r3, [r7, #12]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <prvTaskExitError+0x28>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60bb      	str	r3, [r7, #8]
}
 8008440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008442:	bf00      	nop
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0fc      	beq.n	8008444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800844a:	bf00      	nop
 800844c:	bf00      	nop
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	2000000c 	.word	0x2000000c
 800845c:	00000000 	.word	0x00000000

08008460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008460:	4b07      	ldr	r3, [pc, #28]	; (8008480 <pxCurrentTCBConst2>)
 8008462:	6819      	ldr	r1, [r3, #0]
 8008464:	6808      	ldr	r0, [r1, #0]
 8008466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846a:	f380 8809 	msr	PSP, r0
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f04f 0000 	mov.w	r0, #0
 8008476:	f380 8811 	msr	BASEPRI, r0
 800847a:	4770      	bx	lr
 800847c:	f3af 8000 	nop.w

08008480 <pxCurrentTCBConst2>:
 8008480:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop

08008488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008488:	4808      	ldr	r0, [pc, #32]	; (80084ac <prvPortStartFirstTask+0x24>)
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	6800      	ldr	r0, [r0, #0]
 800848e:	f380 8808 	msr	MSP, r0
 8008492:	f04f 0000 	mov.w	r0, #0
 8008496:	f380 8814 	msr	CONTROL, r0
 800849a:	b662      	cpsie	i
 800849c:	b661      	cpsie	f
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	df00      	svc	0
 80084a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084aa:	bf00      	nop
 80084ac:	e000ed08 	.word	0xe000ed08

080084b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084b6:	4b46      	ldr	r3, [pc, #280]	; (80085d0 <xPortStartScheduler+0x120>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a46      	ldr	r2, [pc, #280]	; (80085d4 <xPortStartScheduler+0x124>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d10a      	bne.n	80084d6 <xPortStartScheduler+0x26>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	613b      	str	r3, [r7, #16]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084d6:	4b3e      	ldr	r3, [pc, #248]	; (80085d0 <xPortStartScheduler+0x120>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a3f      	ldr	r2, [pc, #252]	; (80085d8 <xPortStartScheduler+0x128>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d10a      	bne.n	80084f6 <xPortStartScheduler+0x46>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	60fb      	str	r3, [r7, #12]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084f6:	4b39      	ldr	r3, [pc, #228]	; (80085dc <xPortStartScheduler+0x12c>)
 80084f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008518:	b2da      	uxtb	r2, r3
 800851a:	4b31      	ldr	r3, [pc, #196]	; (80085e0 <xPortStartScheduler+0x130>)
 800851c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800851e:	4b31      	ldr	r3, [pc, #196]	; (80085e4 <xPortStartScheduler+0x134>)
 8008520:	2207      	movs	r2, #7
 8008522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008524:	e009      	b.n	800853a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008526:	4b2f      	ldr	r3, [pc, #188]	; (80085e4 <xPortStartScheduler+0x134>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3b01      	subs	r3, #1
 800852c:	4a2d      	ldr	r2, [pc, #180]	; (80085e4 <xPortStartScheduler+0x134>)
 800852e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	b2db      	uxtb	r3, r3
 8008538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008542:	2b80      	cmp	r3, #128	; 0x80
 8008544:	d0ef      	beq.n	8008526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008546:	4b27      	ldr	r3, [pc, #156]	; (80085e4 <xPortStartScheduler+0x134>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f1c3 0307 	rsb	r3, r3, #7
 800854e:	2b04      	cmp	r3, #4
 8008550:	d00a      	beq.n	8008568 <xPortStartScheduler+0xb8>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	60bb      	str	r3, [r7, #8]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008568:	4b1e      	ldr	r3, [pc, #120]	; (80085e4 <xPortStartScheduler+0x134>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	021b      	lsls	r3, r3, #8
 800856e:	4a1d      	ldr	r2, [pc, #116]	; (80085e4 <xPortStartScheduler+0x134>)
 8008570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008572:	4b1c      	ldr	r3, [pc, #112]	; (80085e4 <xPortStartScheduler+0x134>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800857a:	4a1a      	ldr	r2, [pc, #104]	; (80085e4 <xPortStartScheduler+0x134>)
 800857c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	b2da      	uxtb	r2, r3
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008586:	4b18      	ldr	r3, [pc, #96]	; (80085e8 <xPortStartScheduler+0x138>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a17      	ldr	r2, [pc, #92]	; (80085e8 <xPortStartScheduler+0x138>)
 800858c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008592:	4b15      	ldr	r3, [pc, #84]	; (80085e8 <xPortStartScheduler+0x138>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a14      	ldr	r2, [pc, #80]	; (80085e8 <xPortStartScheduler+0x138>)
 8008598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800859c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800859e:	f000 f8dd 	bl	800875c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085a2:	4b12      	ldr	r3, [pc, #72]	; (80085ec <xPortStartScheduler+0x13c>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085a8:	f000 f8fc 	bl	80087a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085ac:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <xPortStartScheduler+0x140>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a0f      	ldr	r2, [pc, #60]	; (80085f0 <xPortStartScheduler+0x140>)
 80085b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80085b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085b8:	f7ff ff66 	bl	8008488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085bc:	f7fe fe70 	bl	80072a0 <vTaskSwitchContext>
	prvTaskExitError();
 80085c0:	f7ff ff20 	bl	8008404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	e000ed00 	.word	0xe000ed00
 80085d4:	410fc271 	.word	0x410fc271
 80085d8:	410fc270 	.word	0x410fc270
 80085dc:	e000e400 	.word	0xe000e400
 80085e0:	20000f1c 	.word	0x20000f1c
 80085e4:	20000f20 	.word	0x20000f20
 80085e8:	e000ed20 	.word	0xe000ed20
 80085ec:	2000000c 	.word	0x2000000c
 80085f0:	e000ef34 	.word	0xe000ef34

080085f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	607b      	str	r3, [r7, #4]
}
 800860c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800860e:	4b0f      	ldr	r3, [pc, #60]	; (800864c <vPortEnterCritical+0x58>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	4a0d      	ldr	r2, [pc, #52]	; (800864c <vPortEnterCritical+0x58>)
 8008616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008618:	4b0c      	ldr	r3, [pc, #48]	; (800864c <vPortEnterCritical+0x58>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d10f      	bne.n	8008640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008620:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <vPortEnterCritical+0x5c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <vPortEnterCritical+0x4c>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	603b      	str	r3, [r7, #0]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <vPortEnterCritical+0x4a>
	}
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	2000000c 	.word	0x2000000c
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800865a:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <vPortExitCritical+0x50>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10a      	bne.n	8008678 <vPortExitCritical+0x24>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	607b      	str	r3, [r7, #4]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008678:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <vPortExitCritical+0x50>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3b01      	subs	r3, #1
 800867e:	4a09      	ldr	r2, [pc, #36]	; (80086a4 <vPortExitCritical+0x50>)
 8008680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008682:	4b08      	ldr	r3, [pc, #32]	; (80086a4 <vPortExitCritical+0x50>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <vPortExitCritical+0x42>
 800868a:	2300      	movs	r3, #0
 800868c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f383 8811 	msr	BASEPRI, r3
}
 8008694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000000c 	.word	0x2000000c
	...

080086b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086b0:	f3ef 8009 	mrs	r0, PSP
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	4b15      	ldr	r3, [pc, #84]	; (8008710 <pxCurrentTCBConst>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	f01e 0f10 	tst.w	lr, #16
 80086c0:	bf08      	it	eq
 80086c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	6010      	str	r0, [r2, #0]
 80086cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086d4:	f380 8811 	msr	BASEPRI, r0
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f7fe fdde 	bl	80072a0 <vTaskSwitchContext>
 80086e4:	f04f 0000 	mov.w	r0, #0
 80086e8:	f380 8811 	msr	BASEPRI, r0
 80086ec:	bc09      	pop	{r0, r3}
 80086ee:	6819      	ldr	r1, [r3, #0]
 80086f0:	6808      	ldr	r0, [r1, #0]
 80086f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f6:	f01e 0f10 	tst.w	lr, #16
 80086fa:	bf08      	it	eq
 80086fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008700:	f380 8809 	msr	PSP, r0
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst>:
 8008710:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	607b      	str	r3, [r7, #4]
}
 8008730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008732:	f7fe fcfb 	bl	800712c <xTaskIncrementTick>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <xPortSysTickHandler+0x40>)
 800873e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	2300      	movs	r3, #0
 8008746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	f383 8811 	msr	BASEPRI, r3
}
 800874e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008760:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <vPortSetupTimerInterrupt+0x34>)
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008766:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <vPortSetupTimerInterrupt+0x38>)
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800876c:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <vPortSetupTimerInterrupt+0x3c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0a      	ldr	r2, [pc, #40]	; (800879c <vPortSetupTimerInterrupt+0x40>)
 8008772:	fba2 2303 	umull	r2, r3, r2, r3
 8008776:	099b      	lsrs	r3, r3, #6
 8008778:	4a09      	ldr	r2, [pc, #36]	; (80087a0 <vPortSetupTimerInterrupt+0x44>)
 800877a:	3b01      	subs	r3, #1
 800877c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800877e:	4b04      	ldr	r3, [pc, #16]	; (8008790 <vPortSetupTimerInterrupt+0x34>)
 8008780:	2207      	movs	r2, #7
 8008782:	601a      	str	r2, [r3, #0]
}
 8008784:	bf00      	nop
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	e000e010 	.word	0xe000e010
 8008794:	e000e018 	.word	0xe000e018
 8008798:	20000000 	.word	0x20000000
 800879c:	10624dd3 	.word	0x10624dd3
 80087a0:	e000e014 	.word	0xe000e014

080087a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80087b4 <vPortEnableVFP+0x10>
 80087a8:	6801      	ldr	r1, [r0, #0]
 80087aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80087ae:	6001      	str	r1, [r0, #0]
 80087b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087b2:	bf00      	nop
 80087b4:	e000ed88 	.word	0xe000ed88

080087b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087be:	f3ef 8305 	mrs	r3, IPSR
 80087c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b0f      	cmp	r3, #15
 80087c8:	d914      	bls.n	80087f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087ca:	4a17      	ldr	r2, [pc, #92]	; (8008828 <vPortValidateInterruptPriority+0x70>)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087d4:	4b15      	ldr	r3, [pc, #84]	; (800882c <vPortValidateInterruptPriority+0x74>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	7afa      	ldrb	r2, [r7, #11]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d20a      	bcs.n	80087f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	607b      	str	r3, [r7, #4]
}
 80087f0:	bf00      	nop
 80087f2:	e7fe      	b.n	80087f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087f4:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <vPortValidateInterruptPriority+0x78>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087fc:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <vPortValidateInterruptPriority+0x7c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d90a      	bls.n	800881a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	603b      	str	r3, [r7, #0]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <vPortValidateInterruptPriority+0x60>
	}
 800881a:	bf00      	nop
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	e000e3f0 	.word	0xe000e3f0
 800882c:	20000f1c 	.word	0x20000f1c
 8008830:	e000ed0c 	.word	0xe000ed0c
 8008834:	20000f20 	.word	0x20000f20

08008838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08a      	sub	sp, #40	; 0x28
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008840:	2300      	movs	r3, #0
 8008842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008844:	f7fe fbb6 	bl	8006fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008848:	4b5b      	ldr	r3, [pc, #364]	; (80089b8 <pvPortMalloc+0x180>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008850:	f000 f920 	bl	8008a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008854:	4b59      	ldr	r3, [pc, #356]	; (80089bc <pvPortMalloc+0x184>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 8093 	bne.w	8008988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01d      	beq.n	80088a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008868:	2208      	movs	r2, #8
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4413      	add	r3, r2
 800886e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	2b00      	cmp	r3, #0
 8008878:	d014      	beq.n	80088a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f023 0307 	bic.w	r3, r3, #7
 8008880:	3308      	adds	r3, #8
 8008882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <pvPortMalloc+0x6c>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	617b      	str	r3, [r7, #20]
}
 80088a0:	bf00      	nop
 80088a2:	e7fe      	b.n	80088a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d06e      	beq.n	8008988 <pvPortMalloc+0x150>
 80088aa:	4b45      	ldr	r3, [pc, #276]	; (80089c0 <pvPortMalloc+0x188>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d869      	bhi.n	8008988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088b4:	4b43      	ldr	r3, [pc, #268]	; (80089c4 <pvPortMalloc+0x18c>)
 80088b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088b8:	4b42      	ldr	r3, [pc, #264]	; (80089c4 <pvPortMalloc+0x18c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088be:	e004      	b.n	80088ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d903      	bls.n	80088dc <pvPortMalloc+0xa4>
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1f1      	bne.n	80088c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088dc:	4b36      	ldr	r3, [pc, #216]	; (80089b8 <pvPortMalloc+0x180>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d050      	beq.n	8008988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2208      	movs	r2, #8
 80088ec:	4413      	add	r3, r2
 80088ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	1ad2      	subs	r2, r2, r3
 8008900:	2308      	movs	r3, #8
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	429a      	cmp	r2, r3
 8008906:	d91f      	bls.n	8008948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4413      	add	r3, r2
 800890e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <pvPortMalloc+0xf8>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	613b      	str	r3, [r7, #16]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008942:	69b8      	ldr	r0, [r7, #24]
 8008944:	f000 f908 	bl	8008b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008948:	4b1d      	ldr	r3, [pc, #116]	; (80089c0 <pvPortMalloc+0x188>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	4a1b      	ldr	r2, [pc, #108]	; (80089c0 <pvPortMalloc+0x188>)
 8008954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008956:	4b1a      	ldr	r3, [pc, #104]	; (80089c0 <pvPortMalloc+0x188>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <pvPortMalloc+0x190>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d203      	bcs.n	800896a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008962:	4b17      	ldr	r3, [pc, #92]	; (80089c0 <pvPortMalloc+0x188>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a18      	ldr	r2, [pc, #96]	; (80089c8 <pvPortMalloc+0x190>)
 8008968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	4b13      	ldr	r3, [pc, #76]	; (80089bc <pvPortMalloc+0x184>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	431a      	orrs	r2, r3
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800897e:	4b13      	ldr	r3, [pc, #76]	; (80089cc <pvPortMalloc+0x194>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3301      	adds	r3, #1
 8008984:	4a11      	ldr	r2, [pc, #68]	; (80089cc <pvPortMalloc+0x194>)
 8008986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008988:	f7fe fb22 	bl	8006fd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <pvPortMalloc+0x174>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	60fb      	str	r3, [r7, #12]
}
 80089a8:	bf00      	nop
 80089aa:	e7fe      	b.n	80089aa <pvPortMalloc+0x172>
	return pvReturn;
 80089ac:	69fb      	ldr	r3, [r7, #28]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3728      	adds	r7, #40	; 0x28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20004b2c 	.word	0x20004b2c
 80089bc:	20004b40 	.word	0x20004b40
 80089c0:	20004b30 	.word	0x20004b30
 80089c4:	20004b24 	.word	0x20004b24
 80089c8:	20004b34 	.word	0x20004b34
 80089cc:	20004b38 	.word	0x20004b38

080089d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d04d      	beq.n	8008a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089e2:	2308      	movs	r3, #8
 80089e4:	425b      	negs	r3, r3
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4413      	add	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <vPortFree+0xb8>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4013      	ands	r3, r2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <vPortFree+0x44>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60fb      	str	r3, [r7, #12]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <vPortFree+0x62>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	60bb      	str	r3, [r7, #8]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <vPortFree+0xb8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01e      	beq.n	8008a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d11a      	bne.n	8008a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <vPortFree+0xb8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	43db      	mvns	r3, r3
 8008a52:	401a      	ands	r2, r3
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a58:	f7fe faac 	bl	8006fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <vPortFree+0xbc>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4413      	add	r3, r2
 8008a66:	4a09      	ldr	r2, [pc, #36]	; (8008a8c <vPortFree+0xbc>)
 8008a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a6a:	6938      	ldr	r0, [r7, #16]
 8008a6c:	f000 f874 	bl	8008b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <vPortFree+0xc0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3301      	adds	r3, #1
 8008a76:	4a06      	ldr	r2, [pc, #24]	; (8008a90 <vPortFree+0xc0>)
 8008a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a7a:	f7fe faa9 	bl	8006fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a7e:	bf00      	nop
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20004b40 	.word	0x20004b40
 8008a8c:	20004b30 	.word	0x20004b30
 8008a90:	20004b3c 	.word	0x20004b3c

08008a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008aa0:	4b27      	ldr	r3, [pc, #156]	; (8008b40 <prvHeapInit+0xac>)
 8008aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00c      	beq.n	8008ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3307      	adds	r3, #7
 8008ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0307 	bic.w	r3, r3, #7
 8008aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	4a1f      	ldr	r2, [pc, #124]	; (8008b40 <prvHeapInit+0xac>)
 8008ac4:	4413      	add	r3, r2
 8008ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008acc:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <prvHeapInit+0xb0>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <prvHeapInit+0xb0>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	4413      	add	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0307 	bic.w	r3, r3, #7
 8008aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4a15      	ldr	r2, [pc, #84]	; (8008b48 <prvHeapInit+0xb4>)
 8008af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008af6:	4b14      	ldr	r3, [pc, #80]	; (8008b48 <prvHeapInit+0xb4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2200      	movs	r2, #0
 8008afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008afe:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <prvHeapInit+0xb4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b14:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <prvHeapInit+0xb4>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	4a0a      	ldr	r2, [pc, #40]	; (8008b4c <prvHeapInit+0xb8>)
 8008b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4a09      	ldr	r2, [pc, #36]	; (8008b50 <prvHeapInit+0xbc>)
 8008b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b2c:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <prvHeapInit+0xc0>)
 8008b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b32:	601a      	str	r2, [r3, #0]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	20000f24 	.word	0x20000f24
 8008b44:	20004b24 	.word	0x20004b24
 8008b48:	20004b2c 	.word	0x20004b2c
 8008b4c:	20004b34 	.word	0x20004b34
 8008b50:	20004b30 	.word	0x20004b30
 8008b54:	20004b40 	.word	0x20004b40

08008b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b60:	4b28      	ldr	r3, [pc, #160]	; (8008c04 <prvInsertBlockIntoFreeList+0xac>)
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e002      	b.n	8008b6c <prvInsertBlockIntoFreeList+0x14>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d8f7      	bhi.n	8008b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	4413      	add	r3, r2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d108      	bne.n	8008b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d118      	bne.n	8008be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <prvInsertBlockIntoFreeList+0xb0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d00d      	beq.n	8008bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	e008      	b.n	8008be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bd6:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <prvInsertBlockIntoFreeList+0xb0>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	e003      	b.n	8008be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d002      	beq.n	8008bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20004b24 	.word	0x20004b24
 8008c08:	20004b2c 	.word	0x20004b2c

08008c0c <std>:
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	b510      	push	{r4, lr}
 8008c10:	4604      	mov	r4, r0
 8008c12:	e9c0 3300 	strd	r3, r3, [r0]
 8008c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c1a:	6083      	str	r3, [r0, #8]
 8008c1c:	8181      	strh	r1, [r0, #12]
 8008c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c20:	81c2      	strh	r2, [r0, #14]
 8008c22:	6183      	str	r3, [r0, #24]
 8008c24:	4619      	mov	r1, r3
 8008c26:	2208      	movs	r2, #8
 8008c28:	305c      	adds	r0, #92	; 0x5c
 8008c2a:	f000 fa33 	bl	8009094 <memset>
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <std+0x58>)
 8008c30:	6263      	str	r3, [r4, #36]	; 0x24
 8008c32:	4b0d      	ldr	r3, [pc, #52]	; (8008c68 <std+0x5c>)
 8008c34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c36:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <std+0x60>)
 8008c38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c3a:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <std+0x64>)
 8008c3c:	6323      	str	r3, [r4, #48]	; 0x30
 8008c3e:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <std+0x68>)
 8008c40:	6224      	str	r4, [r4, #32]
 8008c42:	429c      	cmp	r4, r3
 8008c44:	d006      	beq.n	8008c54 <std+0x48>
 8008c46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c4a:	4294      	cmp	r4, r2
 8008c4c:	d002      	beq.n	8008c54 <std+0x48>
 8008c4e:	33d0      	adds	r3, #208	; 0xd0
 8008c50:	429c      	cmp	r4, r3
 8008c52:	d105      	bne.n	8008c60 <std+0x54>
 8008c54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c5c:	f000 ba92 	b.w	8009184 <__retarget_lock_init_recursive>
 8008c60:	bd10      	pop	{r4, pc}
 8008c62:	bf00      	nop
 8008c64:	08008ee1 	.word	0x08008ee1
 8008c68:	08008f07 	.word	0x08008f07
 8008c6c:	08008f3f 	.word	0x08008f3f
 8008c70:	08008f63 	.word	0x08008f63
 8008c74:	20004b44 	.word	0x20004b44

08008c78 <stdio_exit_handler>:
 8008c78:	4a02      	ldr	r2, [pc, #8]	; (8008c84 <stdio_exit_handler+0xc>)
 8008c7a:	4903      	ldr	r1, [pc, #12]	; (8008c88 <stdio_exit_handler+0x10>)
 8008c7c:	4803      	ldr	r0, [pc, #12]	; (8008c8c <stdio_exit_handler+0x14>)
 8008c7e:	f000 b869 	b.w	8008d54 <_fwalk_sglue>
 8008c82:	bf00      	nop
 8008c84:	20000010 	.word	0x20000010
 8008c88:	0800a0b5 	.word	0x0800a0b5
 8008c8c:	2000001c 	.word	0x2000001c

08008c90 <cleanup_stdio>:
 8008c90:	6841      	ldr	r1, [r0, #4]
 8008c92:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <cleanup_stdio+0x34>)
 8008c94:	4299      	cmp	r1, r3
 8008c96:	b510      	push	{r4, lr}
 8008c98:	4604      	mov	r4, r0
 8008c9a:	d001      	beq.n	8008ca0 <cleanup_stdio+0x10>
 8008c9c:	f001 fa0a 	bl	800a0b4 <_fflush_r>
 8008ca0:	68a1      	ldr	r1, [r4, #8]
 8008ca2:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <cleanup_stdio+0x38>)
 8008ca4:	4299      	cmp	r1, r3
 8008ca6:	d002      	beq.n	8008cae <cleanup_stdio+0x1e>
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f001 fa03 	bl	800a0b4 <_fflush_r>
 8008cae:	68e1      	ldr	r1, [r4, #12]
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <cleanup_stdio+0x3c>)
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	d004      	beq.n	8008cc0 <cleanup_stdio+0x30>
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cbc:	f001 b9fa 	b.w	800a0b4 <_fflush_r>
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20004b44 	.word	0x20004b44
 8008cc8:	20004bac 	.word	0x20004bac
 8008ccc:	20004c14 	.word	0x20004c14

08008cd0 <global_stdio_init.part.0>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <global_stdio_init.part.0+0x30>)
 8008cd4:	4c0b      	ldr	r4, [pc, #44]	; (8008d04 <global_stdio_init.part.0+0x34>)
 8008cd6:	4a0c      	ldr	r2, [pc, #48]	; (8008d08 <global_stdio_init.part.0+0x38>)
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	4620      	mov	r0, r4
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2104      	movs	r1, #4
 8008ce0:	f7ff ff94 	bl	8008c0c <std>
 8008ce4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ce8:	2201      	movs	r2, #1
 8008cea:	2109      	movs	r1, #9
 8008cec:	f7ff ff8e 	bl	8008c0c <std>
 8008cf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfa:	2112      	movs	r1, #18
 8008cfc:	f7ff bf86 	b.w	8008c0c <std>
 8008d00:	20004c7c 	.word	0x20004c7c
 8008d04:	20004b44 	.word	0x20004b44
 8008d08:	08008c79 	.word	0x08008c79

08008d0c <__sfp_lock_acquire>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	; (8008d14 <__sfp_lock_acquire+0x8>)
 8008d0e:	f000 ba3a 	b.w	8009186 <__retarget_lock_acquire_recursive>
 8008d12:	bf00      	nop
 8008d14:	20004c85 	.word	0x20004c85

08008d18 <__sfp_lock_release>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__sfp_lock_release+0x8>)
 8008d1a:	f000 ba35 	b.w	8009188 <__retarget_lock_release_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20004c85 	.word	0x20004c85

08008d24 <__sinit>:
 8008d24:	b510      	push	{r4, lr}
 8008d26:	4604      	mov	r4, r0
 8008d28:	f7ff fff0 	bl	8008d0c <__sfp_lock_acquire>
 8008d2c:	6a23      	ldr	r3, [r4, #32]
 8008d2e:	b11b      	cbz	r3, 8008d38 <__sinit+0x14>
 8008d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d34:	f7ff bff0 	b.w	8008d18 <__sfp_lock_release>
 8008d38:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <__sinit+0x28>)
 8008d3a:	6223      	str	r3, [r4, #32]
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <__sinit+0x2c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1f5      	bne.n	8008d30 <__sinit+0xc>
 8008d44:	f7ff ffc4 	bl	8008cd0 <global_stdio_init.part.0>
 8008d48:	e7f2      	b.n	8008d30 <__sinit+0xc>
 8008d4a:	bf00      	nop
 8008d4c:	08008c91 	.word	0x08008c91
 8008d50:	20004c7c 	.word	0x20004c7c

08008d54 <_fwalk_sglue>:
 8008d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d58:	4607      	mov	r7, r0
 8008d5a:	4688      	mov	r8, r1
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	2600      	movs	r6, #0
 8008d60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d64:	f1b9 0901 	subs.w	r9, r9, #1
 8008d68:	d505      	bpl.n	8008d76 <_fwalk_sglue+0x22>
 8008d6a:	6824      	ldr	r4, [r4, #0]
 8008d6c:	2c00      	cmp	r4, #0
 8008d6e:	d1f7      	bne.n	8008d60 <_fwalk_sglue+0xc>
 8008d70:	4630      	mov	r0, r6
 8008d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d76:	89ab      	ldrh	r3, [r5, #12]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d907      	bls.n	8008d8c <_fwalk_sglue+0x38>
 8008d7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d80:	3301      	adds	r3, #1
 8008d82:	d003      	beq.n	8008d8c <_fwalk_sglue+0x38>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4638      	mov	r0, r7
 8008d88:	47c0      	blx	r8
 8008d8a:	4306      	orrs	r6, r0
 8008d8c:	3568      	adds	r5, #104	; 0x68
 8008d8e:	e7e9      	b.n	8008d64 <_fwalk_sglue+0x10>

08008d90 <_puts_r>:
 8008d90:	6a03      	ldr	r3, [r0, #32]
 8008d92:	b570      	push	{r4, r5, r6, lr}
 8008d94:	6884      	ldr	r4, [r0, #8]
 8008d96:	4605      	mov	r5, r0
 8008d98:	460e      	mov	r6, r1
 8008d9a:	b90b      	cbnz	r3, 8008da0 <_puts_r+0x10>
 8008d9c:	f7ff ffc2 	bl	8008d24 <__sinit>
 8008da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008da2:	07db      	lsls	r3, r3, #31
 8008da4:	d405      	bmi.n	8008db2 <_puts_r+0x22>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	0598      	lsls	r0, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_puts_r+0x22>
 8008dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dae:	f000 f9ea 	bl	8009186 <__retarget_lock_acquire_recursive>
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	0719      	lsls	r1, r3, #28
 8008db6:	d513      	bpl.n	8008de0 <_puts_r+0x50>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	b18b      	cbz	r3, 8008de0 <_puts_r+0x50>
 8008dbc:	3e01      	subs	r6, #1
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	60a3      	str	r3, [r4, #8]
 8008dc8:	b9e9      	cbnz	r1, 8008e06 <_puts_r+0x76>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	da2e      	bge.n	8008e2c <_puts_r+0x9c>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	210a      	movs	r1, #10
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 f8c9 	bl	8008f6a <__swbuf_r>
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d007      	beq.n	8008dec <_puts_r+0x5c>
 8008ddc:	250a      	movs	r5, #10
 8008dde:	e007      	b.n	8008df0 <_puts_r+0x60>
 8008de0:	4621      	mov	r1, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 f8fe 	bl	8008fe4 <__swsetup_r>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d0e7      	beq.n	8008dbc <_puts_r+0x2c>
 8008dec:	f04f 35ff 	mov.w	r5, #4294967295
 8008df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008df2:	07da      	lsls	r2, r3, #31
 8008df4:	d405      	bmi.n	8008e02 <_puts_r+0x72>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	059b      	lsls	r3, r3, #22
 8008dfa:	d402      	bmi.n	8008e02 <_puts_r+0x72>
 8008dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dfe:	f000 f9c3 	bl	8009188 <__retarget_lock_release_recursive>
 8008e02:	4628      	mov	r0, r5
 8008e04:	bd70      	pop	{r4, r5, r6, pc}
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da04      	bge.n	8008e14 <_puts_r+0x84>
 8008e0a:	69a2      	ldr	r2, [r4, #24]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	dc06      	bgt.n	8008e1e <_puts_r+0x8e>
 8008e10:	290a      	cmp	r1, #10
 8008e12:	d004      	beq.n	8008e1e <_puts_r+0x8e>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	6022      	str	r2, [r4, #0]
 8008e1a:	7019      	strb	r1, [r3, #0]
 8008e1c:	e7cf      	b.n	8008dbe <_puts_r+0x2e>
 8008e1e:	4622      	mov	r2, r4
 8008e20:	4628      	mov	r0, r5
 8008e22:	f000 f8a2 	bl	8008f6a <__swbuf_r>
 8008e26:	3001      	adds	r0, #1
 8008e28:	d1c9      	bne.n	8008dbe <_puts_r+0x2e>
 8008e2a:	e7df      	b.n	8008dec <_puts_r+0x5c>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	250a      	movs	r5, #10
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	6022      	str	r2, [r4, #0]
 8008e34:	701d      	strb	r5, [r3, #0]
 8008e36:	e7db      	b.n	8008df0 <_puts_r+0x60>

08008e38 <puts>:
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <puts+0xc>)
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f7ff bfa7 	b.w	8008d90 <_puts_r>
 8008e42:	bf00      	nop
 8008e44:	20000068 	.word	0x20000068

08008e48 <siprintf>:
 8008e48:	b40e      	push	{r1, r2, r3}
 8008e4a:	b500      	push	{lr}
 8008e4c:	b09c      	sub	sp, #112	; 0x70
 8008e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e50:	9002      	str	r0, [sp, #8]
 8008e52:	9006      	str	r0, [sp, #24]
 8008e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e58:	4809      	ldr	r0, [pc, #36]	; (8008e80 <siprintf+0x38>)
 8008e5a:	9107      	str	r1, [sp, #28]
 8008e5c:	9104      	str	r1, [sp, #16]
 8008e5e:	4909      	ldr	r1, [pc, #36]	; (8008e84 <siprintf+0x3c>)
 8008e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e64:	9105      	str	r1, [sp, #20]
 8008e66:	6800      	ldr	r0, [r0, #0]
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	a902      	add	r1, sp, #8
 8008e6c:	f000 faee 	bl	800944c <_svfiprintf_r>
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	2200      	movs	r2, #0
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	b01c      	add	sp, #112	; 0x70
 8008e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e7c:	b003      	add	sp, #12
 8008e7e:	4770      	bx	lr
 8008e80:	20000068 	.word	0x20000068
 8008e84:	ffff0208 	.word	0xffff0208

08008e88 <siscanf>:
 8008e88:	b40e      	push	{r1, r2, r3}
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	b09f      	sub	sp, #124	; 0x7c
 8008e8e:	ac21      	add	r4, sp, #132	; 0x84
 8008e90:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008e94:	f854 2b04 	ldr.w	r2, [r4], #4
 8008e98:	9201      	str	r2, [sp, #4]
 8008e9a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008e9e:	9004      	str	r0, [sp, #16]
 8008ea0:	9008      	str	r0, [sp, #32]
 8008ea2:	f7f7 f99d 	bl	80001e0 <strlen>
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <siscanf+0x50>)
 8008ea8:	9005      	str	r0, [sp, #20]
 8008eaa:	9009      	str	r0, [sp, #36]	; 0x24
 8008eac:	930d      	str	r3, [sp, #52]	; 0x34
 8008eae:	480b      	ldr	r0, [pc, #44]	; (8008edc <siscanf+0x54>)
 8008eb0:	9a01      	ldr	r2, [sp, #4]
 8008eb2:	6800      	ldr	r0, [r0, #0]
 8008eb4:	9403      	str	r4, [sp, #12]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9311      	str	r3, [sp, #68]	; 0x44
 8008eba:	9316      	str	r3, [sp, #88]	; 0x58
 8008ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ec0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008ec4:	a904      	add	r1, sp, #16
 8008ec6:	4623      	mov	r3, r4
 8008ec8:	f000 fc18 	bl	80096fc <__ssvfiscanf_r>
 8008ecc:	b01f      	add	sp, #124	; 0x7c
 8008ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed2:	b003      	add	sp, #12
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	08008f03 	.word	0x08008f03
 8008edc:	20000068 	.word	0x20000068

08008ee0 <__sread>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee8:	f000 f8fe 	bl	80090e8 <_read_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	bfab      	itete	ge
 8008ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ef4:	181b      	addge	r3, r3, r0
 8008ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008efa:	bfac      	ite	ge
 8008efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008efe:	81a3      	strhlt	r3, [r4, #12]
 8008f00:	bd10      	pop	{r4, pc}

08008f02 <__seofread>:
 8008f02:	2000      	movs	r0, #0
 8008f04:	4770      	bx	lr

08008f06 <__swrite>:
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	461f      	mov	r7, r3
 8008f0c:	898b      	ldrh	r3, [r1, #12]
 8008f0e:	05db      	lsls	r3, r3, #23
 8008f10:	4605      	mov	r5, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	4616      	mov	r6, r2
 8008f16:	d505      	bpl.n	8008f24 <__swrite+0x1e>
 8008f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f000 f8d0 	bl	80090c4 <_lseek_r>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	4632      	mov	r2, r6
 8008f32:	463b      	mov	r3, r7
 8008f34:	4628      	mov	r0, r5
 8008f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3a:	f000 b8e7 	b.w	800910c <_write_r>

08008f3e <__sseek>:
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	460c      	mov	r4, r1
 8008f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f46:	f000 f8bd 	bl	80090c4 <_lseek_r>
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	bf15      	itete	ne
 8008f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f5a:	81a3      	strheq	r3, [r4, #12]
 8008f5c:	bf18      	it	ne
 8008f5e:	81a3      	strhne	r3, [r4, #12]
 8008f60:	bd10      	pop	{r4, pc}

08008f62 <__sclose>:
 8008f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f66:	f000 b89d 	b.w	80090a4 <_close_r>

08008f6a <__swbuf_r>:
 8008f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6c:	460e      	mov	r6, r1
 8008f6e:	4614      	mov	r4, r2
 8008f70:	4605      	mov	r5, r0
 8008f72:	b118      	cbz	r0, 8008f7c <__swbuf_r+0x12>
 8008f74:	6a03      	ldr	r3, [r0, #32]
 8008f76:	b90b      	cbnz	r3, 8008f7c <__swbuf_r+0x12>
 8008f78:	f7ff fed4 	bl	8008d24 <__sinit>
 8008f7c:	69a3      	ldr	r3, [r4, #24]
 8008f7e:	60a3      	str	r3, [r4, #8]
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	071a      	lsls	r2, r3, #28
 8008f84:	d525      	bpl.n	8008fd2 <__swbuf_r+0x68>
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	b31b      	cbz	r3, 8008fd2 <__swbuf_r+0x68>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	1a98      	subs	r0, r3, r2
 8008f90:	6963      	ldr	r3, [r4, #20]
 8008f92:	b2f6      	uxtb	r6, r6
 8008f94:	4283      	cmp	r3, r0
 8008f96:	4637      	mov	r7, r6
 8008f98:	dc04      	bgt.n	8008fa4 <__swbuf_r+0x3a>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f001 f889 	bl	800a0b4 <_fflush_r>
 8008fa2:	b9e0      	cbnz	r0, 8008fde <__swbuf_r+0x74>
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	60a3      	str	r3, [r4, #8]
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	701e      	strb	r6, [r3, #0]
 8008fb2:	6962      	ldr	r2, [r4, #20]
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d004      	beq.n	8008fc4 <__swbuf_r+0x5a>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	07db      	lsls	r3, r3, #31
 8008fbe:	d506      	bpl.n	8008fce <__swbuf_r+0x64>
 8008fc0:	2e0a      	cmp	r6, #10
 8008fc2:	d104      	bne.n	8008fce <__swbuf_r+0x64>
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f001 f874 	bl	800a0b4 <_fflush_r>
 8008fcc:	b938      	cbnz	r0, 8008fde <__swbuf_r+0x74>
 8008fce:	4638      	mov	r0, r7
 8008fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f000 f805 	bl	8008fe4 <__swsetup_r>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d0d5      	beq.n	8008f8a <__swbuf_r+0x20>
 8008fde:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe2:	e7f4      	b.n	8008fce <__swbuf_r+0x64>

08008fe4 <__swsetup_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4b2a      	ldr	r3, [pc, #168]	; (8009090 <__swsetup_r+0xac>)
 8008fe8:	4605      	mov	r5, r0
 8008fea:	6818      	ldr	r0, [r3, #0]
 8008fec:	460c      	mov	r4, r1
 8008fee:	b118      	cbz	r0, 8008ff8 <__swsetup_r+0x14>
 8008ff0:	6a03      	ldr	r3, [r0, #32]
 8008ff2:	b90b      	cbnz	r3, 8008ff8 <__swsetup_r+0x14>
 8008ff4:	f7ff fe96 	bl	8008d24 <__sinit>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ffe:	0718      	lsls	r0, r3, #28
 8009000:	d422      	bmi.n	8009048 <__swsetup_r+0x64>
 8009002:	06d9      	lsls	r1, r3, #27
 8009004:	d407      	bmi.n	8009016 <__swsetup_r+0x32>
 8009006:	2309      	movs	r3, #9
 8009008:	602b      	str	r3, [r5, #0]
 800900a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e034      	b.n	8009080 <__swsetup_r+0x9c>
 8009016:	0758      	lsls	r0, r3, #29
 8009018:	d512      	bpl.n	8009040 <__swsetup_r+0x5c>
 800901a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800901c:	b141      	cbz	r1, 8009030 <__swsetup_r+0x4c>
 800901e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009022:	4299      	cmp	r1, r3
 8009024:	d002      	beq.n	800902c <__swsetup_r+0x48>
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f8be 	bl	80091a8 <_free_r>
 800902c:	2300      	movs	r3, #0
 800902e:	6363      	str	r3, [r4, #52]	; 0x34
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	2300      	movs	r3, #0
 800903a:	6063      	str	r3, [r4, #4]
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f043 0308 	orr.w	r3, r3, #8
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	b94b      	cbnz	r3, 8009060 <__swsetup_r+0x7c>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009056:	d003      	beq.n	8009060 <__swsetup_r+0x7c>
 8009058:	4621      	mov	r1, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f001 f878 	bl	800a150 <__smakebuf_r>
 8009060:	89a0      	ldrh	r0, [r4, #12]
 8009062:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009066:	f010 0301 	ands.w	r3, r0, #1
 800906a:	d00a      	beq.n	8009082 <__swsetup_r+0x9e>
 800906c:	2300      	movs	r3, #0
 800906e:	60a3      	str	r3, [r4, #8]
 8009070:	6963      	ldr	r3, [r4, #20]
 8009072:	425b      	negs	r3, r3
 8009074:	61a3      	str	r3, [r4, #24]
 8009076:	6923      	ldr	r3, [r4, #16]
 8009078:	b943      	cbnz	r3, 800908c <__swsetup_r+0xa8>
 800907a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800907e:	d1c4      	bne.n	800900a <__swsetup_r+0x26>
 8009080:	bd38      	pop	{r3, r4, r5, pc}
 8009082:	0781      	lsls	r1, r0, #30
 8009084:	bf58      	it	pl
 8009086:	6963      	ldrpl	r3, [r4, #20]
 8009088:	60a3      	str	r3, [r4, #8]
 800908a:	e7f4      	b.n	8009076 <__swsetup_r+0x92>
 800908c:	2000      	movs	r0, #0
 800908e:	e7f7      	b.n	8009080 <__swsetup_r+0x9c>
 8009090:	20000068 	.word	0x20000068

08009094 <memset>:
 8009094:	4402      	add	r2, r0
 8009096:	4603      	mov	r3, r0
 8009098:	4293      	cmp	r3, r2
 800909a:	d100      	bne.n	800909e <memset+0xa>
 800909c:	4770      	bx	lr
 800909e:	f803 1b01 	strb.w	r1, [r3], #1
 80090a2:	e7f9      	b.n	8009098 <memset+0x4>

080090a4 <_close_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d06      	ldr	r5, [pc, #24]	; (80090c0 <_close_r+0x1c>)
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7f8 ff63 	bl	8001f7a <_close>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_close_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_close_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20004c80 	.word	0x20004c80

080090c4 <_lseek_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	; (80090e4 <_lseek_r+0x20>)
 80090c8:	4604      	mov	r4, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	4611      	mov	r1, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	602a      	str	r2, [r5, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f7f8 ff78 	bl	8001fc8 <_lseek>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_lseek_r+0x1e>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_lseek_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	20004c80 	.word	0x20004c80

080090e8 <_read_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4d07      	ldr	r5, [pc, #28]	; (8009108 <_read_r+0x20>)
 80090ec:	4604      	mov	r4, r0
 80090ee:	4608      	mov	r0, r1
 80090f0:	4611      	mov	r1, r2
 80090f2:	2200      	movs	r2, #0
 80090f4:	602a      	str	r2, [r5, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f7f8 ff06 	bl	8001f08 <_read>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_read_r+0x1e>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_read_r+0x1e>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	20004c80 	.word	0x20004c80

0800910c <_write_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d07      	ldr	r5, [pc, #28]	; (800912c <_write_r+0x20>)
 8009110:	4604      	mov	r4, r0
 8009112:	4608      	mov	r0, r1
 8009114:	4611      	mov	r1, r2
 8009116:	2200      	movs	r2, #0
 8009118:	602a      	str	r2, [r5, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f7f8 ff11 	bl	8001f42 <_write>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d102      	bne.n	800912a <_write_r+0x1e>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	b103      	cbz	r3, 800912a <_write_r+0x1e>
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	20004c80 	.word	0x20004c80

08009130 <__errno>:
 8009130:	4b01      	ldr	r3, [pc, #4]	; (8009138 <__errno+0x8>)
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	20000068 	.word	0x20000068

0800913c <__libc_init_array>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	4d0d      	ldr	r5, [pc, #52]	; (8009174 <__libc_init_array+0x38>)
 8009140:	4c0d      	ldr	r4, [pc, #52]	; (8009178 <__libc_init_array+0x3c>)
 8009142:	1b64      	subs	r4, r4, r5
 8009144:	10a4      	asrs	r4, r4, #2
 8009146:	2600      	movs	r6, #0
 8009148:	42a6      	cmp	r6, r4
 800914a:	d109      	bne.n	8009160 <__libc_init_array+0x24>
 800914c:	4d0b      	ldr	r5, [pc, #44]	; (800917c <__libc_init_array+0x40>)
 800914e:	4c0c      	ldr	r4, [pc, #48]	; (8009180 <__libc_init_array+0x44>)
 8009150:	f001 fa2a 	bl	800a5a8 <_init>
 8009154:	1b64      	subs	r4, r4, r5
 8009156:	10a4      	asrs	r4, r4, #2
 8009158:	2600      	movs	r6, #0
 800915a:	42a6      	cmp	r6, r4
 800915c:	d105      	bne.n	800916a <__libc_init_array+0x2e>
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	f855 3b04 	ldr.w	r3, [r5], #4
 8009164:	4798      	blx	r3
 8009166:	3601      	adds	r6, #1
 8009168:	e7ee      	b.n	8009148 <__libc_init_array+0xc>
 800916a:	f855 3b04 	ldr.w	r3, [r5], #4
 800916e:	4798      	blx	r3
 8009170:	3601      	adds	r6, #1
 8009172:	e7f2      	b.n	800915a <__libc_init_array+0x1e>
 8009174:	0800aa1c 	.word	0x0800aa1c
 8009178:	0800aa1c 	.word	0x0800aa1c
 800917c:	0800aa1c 	.word	0x0800aa1c
 8009180:	0800aa20 	.word	0x0800aa20

08009184 <__retarget_lock_init_recursive>:
 8009184:	4770      	bx	lr

08009186 <__retarget_lock_acquire_recursive>:
 8009186:	4770      	bx	lr

08009188 <__retarget_lock_release_recursive>:
 8009188:	4770      	bx	lr

0800918a <memcpy>:
 800918a:	440a      	add	r2, r1
 800918c:	4291      	cmp	r1, r2
 800918e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009192:	d100      	bne.n	8009196 <memcpy+0xc>
 8009194:	4770      	bx	lr
 8009196:	b510      	push	{r4, lr}
 8009198:	f811 4b01 	ldrb.w	r4, [r1], #1
 800919c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a0:	4291      	cmp	r1, r2
 80091a2:	d1f9      	bne.n	8009198 <memcpy+0xe>
 80091a4:	bd10      	pop	{r4, pc}
	...

080091a8 <_free_r>:
 80091a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091aa:	2900      	cmp	r1, #0
 80091ac:	d044      	beq.n	8009238 <_free_r+0x90>
 80091ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b2:	9001      	str	r0, [sp, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f1a1 0404 	sub.w	r4, r1, #4
 80091ba:	bfb8      	it	lt
 80091bc:	18e4      	addlt	r4, r4, r3
 80091be:	f000 f8df 	bl	8009380 <__malloc_lock>
 80091c2:	4a1e      	ldr	r2, [pc, #120]	; (800923c <_free_r+0x94>)
 80091c4:	9801      	ldr	r0, [sp, #4]
 80091c6:	6813      	ldr	r3, [r2, #0]
 80091c8:	b933      	cbnz	r3, 80091d8 <_free_r+0x30>
 80091ca:	6063      	str	r3, [r4, #4]
 80091cc:	6014      	str	r4, [r2, #0]
 80091ce:	b003      	add	sp, #12
 80091d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091d4:	f000 b8da 	b.w	800938c <__malloc_unlock>
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d908      	bls.n	80091ee <_free_r+0x46>
 80091dc:	6825      	ldr	r5, [r4, #0]
 80091de:	1961      	adds	r1, r4, r5
 80091e0:	428b      	cmp	r3, r1
 80091e2:	bf01      	itttt	eq
 80091e4:	6819      	ldreq	r1, [r3, #0]
 80091e6:	685b      	ldreq	r3, [r3, #4]
 80091e8:	1949      	addeq	r1, r1, r5
 80091ea:	6021      	streq	r1, [r4, #0]
 80091ec:	e7ed      	b.n	80091ca <_free_r+0x22>
 80091ee:	461a      	mov	r2, r3
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	b10b      	cbz	r3, 80091f8 <_free_r+0x50>
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d9fa      	bls.n	80091ee <_free_r+0x46>
 80091f8:	6811      	ldr	r1, [r2, #0]
 80091fa:	1855      	adds	r5, r2, r1
 80091fc:	42a5      	cmp	r5, r4
 80091fe:	d10b      	bne.n	8009218 <_free_r+0x70>
 8009200:	6824      	ldr	r4, [r4, #0]
 8009202:	4421      	add	r1, r4
 8009204:	1854      	adds	r4, r2, r1
 8009206:	42a3      	cmp	r3, r4
 8009208:	6011      	str	r1, [r2, #0]
 800920a:	d1e0      	bne.n	80091ce <_free_r+0x26>
 800920c:	681c      	ldr	r4, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	6053      	str	r3, [r2, #4]
 8009212:	440c      	add	r4, r1
 8009214:	6014      	str	r4, [r2, #0]
 8009216:	e7da      	b.n	80091ce <_free_r+0x26>
 8009218:	d902      	bls.n	8009220 <_free_r+0x78>
 800921a:	230c      	movs	r3, #12
 800921c:	6003      	str	r3, [r0, #0]
 800921e:	e7d6      	b.n	80091ce <_free_r+0x26>
 8009220:	6825      	ldr	r5, [r4, #0]
 8009222:	1961      	adds	r1, r4, r5
 8009224:	428b      	cmp	r3, r1
 8009226:	bf04      	itt	eq
 8009228:	6819      	ldreq	r1, [r3, #0]
 800922a:	685b      	ldreq	r3, [r3, #4]
 800922c:	6063      	str	r3, [r4, #4]
 800922e:	bf04      	itt	eq
 8009230:	1949      	addeq	r1, r1, r5
 8009232:	6021      	streq	r1, [r4, #0]
 8009234:	6054      	str	r4, [r2, #4]
 8009236:	e7ca      	b.n	80091ce <_free_r+0x26>
 8009238:	b003      	add	sp, #12
 800923a:	bd30      	pop	{r4, r5, pc}
 800923c:	20004c88 	.word	0x20004c88

08009240 <sbrk_aligned>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	4e0e      	ldr	r6, [pc, #56]	; (800927c <sbrk_aligned+0x3c>)
 8009244:	460c      	mov	r4, r1
 8009246:	6831      	ldr	r1, [r6, #0]
 8009248:	4605      	mov	r5, r0
 800924a:	b911      	cbnz	r1, 8009252 <sbrk_aligned+0x12>
 800924c:	f001 f86c 	bl	800a328 <_sbrk_r>
 8009250:	6030      	str	r0, [r6, #0]
 8009252:	4621      	mov	r1, r4
 8009254:	4628      	mov	r0, r5
 8009256:	f001 f867 	bl	800a328 <_sbrk_r>
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	d00a      	beq.n	8009274 <sbrk_aligned+0x34>
 800925e:	1cc4      	adds	r4, r0, #3
 8009260:	f024 0403 	bic.w	r4, r4, #3
 8009264:	42a0      	cmp	r0, r4
 8009266:	d007      	beq.n	8009278 <sbrk_aligned+0x38>
 8009268:	1a21      	subs	r1, r4, r0
 800926a:	4628      	mov	r0, r5
 800926c:	f001 f85c 	bl	800a328 <_sbrk_r>
 8009270:	3001      	adds	r0, #1
 8009272:	d101      	bne.n	8009278 <sbrk_aligned+0x38>
 8009274:	f04f 34ff 	mov.w	r4, #4294967295
 8009278:	4620      	mov	r0, r4
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	20004c8c 	.word	0x20004c8c

08009280 <_malloc_r>:
 8009280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009284:	1ccd      	adds	r5, r1, #3
 8009286:	f025 0503 	bic.w	r5, r5, #3
 800928a:	3508      	adds	r5, #8
 800928c:	2d0c      	cmp	r5, #12
 800928e:	bf38      	it	cc
 8009290:	250c      	movcc	r5, #12
 8009292:	2d00      	cmp	r5, #0
 8009294:	4607      	mov	r7, r0
 8009296:	db01      	blt.n	800929c <_malloc_r+0x1c>
 8009298:	42a9      	cmp	r1, r5
 800929a:	d905      	bls.n	80092a8 <_malloc_r+0x28>
 800929c:	230c      	movs	r3, #12
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	2600      	movs	r6, #0
 80092a2:	4630      	mov	r0, r6
 80092a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800937c <_malloc_r+0xfc>
 80092ac:	f000 f868 	bl	8009380 <__malloc_lock>
 80092b0:	f8d8 3000 	ldr.w	r3, [r8]
 80092b4:	461c      	mov	r4, r3
 80092b6:	bb5c      	cbnz	r4, 8009310 <_malloc_r+0x90>
 80092b8:	4629      	mov	r1, r5
 80092ba:	4638      	mov	r0, r7
 80092bc:	f7ff ffc0 	bl	8009240 <sbrk_aligned>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	4604      	mov	r4, r0
 80092c4:	d155      	bne.n	8009372 <_malloc_r+0xf2>
 80092c6:	f8d8 4000 	ldr.w	r4, [r8]
 80092ca:	4626      	mov	r6, r4
 80092cc:	2e00      	cmp	r6, #0
 80092ce:	d145      	bne.n	800935c <_malloc_r+0xdc>
 80092d0:	2c00      	cmp	r4, #0
 80092d2:	d048      	beq.n	8009366 <_malloc_r+0xe6>
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	4631      	mov	r1, r6
 80092d8:	4638      	mov	r0, r7
 80092da:	eb04 0903 	add.w	r9, r4, r3
 80092de:	f001 f823 	bl	800a328 <_sbrk_r>
 80092e2:	4581      	cmp	r9, r0
 80092e4:	d13f      	bne.n	8009366 <_malloc_r+0xe6>
 80092e6:	6821      	ldr	r1, [r4, #0]
 80092e8:	1a6d      	subs	r5, r5, r1
 80092ea:	4629      	mov	r1, r5
 80092ec:	4638      	mov	r0, r7
 80092ee:	f7ff ffa7 	bl	8009240 <sbrk_aligned>
 80092f2:	3001      	adds	r0, #1
 80092f4:	d037      	beq.n	8009366 <_malloc_r+0xe6>
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	442b      	add	r3, r5
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d038      	beq.n	8009376 <_malloc_r+0xf6>
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	42a2      	cmp	r2, r4
 8009308:	d12b      	bne.n	8009362 <_malloc_r+0xe2>
 800930a:	2200      	movs	r2, #0
 800930c:	605a      	str	r2, [r3, #4]
 800930e:	e00f      	b.n	8009330 <_malloc_r+0xb0>
 8009310:	6822      	ldr	r2, [r4, #0]
 8009312:	1b52      	subs	r2, r2, r5
 8009314:	d41f      	bmi.n	8009356 <_malloc_r+0xd6>
 8009316:	2a0b      	cmp	r2, #11
 8009318:	d917      	bls.n	800934a <_malloc_r+0xca>
 800931a:	1961      	adds	r1, r4, r5
 800931c:	42a3      	cmp	r3, r4
 800931e:	6025      	str	r5, [r4, #0]
 8009320:	bf18      	it	ne
 8009322:	6059      	strne	r1, [r3, #4]
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	bf08      	it	eq
 8009328:	f8c8 1000 	streq.w	r1, [r8]
 800932c:	5162      	str	r2, [r4, r5]
 800932e:	604b      	str	r3, [r1, #4]
 8009330:	4638      	mov	r0, r7
 8009332:	f104 060b 	add.w	r6, r4, #11
 8009336:	f000 f829 	bl	800938c <__malloc_unlock>
 800933a:	f026 0607 	bic.w	r6, r6, #7
 800933e:	1d23      	adds	r3, r4, #4
 8009340:	1af2      	subs	r2, r6, r3
 8009342:	d0ae      	beq.n	80092a2 <_malloc_r+0x22>
 8009344:	1b9b      	subs	r3, r3, r6
 8009346:	50a3      	str	r3, [r4, r2]
 8009348:	e7ab      	b.n	80092a2 <_malloc_r+0x22>
 800934a:	42a3      	cmp	r3, r4
 800934c:	6862      	ldr	r2, [r4, #4]
 800934e:	d1dd      	bne.n	800930c <_malloc_r+0x8c>
 8009350:	f8c8 2000 	str.w	r2, [r8]
 8009354:	e7ec      	b.n	8009330 <_malloc_r+0xb0>
 8009356:	4623      	mov	r3, r4
 8009358:	6864      	ldr	r4, [r4, #4]
 800935a:	e7ac      	b.n	80092b6 <_malloc_r+0x36>
 800935c:	4634      	mov	r4, r6
 800935e:	6876      	ldr	r6, [r6, #4]
 8009360:	e7b4      	b.n	80092cc <_malloc_r+0x4c>
 8009362:	4613      	mov	r3, r2
 8009364:	e7cc      	b.n	8009300 <_malloc_r+0x80>
 8009366:	230c      	movs	r3, #12
 8009368:	603b      	str	r3, [r7, #0]
 800936a:	4638      	mov	r0, r7
 800936c:	f000 f80e 	bl	800938c <__malloc_unlock>
 8009370:	e797      	b.n	80092a2 <_malloc_r+0x22>
 8009372:	6025      	str	r5, [r4, #0]
 8009374:	e7dc      	b.n	8009330 <_malloc_r+0xb0>
 8009376:	605b      	str	r3, [r3, #4]
 8009378:	deff      	udf	#255	; 0xff
 800937a:	bf00      	nop
 800937c:	20004c88 	.word	0x20004c88

08009380 <__malloc_lock>:
 8009380:	4801      	ldr	r0, [pc, #4]	; (8009388 <__malloc_lock+0x8>)
 8009382:	f7ff bf00 	b.w	8009186 <__retarget_lock_acquire_recursive>
 8009386:	bf00      	nop
 8009388:	20004c84 	.word	0x20004c84

0800938c <__malloc_unlock>:
 800938c:	4801      	ldr	r0, [pc, #4]	; (8009394 <__malloc_unlock+0x8>)
 800938e:	f7ff befb 	b.w	8009188 <__retarget_lock_release_recursive>
 8009392:	bf00      	nop
 8009394:	20004c84 	.word	0x20004c84

08009398 <__ssputs_r>:
 8009398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	688e      	ldr	r6, [r1, #8]
 800939e:	461f      	mov	r7, r3
 80093a0:	42be      	cmp	r6, r7
 80093a2:	680b      	ldr	r3, [r1, #0]
 80093a4:	4682      	mov	sl, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	4690      	mov	r8, r2
 80093aa:	d82c      	bhi.n	8009406 <__ssputs_r+0x6e>
 80093ac:	898a      	ldrh	r2, [r1, #12]
 80093ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093b2:	d026      	beq.n	8009402 <__ssputs_r+0x6a>
 80093b4:	6965      	ldr	r5, [r4, #20]
 80093b6:	6909      	ldr	r1, [r1, #16]
 80093b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093bc:	eba3 0901 	sub.w	r9, r3, r1
 80093c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093c4:	1c7b      	adds	r3, r7, #1
 80093c6:	444b      	add	r3, r9
 80093c8:	106d      	asrs	r5, r5, #1
 80093ca:	429d      	cmp	r5, r3
 80093cc:	bf38      	it	cc
 80093ce:	461d      	movcc	r5, r3
 80093d0:	0553      	lsls	r3, r2, #21
 80093d2:	d527      	bpl.n	8009424 <__ssputs_r+0x8c>
 80093d4:	4629      	mov	r1, r5
 80093d6:	f7ff ff53 	bl	8009280 <_malloc_r>
 80093da:	4606      	mov	r6, r0
 80093dc:	b360      	cbz	r0, 8009438 <__ssputs_r+0xa0>
 80093de:	6921      	ldr	r1, [r4, #16]
 80093e0:	464a      	mov	r2, r9
 80093e2:	f7ff fed2 	bl	800918a <memcpy>
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	6126      	str	r6, [r4, #16]
 80093f4:	6165      	str	r5, [r4, #20]
 80093f6:	444e      	add	r6, r9
 80093f8:	eba5 0509 	sub.w	r5, r5, r9
 80093fc:	6026      	str	r6, [r4, #0]
 80093fe:	60a5      	str	r5, [r4, #8]
 8009400:	463e      	mov	r6, r7
 8009402:	42be      	cmp	r6, r7
 8009404:	d900      	bls.n	8009408 <__ssputs_r+0x70>
 8009406:	463e      	mov	r6, r7
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	4632      	mov	r2, r6
 800940c:	4641      	mov	r1, r8
 800940e:	f000 ff4e 	bl	800a2ae <memmove>
 8009412:	68a3      	ldr	r3, [r4, #8]
 8009414:	1b9b      	subs	r3, r3, r6
 8009416:	60a3      	str	r3, [r4, #8]
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	4433      	add	r3, r6
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	2000      	movs	r0, #0
 8009420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009424:	462a      	mov	r2, r5
 8009426:	f000 ff8f 	bl	800a348 <_realloc_r>
 800942a:	4606      	mov	r6, r0
 800942c:	2800      	cmp	r0, #0
 800942e:	d1e0      	bne.n	80093f2 <__ssputs_r+0x5a>
 8009430:	6921      	ldr	r1, [r4, #16]
 8009432:	4650      	mov	r0, sl
 8009434:	f7ff feb8 	bl	80091a8 <_free_r>
 8009438:	230c      	movs	r3, #12
 800943a:	f8ca 3000 	str.w	r3, [sl]
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009444:	81a3      	strh	r3, [r4, #12]
 8009446:	f04f 30ff 	mov.w	r0, #4294967295
 800944a:	e7e9      	b.n	8009420 <__ssputs_r+0x88>

0800944c <_svfiprintf_r>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	4698      	mov	r8, r3
 8009452:	898b      	ldrh	r3, [r1, #12]
 8009454:	061b      	lsls	r3, r3, #24
 8009456:	b09d      	sub	sp, #116	; 0x74
 8009458:	4607      	mov	r7, r0
 800945a:	460d      	mov	r5, r1
 800945c:	4614      	mov	r4, r2
 800945e:	d50e      	bpl.n	800947e <_svfiprintf_r+0x32>
 8009460:	690b      	ldr	r3, [r1, #16]
 8009462:	b963      	cbnz	r3, 800947e <_svfiprintf_r+0x32>
 8009464:	2140      	movs	r1, #64	; 0x40
 8009466:	f7ff ff0b 	bl	8009280 <_malloc_r>
 800946a:	6028      	str	r0, [r5, #0]
 800946c:	6128      	str	r0, [r5, #16]
 800946e:	b920      	cbnz	r0, 800947a <_svfiprintf_r+0x2e>
 8009470:	230c      	movs	r3, #12
 8009472:	603b      	str	r3, [r7, #0]
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	e0d0      	b.n	800961c <_svfiprintf_r+0x1d0>
 800947a:	2340      	movs	r3, #64	; 0x40
 800947c:	616b      	str	r3, [r5, #20]
 800947e:	2300      	movs	r3, #0
 8009480:	9309      	str	r3, [sp, #36]	; 0x24
 8009482:	2320      	movs	r3, #32
 8009484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009488:	f8cd 800c 	str.w	r8, [sp, #12]
 800948c:	2330      	movs	r3, #48	; 0x30
 800948e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009634 <_svfiprintf_r+0x1e8>
 8009492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009496:	f04f 0901 	mov.w	r9, #1
 800949a:	4623      	mov	r3, r4
 800949c:	469a      	mov	sl, r3
 800949e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a2:	b10a      	cbz	r2, 80094a8 <_svfiprintf_r+0x5c>
 80094a4:	2a25      	cmp	r2, #37	; 0x25
 80094a6:	d1f9      	bne.n	800949c <_svfiprintf_r+0x50>
 80094a8:	ebba 0b04 	subs.w	fp, sl, r4
 80094ac:	d00b      	beq.n	80094c6 <_svfiprintf_r+0x7a>
 80094ae:	465b      	mov	r3, fp
 80094b0:	4622      	mov	r2, r4
 80094b2:	4629      	mov	r1, r5
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7ff ff6f 	bl	8009398 <__ssputs_r>
 80094ba:	3001      	adds	r0, #1
 80094bc:	f000 80a9 	beq.w	8009612 <_svfiprintf_r+0x1c6>
 80094c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c2:	445a      	add	r2, fp
 80094c4:	9209      	str	r2, [sp, #36]	; 0x24
 80094c6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 80a1 	beq.w	8009612 <_svfiprintf_r+0x1c6>
 80094d0:	2300      	movs	r3, #0
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094da:	f10a 0a01 	add.w	sl, sl, #1
 80094de:	9304      	str	r3, [sp, #16]
 80094e0:	9307      	str	r3, [sp, #28]
 80094e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094e6:	931a      	str	r3, [sp, #104]	; 0x68
 80094e8:	4654      	mov	r4, sl
 80094ea:	2205      	movs	r2, #5
 80094ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f0:	4850      	ldr	r0, [pc, #320]	; (8009634 <_svfiprintf_r+0x1e8>)
 80094f2:	f7f6 fe7d 	bl	80001f0 <memchr>
 80094f6:	9a04      	ldr	r2, [sp, #16]
 80094f8:	b9d8      	cbnz	r0, 8009532 <_svfiprintf_r+0xe6>
 80094fa:	06d0      	lsls	r0, r2, #27
 80094fc:	bf44      	itt	mi
 80094fe:	2320      	movmi	r3, #32
 8009500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009504:	0711      	lsls	r1, r2, #28
 8009506:	bf44      	itt	mi
 8009508:	232b      	movmi	r3, #43	; 0x2b
 800950a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800950e:	f89a 3000 	ldrb.w	r3, [sl]
 8009512:	2b2a      	cmp	r3, #42	; 0x2a
 8009514:	d015      	beq.n	8009542 <_svfiprintf_r+0xf6>
 8009516:	9a07      	ldr	r2, [sp, #28]
 8009518:	4654      	mov	r4, sl
 800951a:	2000      	movs	r0, #0
 800951c:	f04f 0c0a 	mov.w	ip, #10
 8009520:	4621      	mov	r1, r4
 8009522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009526:	3b30      	subs	r3, #48	; 0x30
 8009528:	2b09      	cmp	r3, #9
 800952a:	d94d      	bls.n	80095c8 <_svfiprintf_r+0x17c>
 800952c:	b1b0      	cbz	r0, 800955c <_svfiprintf_r+0x110>
 800952e:	9207      	str	r2, [sp, #28]
 8009530:	e014      	b.n	800955c <_svfiprintf_r+0x110>
 8009532:	eba0 0308 	sub.w	r3, r0, r8
 8009536:	fa09 f303 	lsl.w	r3, r9, r3
 800953a:	4313      	orrs	r3, r2
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	46a2      	mov	sl, r4
 8009540:	e7d2      	b.n	80094e8 <_svfiprintf_r+0x9c>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	1d19      	adds	r1, r3, #4
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	9103      	str	r1, [sp, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	bfbb      	ittet	lt
 800954e:	425b      	neglt	r3, r3
 8009550:	f042 0202 	orrlt.w	r2, r2, #2
 8009554:	9307      	strge	r3, [sp, #28]
 8009556:	9307      	strlt	r3, [sp, #28]
 8009558:	bfb8      	it	lt
 800955a:	9204      	strlt	r2, [sp, #16]
 800955c:	7823      	ldrb	r3, [r4, #0]
 800955e:	2b2e      	cmp	r3, #46	; 0x2e
 8009560:	d10c      	bne.n	800957c <_svfiprintf_r+0x130>
 8009562:	7863      	ldrb	r3, [r4, #1]
 8009564:	2b2a      	cmp	r3, #42	; 0x2a
 8009566:	d134      	bne.n	80095d2 <_svfiprintf_r+0x186>
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	1d1a      	adds	r2, r3, #4
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	9203      	str	r2, [sp, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	bfb8      	it	lt
 8009574:	f04f 33ff 	movlt.w	r3, #4294967295
 8009578:	3402      	adds	r4, #2
 800957a:	9305      	str	r3, [sp, #20]
 800957c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009644 <_svfiprintf_r+0x1f8>
 8009580:	7821      	ldrb	r1, [r4, #0]
 8009582:	2203      	movs	r2, #3
 8009584:	4650      	mov	r0, sl
 8009586:	f7f6 fe33 	bl	80001f0 <memchr>
 800958a:	b138      	cbz	r0, 800959c <_svfiprintf_r+0x150>
 800958c:	9b04      	ldr	r3, [sp, #16]
 800958e:	eba0 000a 	sub.w	r0, r0, sl
 8009592:	2240      	movs	r2, #64	; 0x40
 8009594:	4082      	lsls	r2, r0
 8009596:	4313      	orrs	r3, r2
 8009598:	3401      	adds	r4, #1
 800959a:	9304      	str	r3, [sp, #16]
 800959c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a0:	4825      	ldr	r0, [pc, #148]	; (8009638 <_svfiprintf_r+0x1ec>)
 80095a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095a6:	2206      	movs	r2, #6
 80095a8:	f7f6 fe22 	bl	80001f0 <memchr>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d038      	beq.n	8009622 <_svfiprintf_r+0x1d6>
 80095b0:	4b22      	ldr	r3, [pc, #136]	; (800963c <_svfiprintf_r+0x1f0>)
 80095b2:	bb1b      	cbnz	r3, 80095fc <_svfiprintf_r+0x1b0>
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	3307      	adds	r3, #7
 80095b8:	f023 0307 	bic.w	r3, r3, #7
 80095bc:	3308      	adds	r3, #8
 80095be:	9303      	str	r3, [sp, #12]
 80095c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c2:	4433      	add	r3, r6
 80095c4:	9309      	str	r3, [sp, #36]	; 0x24
 80095c6:	e768      	b.n	800949a <_svfiprintf_r+0x4e>
 80095c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095cc:	460c      	mov	r4, r1
 80095ce:	2001      	movs	r0, #1
 80095d0:	e7a6      	b.n	8009520 <_svfiprintf_r+0xd4>
 80095d2:	2300      	movs	r3, #0
 80095d4:	3401      	adds	r4, #1
 80095d6:	9305      	str	r3, [sp, #20]
 80095d8:	4619      	mov	r1, r3
 80095da:	f04f 0c0a 	mov.w	ip, #10
 80095de:	4620      	mov	r0, r4
 80095e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e4:	3a30      	subs	r2, #48	; 0x30
 80095e6:	2a09      	cmp	r2, #9
 80095e8:	d903      	bls.n	80095f2 <_svfiprintf_r+0x1a6>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0c6      	beq.n	800957c <_svfiprintf_r+0x130>
 80095ee:	9105      	str	r1, [sp, #20]
 80095f0:	e7c4      	b.n	800957c <_svfiprintf_r+0x130>
 80095f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80095f6:	4604      	mov	r4, r0
 80095f8:	2301      	movs	r3, #1
 80095fa:	e7f0      	b.n	80095de <_svfiprintf_r+0x192>
 80095fc:	ab03      	add	r3, sp, #12
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	462a      	mov	r2, r5
 8009602:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <_svfiprintf_r+0x1f4>)
 8009604:	a904      	add	r1, sp, #16
 8009606:	4638      	mov	r0, r7
 8009608:	f3af 8000 	nop.w
 800960c:	1c42      	adds	r2, r0, #1
 800960e:	4606      	mov	r6, r0
 8009610:	d1d6      	bne.n	80095c0 <_svfiprintf_r+0x174>
 8009612:	89ab      	ldrh	r3, [r5, #12]
 8009614:	065b      	lsls	r3, r3, #25
 8009616:	f53f af2d 	bmi.w	8009474 <_svfiprintf_r+0x28>
 800961a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800961c:	b01d      	add	sp, #116	; 0x74
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	ab03      	add	r3, sp, #12
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	462a      	mov	r2, r5
 8009628:	4b05      	ldr	r3, [pc, #20]	; (8009640 <_svfiprintf_r+0x1f4>)
 800962a:	a904      	add	r1, sp, #16
 800962c:	4638      	mov	r0, r7
 800962e:	f000 fa4b 	bl	8009ac8 <_printf_i>
 8009632:	e7eb      	b.n	800960c <_svfiprintf_r+0x1c0>
 8009634:	0800a8c4 	.word	0x0800a8c4
 8009638:	0800a8ce 	.word	0x0800a8ce
 800963c:	00000000 	.word	0x00000000
 8009640:	08009399 	.word	0x08009399
 8009644:	0800a8ca 	.word	0x0800a8ca

08009648 <_sungetc_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	1c4b      	adds	r3, r1, #1
 800964c:	4614      	mov	r4, r2
 800964e:	d103      	bne.n	8009658 <_sungetc_r+0x10>
 8009650:	f04f 35ff 	mov.w	r5, #4294967295
 8009654:	4628      	mov	r0, r5
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	8993      	ldrh	r3, [r2, #12]
 800965a:	f023 0320 	bic.w	r3, r3, #32
 800965e:	8193      	strh	r3, [r2, #12]
 8009660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009662:	6852      	ldr	r2, [r2, #4]
 8009664:	b2cd      	uxtb	r5, r1
 8009666:	b18b      	cbz	r3, 800968c <_sungetc_r+0x44>
 8009668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800966a:	4293      	cmp	r3, r2
 800966c:	dd08      	ble.n	8009680 <_sungetc_r+0x38>
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	1e5a      	subs	r2, r3, #1
 8009672:	6022      	str	r2, [r4, #0]
 8009674:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009678:	6863      	ldr	r3, [r4, #4]
 800967a:	3301      	adds	r3, #1
 800967c:	6063      	str	r3, [r4, #4]
 800967e:	e7e9      	b.n	8009654 <_sungetc_r+0xc>
 8009680:	4621      	mov	r1, r4
 8009682:	f000 fdda 	bl	800a23a <__submore>
 8009686:	2800      	cmp	r0, #0
 8009688:	d0f1      	beq.n	800966e <_sungetc_r+0x26>
 800968a:	e7e1      	b.n	8009650 <_sungetc_r+0x8>
 800968c:	6921      	ldr	r1, [r4, #16]
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	b151      	cbz	r1, 80096a8 <_sungetc_r+0x60>
 8009692:	4299      	cmp	r1, r3
 8009694:	d208      	bcs.n	80096a8 <_sungetc_r+0x60>
 8009696:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800969a:	42a9      	cmp	r1, r5
 800969c:	d104      	bne.n	80096a8 <_sungetc_r+0x60>
 800969e:	3b01      	subs	r3, #1
 80096a0:	3201      	adds	r2, #1
 80096a2:	6023      	str	r3, [r4, #0]
 80096a4:	6062      	str	r2, [r4, #4]
 80096a6:	e7d5      	b.n	8009654 <_sungetc_r+0xc>
 80096a8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80096ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096b0:	6363      	str	r3, [r4, #52]	; 0x34
 80096b2:	2303      	movs	r3, #3
 80096b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80096b6:	4623      	mov	r3, r4
 80096b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	2301      	movs	r3, #1
 80096c0:	e7dc      	b.n	800967c <_sungetc_r+0x34>

080096c2 <__ssrefill_r>:
 80096c2:	b510      	push	{r4, lr}
 80096c4:	460c      	mov	r4, r1
 80096c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80096c8:	b169      	cbz	r1, 80096e6 <__ssrefill_r+0x24>
 80096ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ce:	4299      	cmp	r1, r3
 80096d0:	d001      	beq.n	80096d6 <__ssrefill_r+0x14>
 80096d2:	f7ff fd69 	bl	80091a8 <_free_r>
 80096d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096d8:	6063      	str	r3, [r4, #4]
 80096da:	2000      	movs	r0, #0
 80096dc:	6360      	str	r0, [r4, #52]	; 0x34
 80096de:	b113      	cbz	r3, 80096e6 <__ssrefill_r+0x24>
 80096e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	6923      	ldr	r3, [r4, #16]
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	6063      	str	r3, [r4, #4]
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	f043 0320 	orr.w	r3, r3, #32
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	f04f 30ff 	mov.w	r0, #4294967295
 80096fa:	e7f3      	b.n	80096e4 <__ssrefill_r+0x22>

080096fc <__ssvfiscanf_r>:
 80096fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009700:	460c      	mov	r4, r1
 8009702:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009706:	2100      	movs	r1, #0
 8009708:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800970c:	49a6      	ldr	r1, [pc, #664]	; (80099a8 <__ssvfiscanf_r+0x2ac>)
 800970e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009710:	f10d 0804 	add.w	r8, sp, #4
 8009714:	49a5      	ldr	r1, [pc, #660]	; (80099ac <__ssvfiscanf_r+0x2b0>)
 8009716:	4fa6      	ldr	r7, [pc, #664]	; (80099b0 <__ssvfiscanf_r+0x2b4>)
 8009718:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80099b4 <__ssvfiscanf_r+0x2b8>
 800971c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009720:	4606      	mov	r6, r0
 8009722:	91a1      	str	r1, [sp, #644]	; 0x284
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	7813      	ldrb	r3, [r2, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 815a 	beq.w	80099e2 <__ssvfiscanf_r+0x2e6>
 800972e:	5cf9      	ldrb	r1, [r7, r3]
 8009730:	f011 0108 	ands.w	r1, r1, #8
 8009734:	f102 0501 	add.w	r5, r2, #1
 8009738:	d019      	beq.n	800976e <__ssvfiscanf_r+0x72>
 800973a:	6863      	ldr	r3, [r4, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dd0f      	ble.n	8009760 <__ssvfiscanf_r+0x64>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	781a      	ldrb	r2, [r3, #0]
 8009744:	5cba      	ldrb	r2, [r7, r2]
 8009746:	0712      	lsls	r2, r2, #28
 8009748:	d401      	bmi.n	800974e <__ssvfiscanf_r+0x52>
 800974a:	462a      	mov	r2, r5
 800974c:	e7eb      	b.n	8009726 <__ssvfiscanf_r+0x2a>
 800974e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009750:	3201      	adds	r2, #1
 8009752:	9245      	str	r2, [sp, #276]	; 0x114
 8009754:	6862      	ldr	r2, [r4, #4]
 8009756:	3301      	adds	r3, #1
 8009758:	3a01      	subs	r2, #1
 800975a:	6062      	str	r2, [r4, #4]
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	e7ec      	b.n	800973a <__ssvfiscanf_r+0x3e>
 8009760:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009762:	4621      	mov	r1, r4
 8009764:	4630      	mov	r0, r6
 8009766:	4798      	blx	r3
 8009768:	2800      	cmp	r0, #0
 800976a:	d0e9      	beq.n	8009740 <__ssvfiscanf_r+0x44>
 800976c:	e7ed      	b.n	800974a <__ssvfiscanf_r+0x4e>
 800976e:	2b25      	cmp	r3, #37	; 0x25
 8009770:	d012      	beq.n	8009798 <__ssvfiscanf_r+0x9c>
 8009772:	469a      	mov	sl, r3
 8009774:	6863      	ldr	r3, [r4, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f340 8091 	ble.w	800989e <__ssvfiscanf_r+0x1a2>
 800977c:	6822      	ldr	r2, [r4, #0]
 800977e:	7813      	ldrb	r3, [r2, #0]
 8009780:	4553      	cmp	r3, sl
 8009782:	f040 812e 	bne.w	80099e2 <__ssvfiscanf_r+0x2e6>
 8009786:	6863      	ldr	r3, [r4, #4]
 8009788:	3b01      	subs	r3, #1
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800978e:	3201      	adds	r2, #1
 8009790:	3301      	adds	r3, #1
 8009792:	6022      	str	r2, [r4, #0]
 8009794:	9345      	str	r3, [sp, #276]	; 0x114
 8009796:	e7d8      	b.n	800974a <__ssvfiscanf_r+0x4e>
 8009798:	9141      	str	r1, [sp, #260]	; 0x104
 800979a:	9143      	str	r1, [sp, #268]	; 0x10c
 800979c:	7853      	ldrb	r3, [r2, #1]
 800979e:	2b2a      	cmp	r3, #42	; 0x2a
 80097a0:	bf02      	ittt	eq
 80097a2:	2310      	moveq	r3, #16
 80097a4:	1c95      	addeq	r5, r2, #2
 80097a6:	9341      	streq	r3, [sp, #260]	; 0x104
 80097a8:	220a      	movs	r2, #10
 80097aa:	46aa      	mov	sl, r5
 80097ac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80097b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d91c      	bls.n	80097f2 <__ssvfiscanf_r+0xf6>
 80097b8:	487e      	ldr	r0, [pc, #504]	; (80099b4 <__ssvfiscanf_r+0x2b8>)
 80097ba:	2203      	movs	r2, #3
 80097bc:	f7f6 fd18 	bl	80001f0 <memchr>
 80097c0:	b138      	cbz	r0, 80097d2 <__ssvfiscanf_r+0xd6>
 80097c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80097c4:	eba0 0009 	sub.w	r0, r0, r9
 80097c8:	2301      	movs	r3, #1
 80097ca:	4083      	lsls	r3, r0
 80097cc:	4313      	orrs	r3, r2
 80097ce:	9341      	str	r3, [sp, #260]	; 0x104
 80097d0:	4655      	mov	r5, sl
 80097d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097d6:	2b78      	cmp	r3, #120	; 0x78
 80097d8:	d806      	bhi.n	80097e8 <__ssvfiscanf_r+0xec>
 80097da:	2b57      	cmp	r3, #87	; 0x57
 80097dc:	d810      	bhi.n	8009800 <__ssvfiscanf_r+0x104>
 80097de:	2b25      	cmp	r3, #37	; 0x25
 80097e0:	d0c7      	beq.n	8009772 <__ssvfiscanf_r+0x76>
 80097e2:	d857      	bhi.n	8009894 <__ssvfiscanf_r+0x198>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d065      	beq.n	80098b4 <__ssvfiscanf_r+0x1b8>
 80097e8:	2303      	movs	r3, #3
 80097ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80097ec:	230a      	movs	r3, #10
 80097ee:	9342      	str	r3, [sp, #264]	; 0x108
 80097f0:	e076      	b.n	80098e0 <__ssvfiscanf_r+0x1e4>
 80097f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80097f4:	fb02 1103 	mla	r1, r2, r3, r1
 80097f8:	3930      	subs	r1, #48	; 0x30
 80097fa:	9143      	str	r1, [sp, #268]	; 0x10c
 80097fc:	4655      	mov	r5, sl
 80097fe:	e7d4      	b.n	80097aa <__ssvfiscanf_r+0xae>
 8009800:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009804:	2a20      	cmp	r2, #32
 8009806:	d8ef      	bhi.n	80097e8 <__ssvfiscanf_r+0xec>
 8009808:	a101      	add	r1, pc, #4	; (adr r1, 8009810 <__ssvfiscanf_r+0x114>)
 800980a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800980e:	bf00      	nop
 8009810:	080098c3 	.word	0x080098c3
 8009814:	080097e9 	.word	0x080097e9
 8009818:	080097e9 	.word	0x080097e9
 800981c:	08009921 	.word	0x08009921
 8009820:	080097e9 	.word	0x080097e9
 8009824:	080097e9 	.word	0x080097e9
 8009828:	080097e9 	.word	0x080097e9
 800982c:	080097e9 	.word	0x080097e9
 8009830:	080097e9 	.word	0x080097e9
 8009834:	080097e9 	.word	0x080097e9
 8009838:	080097e9 	.word	0x080097e9
 800983c:	08009937 	.word	0x08009937
 8009840:	0800991d 	.word	0x0800991d
 8009844:	0800989b 	.word	0x0800989b
 8009848:	0800989b 	.word	0x0800989b
 800984c:	0800989b 	.word	0x0800989b
 8009850:	080097e9 	.word	0x080097e9
 8009854:	080098d9 	.word	0x080098d9
 8009858:	080097e9 	.word	0x080097e9
 800985c:	080097e9 	.word	0x080097e9
 8009860:	080097e9 	.word	0x080097e9
 8009864:	080097e9 	.word	0x080097e9
 8009868:	08009947 	.word	0x08009947
 800986c:	08009915 	.word	0x08009915
 8009870:	080098bb 	.word	0x080098bb
 8009874:	080097e9 	.word	0x080097e9
 8009878:	080097e9 	.word	0x080097e9
 800987c:	08009943 	.word	0x08009943
 8009880:	080097e9 	.word	0x080097e9
 8009884:	0800991d 	.word	0x0800991d
 8009888:	080097e9 	.word	0x080097e9
 800988c:	080097e9 	.word	0x080097e9
 8009890:	080098c3 	.word	0x080098c3
 8009894:	3b45      	subs	r3, #69	; 0x45
 8009896:	2b02      	cmp	r3, #2
 8009898:	d8a6      	bhi.n	80097e8 <__ssvfiscanf_r+0xec>
 800989a:	2305      	movs	r3, #5
 800989c:	e01f      	b.n	80098de <__ssvfiscanf_r+0x1e2>
 800989e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098a0:	4621      	mov	r1, r4
 80098a2:	4630      	mov	r0, r6
 80098a4:	4798      	blx	r3
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f43f af68 	beq.w	800977c <__ssvfiscanf_r+0x80>
 80098ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f040 808d 	bne.w	80099ce <__ssvfiscanf_r+0x2d2>
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	e08f      	b.n	80099da <__ssvfiscanf_r+0x2de>
 80098ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80098bc:	f042 0220 	orr.w	r2, r2, #32
 80098c0:	9241      	str	r2, [sp, #260]	; 0x104
 80098c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80098c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c8:	9241      	str	r2, [sp, #260]	; 0x104
 80098ca:	2210      	movs	r2, #16
 80098cc:	2b6f      	cmp	r3, #111	; 0x6f
 80098ce:	9242      	str	r2, [sp, #264]	; 0x108
 80098d0:	bf34      	ite	cc
 80098d2:	2303      	movcc	r3, #3
 80098d4:	2304      	movcs	r3, #4
 80098d6:	e002      	b.n	80098de <__ssvfiscanf_r+0x1e2>
 80098d8:	2300      	movs	r3, #0
 80098da:	9342      	str	r3, [sp, #264]	; 0x108
 80098dc:	2303      	movs	r3, #3
 80098de:	9347      	str	r3, [sp, #284]	; 0x11c
 80098e0:	6863      	ldr	r3, [r4, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dd3d      	ble.n	8009962 <__ssvfiscanf_r+0x266>
 80098e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80098e8:	0659      	lsls	r1, r3, #25
 80098ea:	d404      	bmi.n	80098f6 <__ssvfiscanf_r+0x1fa>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	781a      	ldrb	r2, [r3, #0]
 80098f0:	5cba      	ldrb	r2, [r7, r2]
 80098f2:	0712      	lsls	r2, r2, #28
 80098f4:	d43c      	bmi.n	8009970 <__ssvfiscanf_r+0x274>
 80098f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	dc4b      	bgt.n	8009994 <__ssvfiscanf_r+0x298>
 80098fc:	466b      	mov	r3, sp
 80098fe:	4622      	mov	r2, r4
 8009900:	a941      	add	r1, sp, #260	; 0x104
 8009902:	4630      	mov	r0, r6
 8009904:	f000 fa02 	bl	8009d0c <_scanf_chars>
 8009908:	2801      	cmp	r0, #1
 800990a:	d06a      	beq.n	80099e2 <__ssvfiscanf_r+0x2e6>
 800990c:	2802      	cmp	r0, #2
 800990e:	f47f af1c 	bne.w	800974a <__ssvfiscanf_r+0x4e>
 8009912:	e7cb      	b.n	80098ac <__ssvfiscanf_r+0x1b0>
 8009914:	2308      	movs	r3, #8
 8009916:	9342      	str	r3, [sp, #264]	; 0x108
 8009918:	2304      	movs	r3, #4
 800991a:	e7e0      	b.n	80098de <__ssvfiscanf_r+0x1e2>
 800991c:	220a      	movs	r2, #10
 800991e:	e7d5      	b.n	80098cc <__ssvfiscanf_r+0x1d0>
 8009920:	4629      	mov	r1, r5
 8009922:	4640      	mov	r0, r8
 8009924:	f000 fc50 	bl	800a1c8 <__sccl>
 8009928:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800992a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992e:	9341      	str	r3, [sp, #260]	; 0x104
 8009930:	4605      	mov	r5, r0
 8009932:	2301      	movs	r3, #1
 8009934:	e7d3      	b.n	80098de <__ssvfiscanf_r+0x1e2>
 8009936:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993c:	9341      	str	r3, [sp, #260]	; 0x104
 800993e:	2300      	movs	r3, #0
 8009940:	e7cd      	b.n	80098de <__ssvfiscanf_r+0x1e2>
 8009942:	2302      	movs	r3, #2
 8009944:	e7cb      	b.n	80098de <__ssvfiscanf_r+0x1e2>
 8009946:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009948:	06c3      	lsls	r3, r0, #27
 800994a:	f53f aefe 	bmi.w	800974a <__ssvfiscanf_r+0x4e>
 800994e:	9b00      	ldr	r3, [sp, #0]
 8009950:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009952:	1d19      	adds	r1, r3, #4
 8009954:	9100      	str	r1, [sp, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	07c0      	lsls	r0, r0, #31
 800995a:	bf4c      	ite	mi
 800995c:	801a      	strhmi	r2, [r3, #0]
 800995e:	601a      	strpl	r2, [r3, #0]
 8009960:	e6f3      	b.n	800974a <__ssvfiscanf_r+0x4e>
 8009962:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009964:	4621      	mov	r1, r4
 8009966:	4630      	mov	r0, r6
 8009968:	4798      	blx	r3
 800996a:	2800      	cmp	r0, #0
 800996c:	d0bb      	beq.n	80098e6 <__ssvfiscanf_r+0x1ea>
 800996e:	e79d      	b.n	80098ac <__ssvfiscanf_r+0x1b0>
 8009970:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009972:	3201      	adds	r2, #1
 8009974:	9245      	str	r2, [sp, #276]	; 0x114
 8009976:	6862      	ldr	r2, [r4, #4]
 8009978:	3a01      	subs	r2, #1
 800997a:	2a00      	cmp	r2, #0
 800997c:	6062      	str	r2, [r4, #4]
 800997e:	dd02      	ble.n	8009986 <__ssvfiscanf_r+0x28a>
 8009980:	3301      	adds	r3, #1
 8009982:	6023      	str	r3, [r4, #0]
 8009984:	e7b2      	b.n	80098ec <__ssvfiscanf_r+0x1f0>
 8009986:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009988:	4621      	mov	r1, r4
 800998a:	4630      	mov	r0, r6
 800998c:	4798      	blx	r3
 800998e:	2800      	cmp	r0, #0
 8009990:	d0ac      	beq.n	80098ec <__ssvfiscanf_r+0x1f0>
 8009992:	e78b      	b.n	80098ac <__ssvfiscanf_r+0x1b0>
 8009994:	2b04      	cmp	r3, #4
 8009996:	dc0f      	bgt.n	80099b8 <__ssvfiscanf_r+0x2bc>
 8009998:	466b      	mov	r3, sp
 800999a:	4622      	mov	r2, r4
 800999c:	a941      	add	r1, sp, #260	; 0x104
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 fa0e 	bl	8009dc0 <_scanf_i>
 80099a4:	e7b0      	b.n	8009908 <__ssvfiscanf_r+0x20c>
 80099a6:	bf00      	nop
 80099a8:	08009649 	.word	0x08009649
 80099ac:	080096c3 	.word	0x080096c3
 80099b0:	0800a913 	.word	0x0800a913
 80099b4:	0800a8ca 	.word	0x0800a8ca
 80099b8:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <__ssvfiscanf_r+0x2ec>)
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f43f aec5 	beq.w	800974a <__ssvfiscanf_r+0x4e>
 80099c0:	466b      	mov	r3, sp
 80099c2:	4622      	mov	r2, r4
 80099c4:	a941      	add	r1, sp, #260	; 0x104
 80099c6:	4630      	mov	r0, r6
 80099c8:	f3af 8000 	nop.w
 80099cc:	e79c      	b.n	8009908 <__ssvfiscanf_r+0x20c>
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80099d4:	bf18      	it	ne
 80099d6:	f04f 30ff 	movne.w	r0, #4294967295
 80099da:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80099de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80099e4:	e7f9      	b.n	80099da <__ssvfiscanf_r+0x2de>
 80099e6:	bf00      	nop
 80099e8:	00000000 	.word	0x00000000

080099ec <_printf_common>:
 80099ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	4616      	mov	r6, r2
 80099f2:	4699      	mov	r9, r3
 80099f4:	688a      	ldr	r2, [r1, #8]
 80099f6:	690b      	ldr	r3, [r1, #16]
 80099f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	bfb8      	it	lt
 8009a00:	4613      	movlt	r3, r2
 8009a02:	6033      	str	r3, [r6, #0]
 8009a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a08:	4607      	mov	r7, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	b10a      	cbz	r2, 8009a12 <_printf_common+0x26>
 8009a0e:	3301      	adds	r3, #1
 8009a10:	6033      	str	r3, [r6, #0]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	0699      	lsls	r1, r3, #26
 8009a16:	bf42      	ittt	mi
 8009a18:	6833      	ldrmi	r3, [r6, #0]
 8009a1a:	3302      	addmi	r3, #2
 8009a1c:	6033      	strmi	r3, [r6, #0]
 8009a1e:	6825      	ldr	r5, [r4, #0]
 8009a20:	f015 0506 	ands.w	r5, r5, #6
 8009a24:	d106      	bne.n	8009a34 <_printf_common+0x48>
 8009a26:	f104 0a19 	add.w	sl, r4, #25
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	6832      	ldr	r2, [r6, #0]
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	dc26      	bgt.n	8009a82 <_printf_common+0x96>
 8009a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a38:	1e13      	subs	r3, r2, #0
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	bf18      	it	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	0692      	lsls	r2, r2, #26
 8009a42:	d42b      	bmi.n	8009a9c <_printf_common+0xb0>
 8009a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a48:	4649      	mov	r1, r9
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	47c0      	blx	r8
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d01e      	beq.n	8009a90 <_printf_common+0xa4>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	6922      	ldr	r2, [r4, #16]
 8009a56:	f003 0306 	and.w	r3, r3, #6
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	bf02      	ittt	eq
 8009a5e:	68e5      	ldreq	r5, [r4, #12]
 8009a60:	6833      	ldreq	r3, [r6, #0]
 8009a62:	1aed      	subeq	r5, r5, r3
 8009a64:	68a3      	ldr	r3, [r4, #8]
 8009a66:	bf0c      	ite	eq
 8009a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a6c:	2500      	movne	r5, #0
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	bfc4      	itt	gt
 8009a72:	1a9b      	subgt	r3, r3, r2
 8009a74:	18ed      	addgt	r5, r5, r3
 8009a76:	2600      	movs	r6, #0
 8009a78:	341a      	adds	r4, #26
 8009a7a:	42b5      	cmp	r5, r6
 8009a7c:	d11a      	bne.n	8009ab4 <_printf_common+0xc8>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e008      	b.n	8009a94 <_printf_common+0xa8>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4652      	mov	r2, sl
 8009a86:	4649      	mov	r1, r9
 8009a88:	4638      	mov	r0, r7
 8009a8a:	47c0      	blx	r8
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d103      	bne.n	8009a98 <_printf_common+0xac>
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a98:	3501      	adds	r5, #1
 8009a9a:	e7c6      	b.n	8009a2a <_printf_common+0x3e>
 8009a9c:	18e1      	adds	r1, r4, r3
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	2030      	movs	r0, #48	; 0x30
 8009aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aa6:	4422      	add	r2, r4
 8009aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ab0:	3302      	adds	r3, #2
 8009ab2:	e7c7      	b.n	8009a44 <_printf_common+0x58>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4649      	mov	r1, r9
 8009aba:	4638      	mov	r0, r7
 8009abc:	47c0      	blx	r8
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d0e6      	beq.n	8009a90 <_printf_common+0xa4>
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7d9      	b.n	8009a7a <_printf_common+0x8e>
	...

08009ac8 <_printf_i>:
 8009ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	7e0f      	ldrb	r7, [r1, #24]
 8009ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ad0:	2f78      	cmp	r7, #120	; 0x78
 8009ad2:	4691      	mov	r9, r2
 8009ad4:	4680      	mov	r8, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	469a      	mov	sl, r3
 8009ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ade:	d807      	bhi.n	8009af0 <_printf_i+0x28>
 8009ae0:	2f62      	cmp	r7, #98	; 0x62
 8009ae2:	d80a      	bhi.n	8009afa <_printf_i+0x32>
 8009ae4:	2f00      	cmp	r7, #0
 8009ae6:	f000 80d4 	beq.w	8009c92 <_printf_i+0x1ca>
 8009aea:	2f58      	cmp	r7, #88	; 0x58
 8009aec:	f000 80c0 	beq.w	8009c70 <_printf_i+0x1a8>
 8009af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009af8:	e03a      	b.n	8009b70 <_printf_i+0xa8>
 8009afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009afe:	2b15      	cmp	r3, #21
 8009b00:	d8f6      	bhi.n	8009af0 <_printf_i+0x28>
 8009b02:	a101      	add	r1, pc, #4	; (adr r1, 8009b08 <_printf_i+0x40>)
 8009b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b08:	08009b61 	.word	0x08009b61
 8009b0c:	08009b75 	.word	0x08009b75
 8009b10:	08009af1 	.word	0x08009af1
 8009b14:	08009af1 	.word	0x08009af1
 8009b18:	08009af1 	.word	0x08009af1
 8009b1c:	08009af1 	.word	0x08009af1
 8009b20:	08009b75 	.word	0x08009b75
 8009b24:	08009af1 	.word	0x08009af1
 8009b28:	08009af1 	.word	0x08009af1
 8009b2c:	08009af1 	.word	0x08009af1
 8009b30:	08009af1 	.word	0x08009af1
 8009b34:	08009c79 	.word	0x08009c79
 8009b38:	08009ba1 	.word	0x08009ba1
 8009b3c:	08009c33 	.word	0x08009c33
 8009b40:	08009af1 	.word	0x08009af1
 8009b44:	08009af1 	.word	0x08009af1
 8009b48:	08009c9b 	.word	0x08009c9b
 8009b4c:	08009af1 	.word	0x08009af1
 8009b50:	08009ba1 	.word	0x08009ba1
 8009b54:	08009af1 	.word	0x08009af1
 8009b58:	08009af1 	.word	0x08009af1
 8009b5c:	08009c3b 	.word	0x08009c3b
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	602a      	str	r2, [r5, #0]
 8009b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b70:	2301      	movs	r3, #1
 8009b72:	e09f      	b.n	8009cb4 <_printf_i+0x1ec>
 8009b74:	6820      	ldr	r0, [r4, #0]
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	0607      	lsls	r7, r0, #24
 8009b7a:	f103 0104 	add.w	r1, r3, #4
 8009b7e:	6029      	str	r1, [r5, #0]
 8009b80:	d501      	bpl.n	8009b86 <_printf_i+0xbe>
 8009b82:	681e      	ldr	r6, [r3, #0]
 8009b84:	e003      	b.n	8009b8e <_printf_i+0xc6>
 8009b86:	0646      	lsls	r6, r0, #25
 8009b88:	d5fb      	bpl.n	8009b82 <_printf_i+0xba>
 8009b8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b8e:	2e00      	cmp	r6, #0
 8009b90:	da03      	bge.n	8009b9a <_printf_i+0xd2>
 8009b92:	232d      	movs	r3, #45	; 0x2d
 8009b94:	4276      	negs	r6, r6
 8009b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b9a:	485a      	ldr	r0, [pc, #360]	; (8009d04 <_printf_i+0x23c>)
 8009b9c:	230a      	movs	r3, #10
 8009b9e:	e012      	b.n	8009bc6 <_printf_i+0xfe>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	6820      	ldr	r0, [r4, #0]
 8009ba4:	1d19      	adds	r1, r3, #4
 8009ba6:	6029      	str	r1, [r5, #0]
 8009ba8:	0605      	lsls	r5, r0, #24
 8009baa:	d501      	bpl.n	8009bb0 <_printf_i+0xe8>
 8009bac:	681e      	ldr	r6, [r3, #0]
 8009bae:	e002      	b.n	8009bb6 <_printf_i+0xee>
 8009bb0:	0641      	lsls	r1, r0, #25
 8009bb2:	d5fb      	bpl.n	8009bac <_printf_i+0xe4>
 8009bb4:	881e      	ldrh	r6, [r3, #0]
 8009bb6:	4853      	ldr	r0, [pc, #332]	; (8009d04 <_printf_i+0x23c>)
 8009bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8009bba:	bf0c      	ite	eq
 8009bbc:	2308      	moveq	r3, #8
 8009bbe:	230a      	movne	r3, #10
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bc6:	6865      	ldr	r5, [r4, #4]
 8009bc8:	60a5      	str	r5, [r4, #8]
 8009bca:	2d00      	cmp	r5, #0
 8009bcc:	bfa2      	ittt	ge
 8009bce:	6821      	ldrge	r1, [r4, #0]
 8009bd0:	f021 0104 	bicge.w	r1, r1, #4
 8009bd4:	6021      	strge	r1, [r4, #0]
 8009bd6:	b90e      	cbnz	r6, 8009bdc <_printf_i+0x114>
 8009bd8:	2d00      	cmp	r5, #0
 8009bda:	d04b      	beq.n	8009c74 <_printf_i+0x1ac>
 8009bdc:	4615      	mov	r5, r2
 8009bde:	fbb6 f1f3 	udiv	r1, r6, r3
 8009be2:	fb03 6711 	mls	r7, r3, r1, r6
 8009be6:	5dc7      	ldrb	r7, [r0, r7]
 8009be8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bec:	4637      	mov	r7, r6
 8009bee:	42bb      	cmp	r3, r7
 8009bf0:	460e      	mov	r6, r1
 8009bf2:	d9f4      	bls.n	8009bde <_printf_i+0x116>
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d10b      	bne.n	8009c10 <_printf_i+0x148>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	07de      	lsls	r6, r3, #31
 8009bfc:	d508      	bpl.n	8009c10 <_printf_i+0x148>
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	6861      	ldr	r1, [r4, #4]
 8009c02:	4299      	cmp	r1, r3
 8009c04:	bfde      	ittt	le
 8009c06:	2330      	movle	r3, #48	; 0x30
 8009c08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c10:	1b52      	subs	r2, r2, r5
 8009c12:	6122      	str	r2, [r4, #16]
 8009c14:	f8cd a000 	str.w	sl, [sp]
 8009c18:	464b      	mov	r3, r9
 8009c1a:	aa03      	add	r2, sp, #12
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4640      	mov	r0, r8
 8009c20:	f7ff fee4 	bl	80099ec <_printf_common>
 8009c24:	3001      	adds	r0, #1
 8009c26:	d14a      	bne.n	8009cbe <_printf_i+0x1f6>
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	b004      	add	sp, #16
 8009c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	f043 0320 	orr.w	r3, r3, #32
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	4833      	ldr	r0, [pc, #204]	; (8009d08 <_printf_i+0x240>)
 8009c3c:	2778      	movs	r7, #120	; 0x78
 8009c3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	6829      	ldr	r1, [r5, #0]
 8009c46:	061f      	lsls	r7, r3, #24
 8009c48:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c4c:	d402      	bmi.n	8009c54 <_printf_i+0x18c>
 8009c4e:	065f      	lsls	r7, r3, #25
 8009c50:	bf48      	it	mi
 8009c52:	b2b6      	uxthmi	r6, r6
 8009c54:	07df      	lsls	r7, r3, #31
 8009c56:	bf48      	it	mi
 8009c58:	f043 0320 	orrmi.w	r3, r3, #32
 8009c5c:	6029      	str	r1, [r5, #0]
 8009c5e:	bf48      	it	mi
 8009c60:	6023      	strmi	r3, [r4, #0]
 8009c62:	b91e      	cbnz	r6, 8009c6c <_printf_i+0x1a4>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	f023 0320 	bic.w	r3, r3, #32
 8009c6a:	6023      	str	r3, [r4, #0]
 8009c6c:	2310      	movs	r3, #16
 8009c6e:	e7a7      	b.n	8009bc0 <_printf_i+0xf8>
 8009c70:	4824      	ldr	r0, [pc, #144]	; (8009d04 <_printf_i+0x23c>)
 8009c72:	e7e4      	b.n	8009c3e <_printf_i+0x176>
 8009c74:	4615      	mov	r5, r2
 8009c76:	e7bd      	b.n	8009bf4 <_printf_i+0x12c>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	6826      	ldr	r6, [r4, #0]
 8009c7c:	6961      	ldr	r1, [r4, #20]
 8009c7e:	1d18      	adds	r0, r3, #4
 8009c80:	6028      	str	r0, [r5, #0]
 8009c82:	0635      	lsls	r5, r6, #24
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	d501      	bpl.n	8009c8c <_printf_i+0x1c4>
 8009c88:	6019      	str	r1, [r3, #0]
 8009c8a:	e002      	b.n	8009c92 <_printf_i+0x1ca>
 8009c8c:	0670      	lsls	r0, r6, #25
 8009c8e:	d5fb      	bpl.n	8009c88 <_printf_i+0x1c0>
 8009c90:	8019      	strh	r1, [r3, #0]
 8009c92:	2300      	movs	r3, #0
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	4615      	mov	r5, r2
 8009c98:	e7bc      	b.n	8009c14 <_printf_i+0x14c>
 8009c9a:	682b      	ldr	r3, [r5, #0]
 8009c9c:	1d1a      	adds	r2, r3, #4
 8009c9e:	602a      	str	r2, [r5, #0]
 8009ca0:	681d      	ldr	r5, [r3, #0]
 8009ca2:	6862      	ldr	r2, [r4, #4]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f7f6 faa2 	bl	80001f0 <memchr>
 8009cac:	b108      	cbz	r0, 8009cb2 <_printf_i+0x1ea>
 8009cae:	1b40      	subs	r0, r0, r5
 8009cb0:	6060      	str	r0, [r4, #4]
 8009cb2:	6863      	ldr	r3, [r4, #4]
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cbc:	e7aa      	b.n	8009c14 <_printf_i+0x14c>
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	47d0      	blx	sl
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d0ad      	beq.n	8009c28 <_printf_i+0x160>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	079b      	lsls	r3, r3, #30
 8009cd0:	d413      	bmi.n	8009cfa <_printf_i+0x232>
 8009cd2:	68e0      	ldr	r0, [r4, #12]
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	4298      	cmp	r0, r3
 8009cd8:	bfb8      	it	lt
 8009cda:	4618      	movlt	r0, r3
 8009cdc:	e7a6      	b.n	8009c2c <_printf_i+0x164>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	47d0      	blx	sl
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d09d      	beq.n	8009c28 <_printf_i+0x160>
 8009cec:	3501      	adds	r5, #1
 8009cee:	68e3      	ldr	r3, [r4, #12]
 8009cf0:	9903      	ldr	r1, [sp, #12]
 8009cf2:	1a5b      	subs	r3, r3, r1
 8009cf4:	42ab      	cmp	r3, r5
 8009cf6:	dcf2      	bgt.n	8009cde <_printf_i+0x216>
 8009cf8:	e7eb      	b.n	8009cd2 <_printf_i+0x20a>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	f104 0619 	add.w	r6, r4, #25
 8009d00:	e7f5      	b.n	8009cee <_printf_i+0x226>
 8009d02:	bf00      	nop
 8009d04:	0800a8d5 	.word	0x0800a8d5
 8009d08:	0800a8e6 	.word	0x0800a8e6

08009d0c <_scanf_chars>:
 8009d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d10:	4615      	mov	r5, r2
 8009d12:	688a      	ldr	r2, [r1, #8]
 8009d14:	4680      	mov	r8, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	b932      	cbnz	r2, 8009d28 <_scanf_chars+0x1c>
 8009d1a:	698a      	ldr	r2, [r1, #24]
 8009d1c:	2a00      	cmp	r2, #0
 8009d1e:	bf0c      	ite	eq
 8009d20:	2201      	moveq	r2, #1
 8009d22:	f04f 32ff 	movne.w	r2, #4294967295
 8009d26:	608a      	str	r2, [r1, #8]
 8009d28:	6822      	ldr	r2, [r4, #0]
 8009d2a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009dbc <_scanf_chars+0xb0>
 8009d2e:	06d1      	lsls	r1, r2, #27
 8009d30:	bf5f      	itttt	pl
 8009d32:	681a      	ldrpl	r2, [r3, #0]
 8009d34:	1d11      	addpl	r1, r2, #4
 8009d36:	6019      	strpl	r1, [r3, #0]
 8009d38:	6816      	ldrpl	r6, [r2, #0]
 8009d3a:	2700      	movs	r7, #0
 8009d3c:	69a0      	ldr	r0, [r4, #24]
 8009d3e:	b188      	cbz	r0, 8009d64 <_scanf_chars+0x58>
 8009d40:	2801      	cmp	r0, #1
 8009d42:	d107      	bne.n	8009d54 <_scanf_chars+0x48>
 8009d44:	682a      	ldr	r2, [r5, #0]
 8009d46:	7811      	ldrb	r1, [r2, #0]
 8009d48:	6962      	ldr	r2, [r4, #20]
 8009d4a:	5c52      	ldrb	r2, [r2, r1]
 8009d4c:	b952      	cbnz	r2, 8009d64 <_scanf_chars+0x58>
 8009d4e:	2f00      	cmp	r7, #0
 8009d50:	d031      	beq.n	8009db6 <_scanf_chars+0xaa>
 8009d52:	e022      	b.n	8009d9a <_scanf_chars+0x8e>
 8009d54:	2802      	cmp	r0, #2
 8009d56:	d120      	bne.n	8009d9a <_scanf_chars+0x8e>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009d60:	071b      	lsls	r3, r3, #28
 8009d62:	d41a      	bmi.n	8009d9a <_scanf_chars+0x8e>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	06da      	lsls	r2, r3, #27
 8009d68:	bf5e      	ittt	pl
 8009d6a:	682b      	ldrpl	r3, [r5, #0]
 8009d6c:	781b      	ldrbpl	r3, [r3, #0]
 8009d6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009d72:	682a      	ldr	r2, [r5, #0]
 8009d74:	686b      	ldr	r3, [r5, #4]
 8009d76:	3201      	adds	r2, #1
 8009d78:	602a      	str	r2, [r5, #0]
 8009d7a:	68a2      	ldr	r2, [r4, #8]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	3a01      	subs	r2, #1
 8009d80:	606b      	str	r3, [r5, #4]
 8009d82:	3701      	adds	r7, #1
 8009d84:	60a2      	str	r2, [r4, #8]
 8009d86:	b142      	cbz	r2, 8009d9a <_scanf_chars+0x8e>
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	dcd7      	bgt.n	8009d3c <_scanf_chars+0x30>
 8009d8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d90:	4629      	mov	r1, r5
 8009d92:	4640      	mov	r0, r8
 8009d94:	4798      	blx	r3
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d0d0      	beq.n	8009d3c <_scanf_chars+0x30>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	f013 0310 	ands.w	r3, r3, #16
 8009da0:	d105      	bne.n	8009dae <_scanf_chars+0xa2>
 8009da2:	68e2      	ldr	r2, [r4, #12]
 8009da4:	3201      	adds	r2, #1
 8009da6:	60e2      	str	r2, [r4, #12]
 8009da8:	69a2      	ldr	r2, [r4, #24]
 8009daa:	b102      	cbz	r2, 8009dae <_scanf_chars+0xa2>
 8009dac:	7033      	strb	r3, [r6, #0]
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	443b      	add	r3, r7
 8009db2:	6123      	str	r3, [r4, #16]
 8009db4:	2000      	movs	r0, #0
 8009db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dba:	bf00      	nop
 8009dbc:	0800a913 	.word	0x0800a913

08009dc0 <_scanf_i>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	4698      	mov	r8, r3
 8009dc6:	4b74      	ldr	r3, [pc, #464]	; (8009f98 <_scanf_i+0x1d8>)
 8009dc8:	460c      	mov	r4, r1
 8009dca:	4682      	mov	sl, r0
 8009dcc:	4616      	mov	r6, r2
 8009dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	ab03      	add	r3, sp, #12
 8009dd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009dda:	4b70      	ldr	r3, [pc, #448]	; (8009f9c <_scanf_i+0x1dc>)
 8009ddc:	69a1      	ldr	r1, [r4, #24]
 8009dde:	4a70      	ldr	r2, [pc, #448]	; (8009fa0 <_scanf_i+0x1e0>)
 8009de0:	2903      	cmp	r1, #3
 8009de2:	bf18      	it	ne
 8009de4:	461a      	movne	r2, r3
 8009de6:	68a3      	ldr	r3, [r4, #8]
 8009de8:	9201      	str	r2, [sp, #4]
 8009dea:	1e5a      	subs	r2, r3, #1
 8009dec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009df0:	bf88      	it	hi
 8009df2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009df6:	4627      	mov	r7, r4
 8009df8:	bf82      	ittt	hi
 8009dfa:	eb03 0905 	addhi.w	r9, r3, r5
 8009dfe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009e02:	60a3      	strhi	r3, [r4, #8]
 8009e04:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009e08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009e0c:	bf98      	it	ls
 8009e0e:	f04f 0900 	movls.w	r9, #0
 8009e12:	6023      	str	r3, [r4, #0]
 8009e14:	463d      	mov	r5, r7
 8009e16:	f04f 0b00 	mov.w	fp, #0
 8009e1a:	6831      	ldr	r1, [r6, #0]
 8009e1c:	ab03      	add	r3, sp, #12
 8009e1e:	7809      	ldrb	r1, [r1, #0]
 8009e20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009e24:	2202      	movs	r2, #2
 8009e26:	f7f6 f9e3 	bl	80001f0 <memchr>
 8009e2a:	b328      	cbz	r0, 8009e78 <_scanf_i+0xb8>
 8009e2c:	f1bb 0f01 	cmp.w	fp, #1
 8009e30:	d159      	bne.n	8009ee6 <_scanf_i+0x126>
 8009e32:	6862      	ldr	r2, [r4, #4]
 8009e34:	b92a      	cbnz	r2, 8009e42 <_scanf_i+0x82>
 8009e36:	6822      	ldr	r2, [r4, #0]
 8009e38:	2308      	movs	r3, #8
 8009e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e3e:	6063      	str	r3, [r4, #4]
 8009e40:	6022      	str	r2, [r4, #0]
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009e48:	6022      	str	r2, [r4, #0]
 8009e4a:	68a2      	ldr	r2, [r4, #8]
 8009e4c:	1e51      	subs	r1, r2, #1
 8009e4e:	60a1      	str	r1, [r4, #8]
 8009e50:	b192      	cbz	r2, 8009e78 <_scanf_i+0xb8>
 8009e52:	6832      	ldr	r2, [r6, #0]
 8009e54:	1c51      	adds	r1, r2, #1
 8009e56:	6031      	str	r1, [r6, #0]
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	f805 2b01 	strb.w	r2, [r5], #1
 8009e5e:	6872      	ldr	r2, [r6, #4]
 8009e60:	3a01      	subs	r2, #1
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	6072      	str	r2, [r6, #4]
 8009e66:	dc07      	bgt.n	8009e78 <_scanf_i+0xb8>
 8009e68:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4650      	mov	r0, sl
 8009e70:	4790      	blx	r2
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f040 8085 	bne.w	8009f82 <_scanf_i+0x1c2>
 8009e78:	f10b 0b01 	add.w	fp, fp, #1
 8009e7c:	f1bb 0f03 	cmp.w	fp, #3
 8009e80:	d1cb      	bne.n	8009e1a <_scanf_i+0x5a>
 8009e82:	6863      	ldr	r3, [r4, #4]
 8009e84:	b90b      	cbnz	r3, 8009e8a <_scanf_i+0xca>
 8009e86:	230a      	movs	r3, #10
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	6863      	ldr	r3, [r4, #4]
 8009e8c:	4945      	ldr	r1, [pc, #276]	; (8009fa4 <_scanf_i+0x1e4>)
 8009e8e:	6960      	ldr	r0, [r4, #20]
 8009e90:	1ac9      	subs	r1, r1, r3
 8009e92:	f000 f999 	bl	800a1c8 <__sccl>
 8009e96:	f04f 0b00 	mov.w	fp, #0
 8009e9a:	68a3      	ldr	r3, [r4, #8]
 8009e9c:	6822      	ldr	r2, [r4, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d03d      	beq.n	8009f1e <_scanf_i+0x15e>
 8009ea2:	6831      	ldr	r1, [r6, #0]
 8009ea4:	6960      	ldr	r0, [r4, #20]
 8009ea6:	f891 c000 	ldrb.w	ip, [r1]
 8009eaa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d035      	beq.n	8009f1e <_scanf_i+0x15e>
 8009eb2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009eb6:	d124      	bne.n	8009f02 <_scanf_i+0x142>
 8009eb8:	0510      	lsls	r0, r2, #20
 8009eba:	d522      	bpl.n	8009f02 <_scanf_i+0x142>
 8009ebc:	f10b 0b01 	add.w	fp, fp, #1
 8009ec0:	f1b9 0f00 	cmp.w	r9, #0
 8009ec4:	d003      	beq.n	8009ece <_scanf_i+0x10e>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ecc:	60a3      	str	r3, [r4, #8]
 8009ece:	6873      	ldr	r3, [r6, #4]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	6073      	str	r3, [r6, #4]
 8009ed6:	dd1b      	ble.n	8009f10 <_scanf_i+0x150>
 8009ed8:	6833      	ldr	r3, [r6, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	6033      	str	r3, [r6, #0]
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	60a3      	str	r3, [r4, #8]
 8009ee4:	e7d9      	b.n	8009e9a <_scanf_i+0xda>
 8009ee6:	f1bb 0f02 	cmp.w	fp, #2
 8009eea:	d1ae      	bne.n	8009e4a <_scanf_i+0x8a>
 8009eec:	6822      	ldr	r2, [r4, #0]
 8009eee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009ef2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009ef6:	d1bf      	bne.n	8009e78 <_scanf_i+0xb8>
 8009ef8:	2310      	movs	r3, #16
 8009efa:	6063      	str	r3, [r4, #4]
 8009efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f00:	e7a2      	b.n	8009e48 <_scanf_i+0x88>
 8009f02:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009f06:	6022      	str	r2, [r4, #0]
 8009f08:	780b      	ldrb	r3, [r1, #0]
 8009f0a:	f805 3b01 	strb.w	r3, [r5], #1
 8009f0e:	e7de      	b.n	8009ece <_scanf_i+0x10e>
 8009f10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f14:	4631      	mov	r1, r6
 8009f16:	4650      	mov	r0, sl
 8009f18:	4798      	blx	r3
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0df      	beq.n	8009ede <_scanf_i+0x11e>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	05d9      	lsls	r1, r3, #23
 8009f22:	d50d      	bpl.n	8009f40 <_scanf_i+0x180>
 8009f24:	42bd      	cmp	r5, r7
 8009f26:	d909      	bls.n	8009f3c <_scanf_i+0x17c>
 8009f28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f30:	4632      	mov	r2, r6
 8009f32:	4650      	mov	r0, sl
 8009f34:	4798      	blx	r3
 8009f36:	f105 39ff 	add.w	r9, r5, #4294967295
 8009f3a:	464d      	mov	r5, r9
 8009f3c:	42bd      	cmp	r5, r7
 8009f3e:	d028      	beq.n	8009f92 <_scanf_i+0x1d2>
 8009f40:	6822      	ldr	r2, [r4, #0]
 8009f42:	f012 0210 	ands.w	r2, r2, #16
 8009f46:	d113      	bne.n	8009f70 <_scanf_i+0x1b0>
 8009f48:	702a      	strb	r2, [r5, #0]
 8009f4a:	6863      	ldr	r3, [r4, #4]
 8009f4c:	9e01      	ldr	r6, [sp, #4]
 8009f4e:	4639      	mov	r1, r7
 8009f50:	4650      	mov	r0, sl
 8009f52:	47b0      	blx	r6
 8009f54:	f8d8 3000 	ldr.w	r3, [r8]
 8009f58:	6821      	ldr	r1, [r4, #0]
 8009f5a:	1d1a      	adds	r2, r3, #4
 8009f5c:	f8c8 2000 	str.w	r2, [r8]
 8009f60:	f011 0f20 	tst.w	r1, #32
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	d00f      	beq.n	8009f88 <_scanf_i+0x1c8>
 8009f68:	6018      	str	r0, [r3, #0]
 8009f6a:	68e3      	ldr	r3, [r4, #12]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	60e3      	str	r3, [r4, #12]
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	1bed      	subs	r5, r5, r7
 8009f74:	445d      	add	r5, fp
 8009f76:	442b      	add	r3, r5
 8009f78:	6123      	str	r3, [r4, #16]
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	b007      	add	sp, #28
 8009f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f82:	f04f 0b00 	mov.w	fp, #0
 8009f86:	e7ca      	b.n	8009f1e <_scanf_i+0x15e>
 8009f88:	07ca      	lsls	r2, r1, #31
 8009f8a:	bf4c      	ite	mi
 8009f8c:	8018      	strhmi	r0, [r3, #0]
 8009f8e:	6018      	strpl	r0, [r3, #0]
 8009f90:	e7eb      	b.n	8009f6a <_scanf_i+0x1aa>
 8009f92:	2001      	movs	r0, #1
 8009f94:	e7f2      	b.n	8009f7c <_scanf_i+0x1bc>
 8009f96:	bf00      	nop
 8009f98:	0800a714 	.word	0x0800a714
 8009f9c:	0800a595 	.word	0x0800a595
 8009fa0:	0800a4ad 	.word	0x0800a4ad
 8009fa4:	0800a907 	.word	0x0800a907

08009fa8 <__sflush_r>:
 8009fa8:	898a      	ldrh	r2, [r1, #12]
 8009faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fae:	4605      	mov	r5, r0
 8009fb0:	0710      	lsls	r0, r2, #28
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	d458      	bmi.n	800a068 <__sflush_r+0xc0>
 8009fb6:	684b      	ldr	r3, [r1, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	dc05      	bgt.n	8009fc8 <__sflush_r+0x20>
 8009fbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	dc02      	bgt.n	8009fc8 <__sflush_r+0x20>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fca:	2e00      	cmp	r6, #0
 8009fcc:	d0f9      	beq.n	8009fc2 <__sflush_r+0x1a>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fd4:	682f      	ldr	r7, [r5, #0]
 8009fd6:	6a21      	ldr	r1, [r4, #32]
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	d032      	beq.n	800a042 <__sflush_r+0x9a>
 8009fdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	075a      	lsls	r2, r3, #29
 8009fe2:	d505      	bpl.n	8009ff0 <__sflush_r+0x48>
 8009fe4:	6863      	ldr	r3, [r4, #4]
 8009fe6:	1ac0      	subs	r0, r0, r3
 8009fe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fea:	b10b      	cbz	r3, 8009ff0 <__sflush_r+0x48>
 8009fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fee:	1ac0      	subs	r0, r0, r3
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ff6:	6a21      	ldr	r1, [r4, #32]
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	47b0      	blx	r6
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	d106      	bne.n	800a010 <__sflush_r+0x68>
 800a002:	6829      	ldr	r1, [r5, #0]
 800a004:	291d      	cmp	r1, #29
 800a006:	d82b      	bhi.n	800a060 <__sflush_r+0xb8>
 800a008:	4a29      	ldr	r2, [pc, #164]	; (800a0b0 <__sflush_r+0x108>)
 800a00a:	410a      	asrs	r2, r1
 800a00c:	07d6      	lsls	r6, r2, #31
 800a00e:	d427      	bmi.n	800a060 <__sflush_r+0xb8>
 800a010:	2200      	movs	r2, #0
 800a012:	6062      	str	r2, [r4, #4]
 800a014:	04d9      	lsls	r1, r3, #19
 800a016:	6922      	ldr	r2, [r4, #16]
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	d504      	bpl.n	800a026 <__sflush_r+0x7e>
 800a01c:	1c42      	adds	r2, r0, #1
 800a01e:	d101      	bne.n	800a024 <__sflush_r+0x7c>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	b903      	cbnz	r3, 800a026 <__sflush_r+0x7e>
 800a024:	6560      	str	r0, [r4, #84]	; 0x54
 800a026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a028:	602f      	str	r7, [r5, #0]
 800a02a:	2900      	cmp	r1, #0
 800a02c:	d0c9      	beq.n	8009fc2 <__sflush_r+0x1a>
 800a02e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a032:	4299      	cmp	r1, r3
 800a034:	d002      	beq.n	800a03c <__sflush_r+0x94>
 800a036:	4628      	mov	r0, r5
 800a038:	f7ff f8b6 	bl	80091a8 <_free_r>
 800a03c:	2000      	movs	r0, #0
 800a03e:	6360      	str	r0, [r4, #52]	; 0x34
 800a040:	e7c0      	b.n	8009fc4 <__sflush_r+0x1c>
 800a042:	2301      	movs	r3, #1
 800a044:	4628      	mov	r0, r5
 800a046:	47b0      	blx	r6
 800a048:	1c41      	adds	r1, r0, #1
 800a04a:	d1c8      	bne.n	8009fde <__sflush_r+0x36>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0c5      	beq.n	8009fde <__sflush_r+0x36>
 800a052:	2b1d      	cmp	r3, #29
 800a054:	d001      	beq.n	800a05a <__sflush_r+0xb2>
 800a056:	2b16      	cmp	r3, #22
 800a058:	d101      	bne.n	800a05e <__sflush_r+0xb6>
 800a05a:	602f      	str	r7, [r5, #0]
 800a05c:	e7b1      	b.n	8009fc2 <__sflush_r+0x1a>
 800a05e:	89a3      	ldrh	r3, [r4, #12]
 800a060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a064:	81a3      	strh	r3, [r4, #12]
 800a066:	e7ad      	b.n	8009fc4 <__sflush_r+0x1c>
 800a068:	690f      	ldr	r7, [r1, #16]
 800a06a:	2f00      	cmp	r7, #0
 800a06c:	d0a9      	beq.n	8009fc2 <__sflush_r+0x1a>
 800a06e:	0793      	lsls	r3, r2, #30
 800a070:	680e      	ldr	r6, [r1, #0]
 800a072:	bf08      	it	eq
 800a074:	694b      	ldreq	r3, [r1, #20]
 800a076:	600f      	str	r7, [r1, #0]
 800a078:	bf18      	it	ne
 800a07a:	2300      	movne	r3, #0
 800a07c:	eba6 0807 	sub.w	r8, r6, r7
 800a080:	608b      	str	r3, [r1, #8]
 800a082:	f1b8 0f00 	cmp.w	r8, #0
 800a086:	dd9c      	ble.n	8009fc2 <__sflush_r+0x1a>
 800a088:	6a21      	ldr	r1, [r4, #32]
 800a08a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a08c:	4643      	mov	r3, r8
 800a08e:	463a      	mov	r2, r7
 800a090:	4628      	mov	r0, r5
 800a092:	47b0      	blx	r6
 800a094:	2800      	cmp	r0, #0
 800a096:	dc06      	bgt.n	800a0a6 <__sflush_r+0xfe>
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a09e:	81a3      	strh	r3, [r4, #12]
 800a0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a4:	e78e      	b.n	8009fc4 <__sflush_r+0x1c>
 800a0a6:	4407      	add	r7, r0
 800a0a8:	eba8 0800 	sub.w	r8, r8, r0
 800a0ac:	e7e9      	b.n	800a082 <__sflush_r+0xda>
 800a0ae:	bf00      	nop
 800a0b0:	dfbffffe 	.word	0xdfbffffe

0800a0b4 <_fflush_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	690b      	ldr	r3, [r1, #16]
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	b913      	cbnz	r3, 800a0c4 <_fflush_r+0x10>
 800a0be:	2500      	movs	r5, #0
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	b118      	cbz	r0, 800a0ce <_fflush_r+0x1a>
 800a0c6:	6a03      	ldr	r3, [r0, #32]
 800a0c8:	b90b      	cbnz	r3, 800a0ce <_fflush_r+0x1a>
 800a0ca:	f7fe fe2b 	bl	8008d24 <__sinit>
 800a0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0f3      	beq.n	800a0be <_fflush_r+0xa>
 800a0d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0d8:	07d0      	lsls	r0, r2, #31
 800a0da:	d404      	bmi.n	800a0e6 <_fflush_r+0x32>
 800a0dc:	0599      	lsls	r1, r3, #22
 800a0de:	d402      	bmi.n	800a0e6 <_fflush_r+0x32>
 800a0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0e2:	f7ff f850 	bl	8009186 <__retarget_lock_acquire_recursive>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f7ff ff5d 	bl	8009fa8 <__sflush_r>
 800a0ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0f0:	07da      	lsls	r2, r3, #31
 800a0f2:	4605      	mov	r5, r0
 800a0f4:	d4e4      	bmi.n	800a0c0 <_fflush_r+0xc>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	059b      	lsls	r3, r3, #22
 800a0fa:	d4e1      	bmi.n	800a0c0 <_fflush_r+0xc>
 800a0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0fe:	f7ff f843 	bl	8009188 <__retarget_lock_release_recursive>
 800a102:	e7dd      	b.n	800a0c0 <_fflush_r+0xc>

0800a104 <__swhatbuf_r>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	460c      	mov	r4, r1
 800a108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a10c:	2900      	cmp	r1, #0
 800a10e:	b096      	sub	sp, #88	; 0x58
 800a110:	4615      	mov	r5, r2
 800a112:	461e      	mov	r6, r3
 800a114:	da0d      	bge.n	800a132 <__swhatbuf_r+0x2e>
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a11c:	f04f 0100 	mov.w	r1, #0
 800a120:	bf0c      	ite	eq
 800a122:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a126:	2340      	movne	r3, #64	; 0x40
 800a128:	2000      	movs	r0, #0
 800a12a:	6031      	str	r1, [r6, #0]
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	b016      	add	sp, #88	; 0x58
 800a130:	bd70      	pop	{r4, r5, r6, pc}
 800a132:	466a      	mov	r2, sp
 800a134:	f000 f8d6 	bl	800a2e4 <_fstat_r>
 800a138:	2800      	cmp	r0, #0
 800a13a:	dbec      	blt.n	800a116 <__swhatbuf_r+0x12>
 800a13c:	9901      	ldr	r1, [sp, #4]
 800a13e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a142:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a146:	4259      	negs	r1, r3
 800a148:	4159      	adcs	r1, r3
 800a14a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a14e:	e7eb      	b.n	800a128 <__swhatbuf_r+0x24>

0800a150 <__smakebuf_r>:
 800a150:	898b      	ldrh	r3, [r1, #12]
 800a152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a154:	079d      	lsls	r5, r3, #30
 800a156:	4606      	mov	r6, r0
 800a158:	460c      	mov	r4, r1
 800a15a:	d507      	bpl.n	800a16c <__smakebuf_r+0x1c>
 800a15c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	6123      	str	r3, [r4, #16]
 800a164:	2301      	movs	r3, #1
 800a166:	6163      	str	r3, [r4, #20]
 800a168:	b002      	add	sp, #8
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	ab01      	add	r3, sp, #4
 800a16e:	466a      	mov	r2, sp
 800a170:	f7ff ffc8 	bl	800a104 <__swhatbuf_r>
 800a174:	9900      	ldr	r1, [sp, #0]
 800a176:	4605      	mov	r5, r0
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff f881 	bl	8009280 <_malloc_r>
 800a17e:	b948      	cbnz	r0, 800a194 <__smakebuf_r+0x44>
 800a180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a184:	059a      	lsls	r2, r3, #22
 800a186:	d4ef      	bmi.n	800a168 <__smakebuf_r+0x18>
 800a188:	f023 0303 	bic.w	r3, r3, #3
 800a18c:	f043 0302 	orr.w	r3, r3, #2
 800a190:	81a3      	strh	r3, [r4, #12]
 800a192:	e7e3      	b.n	800a15c <__smakebuf_r+0xc>
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	6020      	str	r0, [r4, #0]
 800a198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	9b00      	ldr	r3, [sp, #0]
 800a1a0:	6163      	str	r3, [r4, #20]
 800a1a2:	9b01      	ldr	r3, [sp, #4]
 800a1a4:	6120      	str	r0, [r4, #16]
 800a1a6:	b15b      	cbz	r3, 800a1c0 <__smakebuf_r+0x70>
 800a1a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f000 f8ab 	bl	800a308 <_isatty_r>
 800a1b2:	b128      	cbz	r0, 800a1c0 <__smakebuf_r+0x70>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	f023 0303 	bic.w	r3, r3, #3
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	431d      	orrs	r5, r3
 800a1c4:	81a5      	strh	r5, [r4, #12]
 800a1c6:	e7cf      	b.n	800a168 <__smakebuf_r+0x18>

0800a1c8 <__sccl>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	780b      	ldrb	r3, [r1, #0]
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	2b5e      	cmp	r3, #94	; 0x5e
 800a1d0:	bf0b      	itete	eq
 800a1d2:	784b      	ldrbeq	r3, [r1, #1]
 800a1d4:	1c4a      	addne	r2, r1, #1
 800a1d6:	1c8a      	addeq	r2, r1, #2
 800a1d8:	2100      	movne	r1, #0
 800a1da:	bf08      	it	eq
 800a1dc:	2101      	moveq	r1, #1
 800a1de:	3801      	subs	r0, #1
 800a1e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a1e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a1e8:	42a8      	cmp	r0, r5
 800a1ea:	d1fb      	bne.n	800a1e4 <__sccl+0x1c>
 800a1ec:	b90b      	cbnz	r3, 800a1f2 <__sccl+0x2a>
 800a1ee:	1e50      	subs	r0, r2, #1
 800a1f0:	bd70      	pop	{r4, r5, r6, pc}
 800a1f2:	f081 0101 	eor.w	r1, r1, #1
 800a1f6:	54e1      	strb	r1, [r4, r3]
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a200:	2d2d      	cmp	r5, #45	; 0x2d
 800a202:	d005      	beq.n	800a210 <__sccl+0x48>
 800a204:	2d5d      	cmp	r5, #93	; 0x5d
 800a206:	d016      	beq.n	800a236 <__sccl+0x6e>
 800a208:	2d00      	cmp	r5, #0
 800a20a:	d0f1      	beq.n	800a1f0 <__sccl+0x28>
 800a20c:	462b      	mov	r3, r5
 800a20e:	e7f2      	b.n	800a1f6 <__sccl+0x2e>
 800a210:	7846      	ldrb	r6, [r0, #1]
 800a212:	2e5d      	cmp	r6, #93	; 0x5d
 800a214:	d0fa      	beq.n	800a20c <__sccl+0x44>
 800a216:	42b3      	cmp	r3, r6
 800a218:	dcf8      	bgt.n	800a20c <__sccl+0x44>
 800a21a:	3002      	adds	r0, #2
 800a21c:	461a      	mov	r2, r3
 800a21e:	3201      	adds	r2, #1
 800a220:	4296      	cmp	r6, r2
 800a222:	54a1      	strb	r1, [r4, r2]
 800a224:	dcfb      	bgt.n	800a21e <__sccl+0x56>
 800a226:	1af2      	subs	r2, r6, r3
 800a228:	3a01      	subs	r2, #1
 800a22a:	1c5d      	adds	r5, r3, #1
 800a22c:	42b3      	cmp	r3, r6
 800a22e:	bfa8      	it	ge
 800a230:	2200      	movge	r2, #0
 800a232:	18ab      	adds	r3, r5, r2
 800a234:	e7e1      	b.n	800a1fa <__sccl+0x32>
 800a236:	4610      	mov	r0, r2
 800a238:	e7da      	b.n	800a1f0 <__sccl+0x28>

0800a23a <__submore>:
 800a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23e:	460c      	mov	r4, r1
 800a240:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a246:	4299      	cmp	r1, r3
 800a248:	d11d      	bne.n	800a286 <__submore+0x4c>
 800a24a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a24e:	f7ff f817 	bl	8009280 <_malloc_r>
 800a252:	b918      	cbnz	r0, 800a25c <__submore+0x22>
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a260:	63a3      	str	r3, [r4, #56]	; 0x38
 800a262:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a266:	6360      	str	r0, [r4, #52]	; 0x34
 800a268:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a26c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a270:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a274:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a278:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a27c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a280:	6020      	str	r0, [r4, #0]
 800a282:	2000      	movs	r0, #0
 800a284:	e7e8      	b.n	800a258 <__submore+0x1e>
 800a286:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a288:	0077      	lsls	r7, r6, #1
 800a28a:	463a      	mov	r2, r7
 800a28c:	f000 f85c 	bl	800a348 <_realloc_r>
 800a290:	4605      	mov	r5, r0
 800a292:	2800      	cmp	r0, #0
 800a294:	d0de      	beq.n	800a254 <__submore+0x1a>
 800a296:	eb00 0806 	add.w	r8, r0, r6
 800a29a:	4601      	mov	r1, r0
 800a29c:	4632      	mov	r2, r6
 800a29e:	4640      	mov	r0, r8
 800a2a0:	f7fe ff73 	bl	800918a <memcpy>
 800a2a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a2a8:	f8c4 8000 	str.w	r8, [r4]
 800a2ac:	e7e9      	b.n	800a282 <__submore+0x48>

0800a2ae <memmove>:
 800a2ae:	4288      	cmp	r0, r1
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	eb01 0402 	add.w	r4, r1, r2
 800a2b6:	d902      	bls.n	800a2be <memmove+0x10>
 800a2b8:	4284      	cmp	r4, r0
 800a2ba:	4623      	mov	r3, r4
 800a2bc:	d807      	bhi.n	800a2ce <memmove+0x20>
 800a2be:	1e43      	subs	r3, r0, #1
 800a2c0:	42a1      	cmp	r1, r4
 800a2c2:	d008      	beq.n	800a2d6 <memmove+0x28>
 800a2c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2cc:	e7f8      	b.n	800a2c0 <memmove+0x12>
 800a2ce:	4402      	add	r2, r0
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	428a      	cmp	r2, r1
 800a2d4:	d100      	bne.n	800a2d8 <memmove+0x2a>
 800a2d6:	bd10      	pop	{r4, pc}
 800a2d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2e0:	e7f7      	b.n	800a2d2 <memmove+0x24>
	...

0800a2e4 <_fstat_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	; (800a304 <_fstat_r+0x20>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	602b      	str	r3, [r5, #0]
 800a2f2:	f7f7 fe4e 	bl	8001f92 <_fstat>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d102      	bne.n	800a300 <_fstat_r+0x1c>
 800a2fa:	682b      	ldr	r3, [r5, #0]
 800a2fc:	b103      	cbz	r3, 800a300 <_fstat_r+0x1c>
 800a2fe:	6023      	str	r3, [r4, #0]
 800a300:	bd38      	pop	{r3, r4, r5, pc}
 800a302:	bf00      	nop
 800a304:	20004c80 	.word	0x20004c80

0800a308 <_isatty_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d06      	ldr	r5, [pc, #24]	; (800a324 <_isatty_r+0x1c>)
 800a30c:	2300      	movs	r3, #0
 800a30e:	4604      	mov	r4, r0
 800a310:	4608      	mov	r0, r1
 800a312:	602b      	str	r3, [r5, #0]
 800a314:	f7f7 fe4d 	bl	8001fb2 <_isatty>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_isatty_r+0x1a>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_isatty_r+0x1a>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	20004c80 	.word	0x20004c80

0800a328 <_sbrk_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d06      	ldr	r5, [pc, #24]	; (800a344 <_sbrk_r+0x1c>)
 800a32c:	2300      	movs	r3, #0
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	602b      	str	r3, [r5, #0]
 800a334:	f7f7 fe56 	bl	8001fe4 <_sbrk>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d102      	bne.n	800a342 <_sbrk_r+0x1a>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	b103      	cbz	r3, 800a342 <_sbrk_r+0x1a>
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	20004c80 	.word	0x20004c80

0800a348 <_realloc_r>:
 800a348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34c:	4680      	mov	r8, r0
 800a34e:	4614      	mov	r4, r2
 800a350:	460e      	mov	r6, r1
 800a352:	b921      	cbnz	r1, 800a35e <_realloc_r+0x16>
 800a354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a358:	4611      	mov	r1, r2
 800a35a:	f7fe bf91 	b.w	8009280 <_malloc_r>
 800a35e:	b92a      	cbnz	r2, 800a36c <_realloc_r+0x24>
 800a360:	f7fe ff22 	bl	80091a8 <_free_r>
 800a364:	4625      	mov	r5, r4
 800a366:	4628      	mov	r0, r5
 800a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36c:	f000 f914 	bl	800a598 <_malloc_usable_size_r>
 800a370:	4284      	cmp	r4, r0
 800a372:	4607      	mov	r7, r0
 800a374:	d802      	bhi.n	800a37c <_realloc_r+0x34>
 800a376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a37a:	d812      	bhi.n	800a3a2 <_realloc_r+0x5a>
 800a37c:	4621      	mov	r1, r4
 800a37e:	4640      	mov	r0, r8
 800a380:	f7fe ff7e 	bl	8009280 <_malloc_r>
 800a384:	4605      	mov	r5, r0
 800a386:	2800      	cmp	r0, #0
 800a388:	d0ed      	beq.n	800a366 <_realloc_r+0x1e>
 800a38a:	42bc      	cmp	r4, r7
 800a38c:	4622      	mov	r2, r4
 800a38e:	4631      	mov	r1, r6
 800a390:	bf28      	it	cs
 800a392:	463a      	movcs	r2, r7
 800a394:	f7fe fef9 	bl	800918a <memcpy>
 800a398:	4631      	mov	r1, r6
 800a39a:	4640      	mov	r0, r8
 800a39c:	f7fe ff04 	bl	80091a8 <_free_r>
 800a3a0:	e7e1      	b.n	800a366 <_realloc_r+0x1e>
 800a3a2:	4635      	mov	r5, r6
 800a3a4:	e7df      	b.n	800a366 <_realloc_r+0x1e>
	...

0800a3a8 <_strtol_l.constprop.0>:
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ae:	d001      	beq.n	800a3b4 <_strtol_l.constprop.0+0xc>
 800a3b0:	2b24      	cmp	r3, #36	; 0x24
 800a3b2:	d906      	bls.n	800a3c2 <_strtol_l.constprop.0+0x1a>
 800a3b4:	f7fe febc 	bl	8009130 <__errno>
 800a3b8:	2316      	movs	r3, #22
 800a3ba:	6003      	str	r3, [r0, #0]
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a4a8 <_strtol_l.constprop.0+0x100>
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	462e      	mov	r6, r5
 800a3ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3ce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a3d2:	f017 0708 	ands.w	r7, r7, #8
 800a3d6:	d1f7      	bne.n	800a3c8 <_strtol_l.constprop.0+0x20>
 800a3d8:	2c2d      	cmp	r4, #45	; 0x2d
 800a3da:	d132      	bne.n	800a442 <_strtol_l.constprop.0+0x9a>
 800a3dc:	782c      	ldrb	r4, [r5, #0]
 800a3de:	2701      	movs	r7, #1
 800a3e0:	1cb5      	adds	r5, r6, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d05b      	beq.n	800a49e <_strtol_l.constprop.0+0xf6>
 800a3e6:	2b10      	cmp	r3, #16
 800a3e8:	d109      	bne.n	800a3fe <_strtol_l.constprop.0+0x56>
 800a3ea:	2c30      	cmp	r4, #48	; 0x30
 800a3ec:	d107      	bne.n	800a3fe <_strtol_l.constprop.0+0x56>
 800a3ee:	782c      	ldrb	r4, [r5, #0]
 800a3f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a3f4:	2c58      	cmp	r4, #88	; 0x58
 800a3f6:	d14d      	bne.n	800a494 <_strtol_l.constprop.0+0xec>
 800a3f8:	786c      	ldrb	r4, [r5, #1]
 800a3fa:	2310      	movs	r3, #16
 800a3fc:	3502      	adds	r5, #2
 800a3fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a402:	f108 38ff 	add.w	r8, r8, #4294967295
 800a406:	f04f 0e00 	mov.w	lr, #0
 800a40a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a40e:	4676      	mov	r6, lr
 800a410:	fb03 8a19 	mls	sl, r3, r9, r8
 800a414:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a418:	f1bc 0f09 	cmp.w	ip, #9
 800a41c:	d816      	bhi.n	800a44c <_strtol_l.constprop.0+0xa4>
 800a41e:	4664      	mov	r4, ip
 800a420:	42a3      	cmp	r3, r4
 800a422:	dd24      	ble.n	800a46e <_strtol_l.constprop.0+0xc6>
 800a424:	f1be 3fff 	cmp.w	lr, #4294967295
 800a428:	d008      	beq.n	800a43c <_strtol_l.constprop.0+0x94>
 800a42a:	45b1      	cmp	r9, r6
 800a42c:	d31c      	bcc.n	800a468 <_strtol_l.constprop.0+0xc0>
 800a42e:	d101      	bne.n	800a434 <_strtol_l.constprop.0+0x8c>
 800a430:	45a2      	cmp	sl, r4
 800a432:	db19      	blt.n	800a468 <_strtol_l.constprop.0+0xc0>
 800a434:	fb06 4603 	mla	r6, r6, r3, r4
 800a438:	f04f 0e01 	mov.w	lr, #1
 800a43c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a440:	e7e8      	b.n	800a414 <_strtol_l.constprop.0+0x6c>
 800a442:	2c2b      	cmp	r4, #43	; 0x2b
 800a444:	bf04      	itt	eq
 800a446:	782c      	ldrbeq	r4, [r5, #0]
 800a448:	1cb5      	addeq	r5, r6, #2
 800a44a:	e7ca      	b.n	800a3e2 <_strtol_l.constprop.0+0x3a>
 800a44c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a450:	f1bc 0f19 	cmp.w	ip, #25
 800a454:	d801      	bhi.n	800a45a <_strtol_l.constprop.0+0xb2>
 800a456:	3c37      	subs	r4, #55	; 0x37
 800a458:	e7e2      	b.n	800a420 <_strtol_l.constprop.0+0x78>
 800a45a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a45e:	f1bc 0f19 	cmp.w	ip, #25
 800a462:	d804      	bhi.n	800a46e <_strtol_l.constprop.0+0xc6>
 800a464:	3c57      	subs	r4, #87	; 0x57
 800a466:	e7db      	b.n	800a420 <_strtol_l.constprop.0+0x78>
 800a468:	f04f 3eff 	mov.w	lr, #4294967295
 800a46c:	e7e6      	b.n	800a43c <_strtol_l.constprop.0+0x94>
 800a46e:	f1be 3fff 	cmp.w	lr, #4294967295
 800a472:	d105      	bne.n	800a480 <_strtol_l.constprop.0+0xd8>
 800a474:	2322      	movs	r3, #34	; 0x22
 800a476:	6003      	str	r3, [r0, #0]
 800a478:	4646      	mov	r6, r8
 800a47a:	b942      	cbnz	r2, 800a48e <_strtol_l.constprop.0+0xe6>
 800a47c:	4630      	mov	r0, r6
 800a47e:	e79e      	b.n	800a3be <_strtol_l.constprop.0+0x16>
 800a480:	b107      	cbz	r7, 800a484 <_strtol_l.constprop.0+0xdc>
 800a482:	4276      	negs	r6, r6
 800a484:	2a00      	cmp	r2, #0
 800a486:	d0f9      	beq.n	800a47c <_strtol_l.constprop.0+0xd4>
 800a488:	f1be 0f00 	cmp.w	lr, #0
 800a48c:	d000      	beq.n	800a490 <_strtol_l.constprop.0+0xe8>
 800a48e:	1e69      	subs	r1, r5, #1
 800a490:	6011      	str	r1, [r2, #0]
 800a492:	e7f3      	b.n	800a47c <_strtol_l.constprop.0+0xd4>
 800a494:	2430      	movs	r4, #48	; 0x30
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1b1      	bne.n	800a3fe <_strtol_l.constprop.0+0x56>
 800a49a:	2308      	movs	r3, #8
 800a49c:	e7af      	b.n	800a3fe <_strtol_l.constprop.0+0x56>
 800a49e:	2c30      	cmp	r4, #48	; 0x30
 800a4a0:	d0a5      	beq.n	800a3ee <_strtol_l.constprop.0+0x46>
 800a4a2:	230a      	movs	r3, #10
 800a4a4:	e7ab      	b.n	800a3fe <_strtol_l.constprop.0+0x56>
 800a4a6:	bf00      	nop
 800a4a8:	0800a913 	.word	0x0800a913

0800a4ac <_strtol_r>:
 800a4ac:	f7ff bf7c 	b.w	800a3a8 <_strtol_l.constprop.0>

0800a4b0 <_strtoul_l.constprop.0>:
 800a4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	4f36      	ldr	r7, [pc, #216]	; (800a590 <_strtoul_l.constprop.0+0xe0>)
 800a4b6:	4686      	mov	lr, r0
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4c0:	5d3e      	ldrb	r6, [r7, r4]
 800a4c2:	f016 0608 	ands.w	r6, r6, #8
 800a4c6:	d1f8      	bne.n	800a4ba <_strtoul_l.constprop.0+0xa>
 800a4c8:	2c2d      	cmp	r4, #45	; 0x2d
 800a4ca:	d130      	bne.n	800a52e <_strtoul_l.constprop.0+0x7e>
 800a4cc:	782c      	ldrb	r4, [r5, #0]
 800a4ce:	2601      	movs	r6, #1
 800a4d0:	1c85      	adds	r5, r0, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d057      	beq.n	800a586 <_strtoul_l.constprop.0+0xd6>
 800a4d6:	2b10      	cmp	r3, #16
 800a4d8:	d109      	bne.n	800a4ee <_strtoul_l.constprop.0+0x3e>
 800a4da:	2c30      	cmp	r4, #48	; 0x30
 800a4dc:	d107      	bne.n	800a4ee <_strtoul_l.constprop.0+0x3e>
 800a4de:	7828      	ldrb	r0, [r5, #0]
 800a4e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a4e4:	2858      	cmp	r0, #88	; 0x58
 800a4e6:	d149      	bne.n	800a57c <_strtoul_l.constprop.0+0xcc>
 800a4e8:	786c      	ldrb	r4, [r5, #1]
 800a4ea:	2310      	movs	r3, #16
 800a4ec:	3502      	adds	r5, #2
 800a4ee:	f04f 38ff 	mov.w	r8, #4294967295
 800a4f2:	2700      	movs	r7, #0
 800a4f4:	fbb8 f8f3 	udiv	r8, r8, r3
 800a4f8:	fb03 f908 	mul.w	r9, r3, r8
 800a4fc:	ea6f 0909 	mvn.w	r9, r9
 800a500:	4638      	mov	r0, r7
 800a502:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a506:	f1bc 0f09 	cmp.w	ip, #9
 800a50a:	d815      	bhi.n	800a538 <_strtoul_l.constprop.0+0x88>
 800a50c:	4664      	mov	r4, ip
 800a50e:	42a3      	cmp	r3, r4
 800a510:	dd23      	ble.n	800a55a <_strtoul_l.constprop.0+0xaa>
 800a512:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a516:	d007      	beq.n	800a528 <_strtoul_l.constprop.0+0x78>
 800a518:	4580      	cmp	r8, r0
 800a51a:	d31b      	bcc.n	800a554 <_strtoul_l.constprop.0+0xa4>
 800a51c:	d101      	bne.n	800a522 <_strtoul_l.constprop.0+0x72>
 800a51e:	45a1      	cmp	r9, r4
 800a520:	db18      	blt.n	800a554 <_strtoul_l.constprop.0+0xa4>
 800a522:	fb00 4003 	mla	r0, r0, r3, r4
 800a526:	2701      	movs	r7, #1
 800a528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a52c:	e7e9      	b.n	800a502 <_strtoul_l.constprop.0+0x52>
 800a52e:	2c2b      	cmp	r4, #43	; 0x2b
 800a530:	bf04      	itt	eq
 800a532:	782c      	ldrbeq	r4, [r5, #0]
 800a534:	1c85      	addeq	r5, r0, #2
 800a536:	e7cc      	b.n	800a4d2 <_strtoul_l.constprop.0+0x22>
 800a538:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a53c:	f1bc 0f19 	cmp.w	ip, #25
 800a540:	d801      	bhi.n	800a546 <_strtoul_l.constprop.0+0x96>
 800a542:	3c37      	subs	r4, #55	; 0x37
 800a544:	e7e3      	b.n	800a50e <_strtoul_l.constprop.0+0x5e>
 800a546:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a54a:	f1bc 0f19 	cmp.w	ip, #25
 800a54e:	d804      	bhi.n	800a55a <_strtoul_l.constprop.0+0xaa>
 800a550:	3c57      	subs	r4, #87	; 0x57
 800a552:	e7dc      	b.n	800a50e <_strtoul_l.constprop.0+0x5e>
 800a554:	f04f 37ff 	mov.w	r7, #4294967295
 800a558:	e7e6      	b.n	800a528 <_strtoul_l.constprop.0+0x78>
 800a55a:	1c7b      	adds	r3, r7, #1
 800a55c:	d106      	bne.n	800a56c <_strtoul_l.constprop.0+0xbc>
 800a55e:	2322      	movs	r3, #34	; 0x22
 800a560:	f8ce 3000 	str.w	r3, [lr]
 800a564:	4638      	mov	r0, r7
 800a566:	b932      	cbnz	r2, 800a576 <_strtoul_l.constprop.0+0xc6>
 800a568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a56c:	b106      	cbz	r6, 800a570 <_strtoul_l.constprop.0+0xc0>
 800a56e:	4240      	negs	r0, r0
 800a570:	2a00      	cmp	r2, #0
 800a572:	d0f9      	beq.n	800a568 <_strtoul_l.constprop.0+0xb8>
 800a574:	b107      	cbz	r7, 800a578 <_strtoul_l.constprop.0+0xc8>
 800a576:	1e69      	subs	r1, r5, #1
 800a578:	6011      	str	r1, [r2, #0]
 800a57a:	e7f5      	b.n	800a568 <_strtoul_l.constprop.0+0xb8>
 800a57c:	2430      	movs	r4, #48	; 0x30
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1b5      	bne.n	800a4ee <_strtoul_l.constprop.0+0x3e>
 800a582:	2308      	movs	r3, #8
 800a584:	e7b3      	b.n	800a4ee <_strtoul_l.constprop.0+0x3e>
 800a586:	2c30      	cmp	r4, #48	; 0x30
 800a588:	d0a9      	beq.n	800a4de <_strtoul_l.constprop.0+0x2e>
 800a58a:	230a      	movs	r3, #10
 800a58c:	e7af      	b.n	800a4ee <_strtoul_l.constprop.0+0x3e>
 800a58e:	bf00      	nop
 800a590:	0800a913 	.word	0x0800a913

0800a594 <_strtoul_r>:
 800a594:	f7ff bf8c 	b.w	800a4b0 <_strtoul_l.constprop.0>

0800a598 <_malloc_usable_size_r>:
 800a598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a59c:	1f18      	subs	r0, r3, #4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	bfbc      	itt	lt
 800a5a2:	580b      	ldrlt	r3, [r1, r0]
 800a5a4:	18c0      	addlt	r0, r0, r3
 800a5a6:	4770      	bx	lr

0800a5a8 <_init>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	bf00      	nop
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr

0800a5b4 <_fini>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	bf00      	nop
 800a5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ba:	bc08      	pop	{r3}
 800a5bc:	469e      	mov	lr, r3
 800a5be:	4770      	bx	lr
